
registers:	file format elf32-littlearm

Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	0x800162c <__pre_init>  @ imm = #0x1490
;     r0::zero_bss(&mut __sbss, &mut __ebss);
 800019c:      	movw	r0, #0x0
 80001a0:      	movt	r0, #0x2000
 80001a4:      	movw	r1, #0x4
 80001a8:      	movt	r1, #0x2000
 80001ac:      	bl	0x8001224 <r0::zero_bss::h521613f82fba7a94> @ imm = #0x1074
;     r0::init_data(&mut __sdata, &mut __edata, &__sidata);
 80001b0:      	movw	r0, #0x0
 80001b4:      	movt	r0, #0x2000
 80001b8:      	movw	r1, #0x0
 80001bc:      	movt	r1, #0x2000
 80001c0:      	movw	r2, #0x41a0
 80001c4:      	movt	r2, #0x800
 80001c8:      	bl	0x800129a <r0::init_data::hdbf9aef85a336761> @ imm = #0x10ce
 80001cc:      	movw	r0, #0xed88
 80001d0:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 80001d4:      	ldr	r1, [r0]
 80001d6:      	orr	r1, r1, #0xf00000
;             core::ptr::write_volatile(
 80001da:      	bl	0x80013ba <core::ptr::write_volatile::h99e490cbafb944e6> @ imm = #0x11dc
;             trampoline()
 80001de:      	bl	0x800160c <ResetTrampoline> @ imm = #0x142a

080001e2 <main>:
; #[entry]
 80001e2:      	push	{r7, lr}
 80001e4:      	mov	r7, sp
 80001e6:      	bl	0x80001ea <registers::__cortex_m_rt_main::hed256db275e96df6> @ imm = #0x0

080001ea <registers::__cortex_m_rt_main::hed256db275e96df6>:
; fn main() -> ! {
 80001ea:      	push	{r7, lr}
 80001ec:      	mov	r7, sp
 80001ee:      	sub	sp, #0x10
;     aux7::init();
 80001f0:      	bl	0x8000298 <aux7::init::hceb43cf831341f94> @ imm = #0xa4
 80001f4:      	movw	r0, #0x1018
 80001f8:      	movt	r0, #0x4800
 80001fc:      	str	r0, [sp, #0x8]
 80001fe:      	mov.w	r1, #0x200
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << 9);
 8000202:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x1a5a
 8000206:      	ldr	r0, [sp, #0x8]
 8000208:      	mov.w	r1, #0x800
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << 11);
 800020c:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x1a50
 8000210:      	movs	r0, #0x19
 8000212:      	str	r0, [sp, #0xc]
 8000214:      	movs	r0, #0x0
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << (9 + 16));
 8000216:      	cbnz	r0, 0x8000222 <registers::__cortex_m_rt_main::hed256db275e96df6+0x38> @ imm = #0x8
 8000218:      	b	0x800021a <registers::__cortex_m_rt_main::hed256db275e96df6+0x30> @ imm = #-0x2
 800021a:      	ldr	r0, [sp, #0xc]
 800021c:      	cmp	r0, #0x20
 800021e:      	blo	0x800022e <registers::__cortex_m_rt_main::hed256db275e96df6+0x44> @ imm = #0xc
 8000220:      	b	0x8000250 <registers::__cortex_m_rt_main::hed256db275e96df6+0x66> @ imm = #0x2c
 8000222:      	movw	r0, #0x326c
 8000226:      	movt	r0, #0x800
 800022a:      	bl	0x8002fe0 <core::panicking::panic_const::panic_const_add_overflow::he3d7b2ec77b797ca> @ imm = #0x2db2
 800022e:      	ldr	r0, [sp, #0xc]
 8000230:      	and	r1, r0, #0x1f
 8000234:      	movs	r0, #0x1
 8000236:      	lsl.w	r1, r0, r1
 800023a:      	movw	r0, #0x1018
 800023e:      	movt	r0, #0x4800
 8000242:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x1a1a
 8000246:      	movs	r0, #0x1b
 8000248:      	str	r0, [sp, #0x4]
 800024a:      	movs	r0, #0x0
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << (11 + 16));
 800024c:      	cbnz	r0, 0x8000264 <registers::__cortex_m_rt_main::hed256db275e96df6+0x7a> @ imm = #0x14
 800024e:      	b	0x800025c <registers::__cortex_m_rt_main::hed256db275e96df6+0x72> @ imm = #0xa
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << (9 + 16));
 8000250:      	movw	r0, #0x327c
 8000254:      	movt	r0, #0x800
 8000258:      	bl	0x800302c <core::panicking::panic_const::panic_const_shl_overflow::hb001c80bfcce0420> @ imm = #0x2dd0
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << (11 + 16));
 800025c:      	ldr	r0, [sp, #0x4]
 800025e:      	cmp	r0, #0x20
 8000260:      	blo	0x8000270 <registers::__cortex_m_rt_main::hed256db275e96df6+0x86> @ imm = #0xc
 8000262:      	b	0x800028a <registers::__cortex_m_rt_main::hed256db275e96df6+0xa0> @ imm = #0x24
 8000264:      	movw	r0, #0x328c
 8000268:      	movt	r0, #0x800
 800026c:      	bl	0x8002fe0 <core::panicking::panic_const::panic_const_add_overflow::he3d7b2ec77b797ca> @ imm = #0x2d70
 8000270:      	ldr	r0, [sp, #0x4]
 8000272:      	and	r1, r0, #0x1f
 8000276:      	movs	r0, #0x1
 8000278:      	lsl.w	r1, r0, r1
 800027c:      	movw	r0, #0x1018
 8000280:      	movt	r0, #0x4800
 8000284:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x19d8
 8000288:      	b	0x8000296 <registers::__cortex_m_rt_main::hed256db275e96df6+0xac> @ imm = #0xa
 800028a:      	movw	r0, #0x329c
 800028e:      	movt	r0, #0x800
 8000292:      	bl	0x800302c <core::panicking::panic_const::panic_const_shl_overflow::hb001c80bfcce0420> @ imm = #0x2d96
;     loop {}
 8000296:      	b	0x8000296 <registers::__cortex_m_rt_main::hed256db275e96df6+0xac> @ imm = #-0x4

08000298 <aux7::init::hceb43cf831341f94>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 8000298:      	push	{r7, lr}
 800029a:      	mov	r7, sp
 800029c:      	sub	sp, #0x40
;     let device_periphs = stm32::Peripherals::take().unwrap();
 800029e:      	bl	0x8000304 <stm32f3::stm32f303::Peripherals::take::h319dda64accbbb42> @ imm = #0x62
 80002a2:      	strb	r0, [r7, #-2]
;         match self {
 80002a6:      	ldrb	r0, [r7, #-2]
 80002aa:      	lsls	r0, r0, #0x1f
 80002ac:      	cbnz	r0, 0x80002bc <aux7::init::hceb43cf831341f94+0x24> @ imm = #0xc
 80002ae:      	b	0x80002b0 <aux7::init::hceb43cf831341f94+0x18> @ imm = #-0x2
;             None => unwrap_failed(),
 80002b0:      	movw	r0, #0x32d4
 80002b4:      	movt	r0, #0x800
 80002b8:      	bl	0x8002288 <core::option::unwrap_failed::he7b1f772ea296755> @ imm = #0x1fcc
 80002bc:      	add	r0, sp, #0x4
;     let mut reset_and_clock_control = device_periphs.RCC.constrain();
 80002be:      	str	r0, [sp]
 80002c0:      	bl	0x8001152 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h5819d8ddb56c7374> @ imm = #0xe8e
 80002c4:      	ldr	r0, [sp]
;     let mut gpioe = device_periphs.GPIOE.split(&mut reset_and_clock_control.ahb);
 80002c6:      	adds	r0, #0x2c
 80002c8:      	bl	0x800117a <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hdceb10867ed4e863E> @ imm = #0xeae
 80002cc:      	sub.w	r0, r7, #0xd
 80002d0:      	sub.w	r2, r7, #0xe
;     let _leds = Leds::new(
 80002d4:      	mov	r1, r2
 80002d6:      	bl	0x800053c <stm32f3_discovery::leds::Leds::new::h2d0abee0f3dc1587> @ imm = #0x262
;     let core_periphs = cortex_m::Peripherals::take().unwrap();
 80002da:      	bl	0x800051a <cortex_m::peripheral::Peripherals::take::hb2466ad778aee6d9> @ imm = #0x23c
 80002de:      	strb	r0, [r7, #-1]
;         match self {
 80002e2:      	ldrb	r0, [r7, #-1]
 80002e6:      	lsls	r0, r0, #0x1f
 80002e8:      	cbnz	r0, 0x80002f8 <aux7::init::hceb43cf831341f94+0x60> @ imm = #0xc
 80002ea:      	b	0x80002ec <aux7::init::hceb43cf831341f94+0x54> @ imm = #-0x2
;             None => unwrap_failed(),
 80002ec:      	movw	r0, #0x32e4
 80002f0:      	movt	r0, #0x800
 80002f4:      	bl	0x8002288 <core::option::unwrap_failed::he7b1f772ea296755> @ imm = #0x1f90
 80002f8:      	movw	r0, #0x1000
 80002fc:      	movt	r0, #0x4800
; }
 8000300:      	add	sp, #0x40
 8000302:      	pop	{r7, pc}

08000304 <stm32f3::stm32f303::Peripherals::take::h319dda64accbbb42>:
;     pub fn take() -> Option<Self> {
 8000304:      	push	{r7, lr}
 8000306:      	mov	r7, sp
;         cortex_m::interrupt::free(|_| {
 8000308:      	bl	0x800035e <cortex_m::interrupt::free::h410aee54586f1c91> @ imm = #0x52
;     }
 800030c:      	pop	{r7, pc}

0800030e <stm32f3::stm32f303::Peripherals::steal::h9eb56b9c9a9b1de8>:
;         DEVICE_PERIPHERALS = true;
 800030e:      	movw	r1, #0x0
 8000312:      	movt	r1, #0x2000
 8000316:      	movs	r0, #0x1
 8000318:      	strb	r0, [r1]
;     }
 800031a:      	bx	lr

0800031c <cortex_m::interrupt::free::h380f88e721e11418>:
; pub fn free<F, R>(f: F) -> R
 800031c:      	push	{r7, lr}
 800031e:      	mov	r7, sp
 8000320:      	sub	sp, #0x10
;     let primask = crate::register::primask::read();
 8000322:      	bl	0x8000404 <cortex_m::register::primask::read::h2a86ebcbd241c76e> @ imm = #0xde
 8000326:      	str	r0, [sp, #0x4]
 8000328:      	strb	r0, [r7, #-2]
;     disable();
 800032c:      	bl	0x800045c <cortex_m::interrupt::disable::hc858421479a9f5ff> @ imm = #0x12c
;     let r = f(unsafe { &CriticalSection::new() });
 8000330:      	bl	0x8002286 <bare_metal::CriticalSection::new::heeddff5b23b73a86> @ imm = #0x1f52
 8000334:      	add	r0, sp, #0xc
 8000336:      	bl	0x8000466 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3dd6e97859468430> @ imm = #0x12c
 800033a:      	mov	r1, r0
 800033c:      	ldr	r0, [sp, #0x4]
 800033e:      	mov	r2, r1
 8000340:      	str	r2, [sp, #0x8]
 8000342:      	strb	r1, [r7, #-1]
;     if primask.is_active() {
 8000346:      	bl	0x8000436 <cortex_m::register::primask::Primask::is_active::hd424520cd87300c5> @ imm = #0xec
 800034a:      	cbnz	r0, 0x8000358 <cortex_m::interrupt::free::h380f88e721e11418+0x3c> @ imm = #0xa
 800034c:      	b	0x800034e <cortex_m::interrupt::free::h380f88e721e11418+0x32> @ imm = #-0x2
; }
 800034e:      	ldr	r0, [sp, #0x8]
 8000350:      	and	r0, r0, #0x1
 8000354:      	add	sp, #0x10
 8000356:      	pop	{r7, pc}
;         unsafe { enable() }
 8000358:      	bl	0x8000452 <cortex_m::interrupt::enable::h2332b68390517e5e> @ imm = #0xf6
 800035c:      	b	0x800034e <cortex_m::interrupt::free::h380f88e721e11418+0x32> @ imm = #-0x12

0800035e <cortex_m::interrupt::free::h410aee54586f1c91>:
; pub fn free<F, R>(f: F) -> R
 800035e:      	push	{r7, lr}
 8000360:      	mov	r7, sp
 8000362:      	sub	sp, #0x10
;     let primask = crate::register::primask::read();
 8000364:      	bl	0x8000404 <cortex_m::register::primask::read::h2a86ebcbd241c76e> @ imm = #0x9c
 8000368:      	str	r0, [sp, #0x4]
 800036a:      	strb	r0, [r7, #-2]
;     disable();
 800036e:      	bl	0x800045c <cortex_m::interrupt::disable::hc858421479a9f5ff> @ imm = #0xea
;     let r = f(unsafe { &CriticalSection::new() });
 8000372:      	bl	0x8002286 <bare_metal::CriticalSection::new::heeddff5b23b73a86> @ imm = #0x1f10
 8000376:      	add	r0, sp, #0xc
 8000378:      	bl	0x80004d8 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h6b0776889d590651> @ imm = #0x15c
 800037c:      	mov	r1, r0
 800037e:      	ldr	r0, [sp, #0x4]
 8000380:      	mov	r2, r1
 8000382:      	str	r2, [sp, #0x8]
 8000384:      	strb	r1, [r7, #-1]
;     if primask.is_active() {
 8000388:      	bl	0x8000436 <cortex_m::register::primask::Primask::is_active::hd424520cd87300c5> @ imm = #0xaa
 800038c:      	cbnz	r0, 0x800039a <cortex_m::interrupt::free::h410aee54586f1c91+0x3c> @ imm = #0xa
 800038e:      	b	0x8000390 <cortex_m::interrupt::free::h410aee54586f1c91+0x32> @ imm = #-0x2
; }
 8000390:      	ldr	r0, [sp, #0x8]
 8000392:      	and	r0, r0, #0x1
 8000396:      	add	sp, #0x10
 8000398:      	pop	{r7, pc}
;         unsafe { enable() }
 800039a:      	bl	0x8000452 <cortex_m::interrupt::enable::h2332b68390517e5e> @ imm = #0xb4
 800039e:      	b	0x8000390 <cortex_m::interrupt::free::h410aee54586f1c91+0x32> @ imm = #-0x12

080003a0 <cortex_m::interrupt::free::hc48f3029b93c76dd>:
; pub fn free<F, R>(f: F) -> R
 80003a0:      	push	{r7, lr}
 80003a2:      	mov	r7, sp
 80003a4:      	sub	sp, #0x10
;     let primask = crate::register::primask::read();
 80003a6:      	bl	0x8000404 <cortex_m::register::primask::read::h2a86ebcbd241c76e> @ imm = #0x5a
 80003aa:      	str	r0, [sp, #0x4]
 80003ac:      	strb	r0, [r7, #-2]
;     disable();
 80003b0:      	bl	0x800045c <cortex_m::interrupt::disable::hc858421479a9f5ff> @ imm = #0xa8
;     let r = f(unsafe { &CriticalSection::new() });
 80003b4:      	bl	0x8002286 <bare_metal::CriticalSection::new::heeddff5b23b73a86> @ imm = #0x1ece
 80003b8:      	add	r0, sp, #0xc
 80003ba:      	bl	0x80004a0 <cortex_m::peripheral::Peripherals::take::{{closure}}::he551919a6030ef31> @ imm = #0xe2
 80003be:      	mov	r1, r0
 80003c0:      	ldr	r0, [sp, #0x4]
 80003c2:      	mov	r2, r1
 80003c4:      	str	r2, [sp, #0x8]
 80003c6:      	strb	r1, [r7, #-1]
;     if primask.is_active() {
 80003ca:      	bl	0x8000436 <cortex_m::register::primask::Primask::is_active::hd424520cd87300c5> @ imm = #0x68
 80003ce:      	cbnz	r0, 0x80003dc <cortex_m::interrupt::free::hc48f3029b93c76dd+0x3c> @ imm = #0xa
 80003d0:      	b	0x80003d2 <cortex_m::interrupt::free::hc48f3029b93c76dd+0x32> @ imm = #-0x2
; }
 80003d2:      	ldr	r0, [sp, #0x8]
 80003d4:      	and	r0, r0, #0x1
 80003d8:      	add	sp, #0x10
 80003da:      	pop	{r7, pc}
;         unsafe { enable() }
 80003dc:      	bl	0x8000452 <cortex_m::interrupt::enable::h2332b68390517e5e> @ imm = #0x72
 80003e0:      	b	0x80003d2 <cortex_m::interrupt::free::hc48f3029b93c76dd+0x32> @ imm = #-0x12

080003e2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hbb199ff759c4b341>:
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80003e2:      	sub	sp, #0x10
 80003e4:      	str	r0, [sp]
 80003e6:      	str	r1, [sp, #0x4]
 80003e8:      	ldrb	r0, [r0]
 80003ea:      	and	r0, r0, #0x1
 80003ee:      	str	r0, [sp, #0x8]
 80003f0:      	ldrb	r1, [r1]
 80003f2:      	and	r1, r1, #0x1
 80003f6:      	str	r1, [sp, #0xc]
 80003f8:      	subs	r0, r0, r1
 80003fa:      	clz	r0, r0
 80003fe:      	lsrs	r0, r0, #0x5
 8000400:      	add	sp, #0x10
 8000402:      	bx	lr

08000404 <cortex_m::register::primask::read::h2a86ebcbd241c76e>:
; pub fn read() -> Primask {
 8000404:      	push	{r7, lr}
 8000406:      	mov	r7, sp
 8000408:      	sub	sp, #0x8
;                     $func($($args),*)
 800040a:      	bl	0x8002280 <__primask_r> @ imm = #0x1e72
 800040e:      	str	r0, [sp, #0x4]
;     if r & (1 << 0) == (1 << 0) {
 8000410:      	and	r0, r0, #0x1
 8000414:      	cmp	r0, #0x1
 8000416:      	beq	0x8000422 <cortex_m::register::primask::read::h2a86ebcbd241c76e+0x1e> @ imm = #0x8
 8000418:      	b	0x800041a <cortex_m::register::primask::read::h2a86ebcbd241c76e+0x16> @ imm = #-0x2
 800041a:      	movs	r0, #0x0
;         Primask::Active
 800041c:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 8000420:      	b	0x800042a <cortex_m::register::primask::read::h2a86ebcbd241c76e+0x26> @ imm = #0x6
 8000422:      	movs	r0, #0x1
;         Primask::Inactive
 8000424:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 8000428:      	b	0x800042a <cortex_m::register::primask::read::h2a86ebcbd241c76e+0x26> @ imm = #-0x2
; }
 800042a:      	ldrb	r0, [r7, #-5]
 800042e:      	and	r0, r0, #0x1
 8000432:      	add	sp, #0x8
 8000434:      	pop	{r7, pc}

08000436 <cortex_m::register::primask::Primask::is_active::hd424520cd87300c5>:
;     pub fn is_active(self) -> bool {
 8000436:      	push	{r7, lr}
 8000438:      	mov	r7, sp
 800043a:      	sub	sp, #0x8
 800043c:      	strb	r0, [r7, #-1]
;         self == Primask::Active
 8000440:      	movw	r1, #0x32f4
 8000444:      	movt	r1, #0x800
 8000448:      	subs	r0, r7, #0x1
 800044a:      	bl	0x80003e2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hbb199ff759c4b341> @ imm = #-0x6c
;     }
 800044e:      	add	sp, #0x8
 8000450:      	pop	{r7, pc}

08000452 <cortex_m::interrupt::enable::h2332b68390517e5e>:
; pub unsafe fn enable() {
 8000452:      	push	{r7, lr}
 8000454:      	mov	r7, sp
;                     $func($($args),*)
 8000456:      	bl	0x800227c <__cpsie>     @ imm = #0x1e22
; }
 800045a:      	pop	{r7, pc}

0800045c <cortex_m::interrupt::disable::hc858421479a9f5ff>:
; pub fn disable() {
 800045c:      	push	{r7, lr}
 800045e:      	mov	r7, sp
;                     $func($($args),*)
 8000460:      	bl	0x8002278 <__cpsid>     @ imm = #0x1e14
; }
 8000464:      	pop	{r7, pc}

08000466 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3dd6e97859468430>:
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8000466:      	push	{r7, lr}
 8000468:      	mov	r7, sp
 800046a:      	sub	sp, #0x8
 800046c:      	str	r0, [sp, #0x4]
 800046e:      	bl	0x8000510 <cortex_m::peripheral::Peripherals::take::hafb6b7fc633bdfa2> @ imm = #0x9e
 8000472:      	strb	r0, [r7, #-6]
 8000476:      	ldrb	r0, [r7, #-6]
 800047a:      	lsls	r0, r0, #0x1f
 800047c:      	cbnz	r0, 0x8000488 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3dd6e97859468430+0x22> @ imm = #0x8
 800047e:      	b	0x8000480 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3dd6e97859468430+0x1a> @ imm = #-0x2
 8000480:      	movs	r0, #0x0
;             None    => None,
 8000482:      	strb	r0, [r7, #-7]
 8000486:      	b	0x8000494 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3dd6e97859468430+0x2e> @ imm = #0xa
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8000488:      	bl	0x8000524 <cortex_m::peripheral::Peripherals::steal::hbaaf4d98505c8e10> @ imm = #0x98
 800048c:      	movs	r0, #0x1
 800048e:      	strb	r0, [r7, #-7]
 8000492:      	b	0x8000494 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3dd6e97859468430+0x2e> @ imm = #-0x2
;         })
 8000494:      	ldrb	r0, [r7, #-7]
 8000498:      	and	r0, r0, #0x1
 800049c:      	add	sp, #0x8
 800049e:      	pop	{r7, pc}

080004a0 <cortex_m::peripheral::Peripherals::take::{{closure}}::he551919a6030ef31>:
;         interrupt::free(|_| {
 80004a0:      	push	{r7, lr}
 80004a2:      	mov	r7, sp
 80004a4:      	sub	sp, #0x8
 80004a6:      	str	r0, [sp, #0x4]
;             if unsafe { TAKEN } {
 80004a8:      	movw	r0, #0x1
 80004ac:      	movt	r0, #0x2000
 80004b0:      	ldrb	r0, [r0]
 80004b2:      	lsls	r0, r0, #0x1f
 80004b4:      	cbnz	r0, 0x80004c4 <cortex_m::peripheral::Peripherals::take::{{closure}}::he551919a6030ef31+0x24> @ imm = #0xc
 80004b6:      	b	0x80004b8 <cortex_m::peripheral::Peripherals::take::{{closure}}::he551919a6030ef31+0x18> @ imm = #-0x2
;                 Some(unsafe { Peripherals::steal() })
 80004b8:      	bl	0x800052e <cortex_m::peripheral::Peripherals::steal::hc961b641cad90cff> @ imm = #0x72
 80004bc:      	movs	r0, #0x1
 80004be:      	strb	r0, [r7, #-6]
;             if unsafe { TAKEN } {
 80004c2:      	b	0x80004cc <cortex_m::peripheral::Peripherals::take::{{closure}}::he551919a6030ef31+0x2c> @ imm = #0x6
 80004c4:      	movs	r0, #0x0
;                 None
 80004c6:      	strb	r0, [r7, #-6]
;             if unsafe { TAKEN } {
 80004ca:      	b	0x80004cc <cortex_m::peripheral::Peripherals::take::{{closure}}::he551919a6030ef31+0x2c> @ imm = #-0x2
;         })
 80004cc:      	ldrb	r0, [r7, #-6]
 80004d0:      	and	r0, r0, #0x1
 80004d4:      	add	sp, #0x8
 80004d6:      	pop	{r7, pc}

080004d8 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h6b0776889d590651>:
;         cortex_m::interrupt::free(|_| {
 80004d8:      	push	{r7, lr}
 80004da:      	mov	r7, sp
 80004dc:      	sub	sp, #0x8
 80004de:      	str	r0, [sp, #0x4]
;             if unsafe { DEVICE_PERIPHERALS } {
 80004e0:      	movw	r0, #0x0
 80004e4:      	movt	r0, #0x2000
 80004e8:      	ldrb	r0, [r0]
 80004ea:      	lsls	r0, r0, #0x1f
 80004ec:      	cbnz	r0, 0x80004fc <stm32f3::stm32f303::Peripherals::take::{{closure}}::h6b0776889d590651+0x24> @ imm = #0xc
 80004ee:      	b	0x80004f0 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h6b0776889d590651+0x18> @ imm = #-0x2
;                 Some(unsafe { Peripherals::steal() })
 80004f0:      	bl	0x800030e <stm32f3::stm32f303::Peripherals::steal::h9eb56b9c9a9b1de8> @ imm = #-0x1e6
 80004f4:      	movs	r0, #0x1
 80004f6:      	strb	r0, [r7, #-6]
;             if unsafe { DEVICE_PERIPHERALS } {
 80004fa:      	b	0x8000504 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h6b0776889d590651+0x2c> @ imm = #0x6
 80004fc:      	movs	r0, #0x0
;                 None
 80004fe:      	strb	r0, [r7, #-6]
;             if unsafe { DEVICE_PERIPHERALS } {
 8000502:      	b	0x8000504 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h6b0776889d590651+0x2c> @ imm = #-0x2
;         })
 8000504:      	ldrb	r0, [r7, #-6]
 8000508:      	and	r0, r0, #0x1
 800050c:      	add	sp, #0x8
 800050e:      	pop	{r7, pc}

08000510 <cortex_m::peripheral::Peripherals::take::hafb6b7fc633bdfa2>:
;     pub fn take() -> Option<Self> {
 8000510:      	push	{r7, lr}
 8000512:      	mov	r7, sp
;         interrupt::free(|_| {
 8000514:      	bl	0x80003a0 <cortex_m::interrupt::free::hc48f3029b93c76dd> @ imm = #-0x178
;     }
 8000518:      	pop	{r7, pc}

0800051a <cortex_m::peripheral::Peripherals::take::hb2466ad778aee6d9>:
;     pub fn take() -> Option<Self> {
 800051a:      	push	{r7, lr}
 800051c:      	mov	r7, sp
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 800051e:      	bl	0x800031c <cortex_m::interrupt::free::h380f88e721e11418> @ imm = #-0x206
;     }
 8000522:      	pop	{r7, pc}

08000524 <cortex_m::peripheral::Peripherals::steal::hbaaf4d98505c8e10>:
;     pub unsafe fn steal() -> Self {
 8000524:      	push	{r7, lr}
 8000526:      	mov	r7, sp
;         cortex_m_0_7::peripheral::Peripherals::steal();
 8000528:      	bl	0x800052e <cortex_m::peripheral::Peripherals::steal::hc961b641cad90cff> @ imm = #0x2
;     }
 800052c:      	pop	{r7, pc}

0800052e <cortex_m::peripheral::Peripherals::steal::hc961b641cad90cff>:
;         TAKEN = true;
 800052e:      	movw	r1, #0x1
 8000532:      	movt	r1, #0x2000
 8000536:      	movs	r0, #0x1
 8000538:      	strb	r0, [r1]
;     }
 800053a:      	bx	lr

0800053c <stm32f3_discovery::leds::Leds::new::h2d0abee0f3dc1587>:
;     pub fn new<PE8Mode, PE9Mode, PE10Mode, PE11Mode, PE12Mode, PE13Mode, PE14Mode, PE15Mode>(
 800053c:      	push	{r4, r5, r6, r7, lr}
 800053e:      	add	r7, sp, #0xc
 8000540:      	str	r11, [sp, #-4]!
 8000544:      	sub	sp, #0x60
 8000546:      	str	r2, [sp, #0x4]
 8000548:      	mov	r2, r1
 800054a:      	ldr	r1, [sp, #0x4]
 800054c:      	str	r2, [sp, #0x8]
 800054e:      	mov	r2, r0
 8000550:      	ldr	r0, [sp, #0x8]
 8000552:      	str	r2, [sp, #0x3c]
 8000554:      	str	r0, [sp, #0x50]
 8000556:      	str	r1, [sp, #0x54]
;             ld3: pe9
 8000558:      	bl	0x800084e <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17he7ab85a0d6c1d16dE> @ imm = #0x2f2
 800055c:      	bl	0x8000f98 <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hea9f04cf0c667d8eE> @ imm = #0xa38
 8000560:      	bl	0x80006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6> @ imm = #0x13e
 8000564:      	ldr	r1, [sp, #0x4]
 8000566:      	mov	r2, r0
;             ld4: pe8
 8000568:      	ldr	r0, [sp, #0x8]
 800056a:      	str	r2, [sp, #0x1c]
 800056c:      	bl	0x8000744 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h32c449d7b178946fE> @ imm = #0x1d4
 8000570:      	bl	0x8000f90 <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17haa43f7db9c097e93E> @ imm = #0xa1c
 8000574:      	bl	0x80006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6> @ imm = #0x12a
 8000578:      	ldr	r1, [sp, #0x4]
 800057a:      	mov	r5, r0
;             ld5: pe10
 800057c:      	ldr	r0, [sp, #0x8]
 800057e:      	bl	0x8000958 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h6303afd7b1b6ae2dE> @ imm = #0x3d6
 8000582:      	bl	0x8000fa0 <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hc0cfcd4cd75c00a3E> @ imm = #0xa1a
 8000586:      	bl	0x80006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6> @ imm = #0x118
 800058a:      	ldr	r1, [sp, #0x4]
 800058c:      	mov	r4, r0
;             ld6: pe15
 800058e:      	ldr	r0, [sp, #0x8]
 8000590:      	bl	0x8000e8a <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h67fe6444d0d76f5bE> @ imm = #0x8f6
 8000594:      	bl	0x8000fc8 <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h8adda58b1689e311E> @ imm = #0xa30
 8000598:      	bl	0x80006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6> @ imm = #0x106
 800059c:      	ldr	r1, [sp, #0x4]
 800059e:      	mov	r2, r0
;             ld7: pe11
 80005a0:      	ldr	r0, [sp, #0x8]
 80005a2:      	str	r2, [sp, #0x18]
 80005a4:      	bl	0x8000a62 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17hf10be0fa4873934aE> @ imm = #0x4ba
 80005a8:      	bl	0x8000fa8 <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h22dc9edc38dc6f97E> @ imm = #0x9fc
 80005ac:      	bl	0x80006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6> @ imm = #0xf2
 80005b0:      	ldr	r1, [sp, #0x4]
 80005b2:      	mov	r2, r0
;             ld8: pe14
 80005b4:      	ldr	r0, [sp, #0x8]
 80005b6:      	str	r2, [sp, #0xc]
 80005b8:      	bl	0x8000d80 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h7dce87edc7b557a7E> @ imm = #0x7c4
 80005bc:      	bl	0x8000fc0 <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hd4b60bbaad6f4262E> @ imm = #0xa00
 80005c0:      	bl	0x80006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6> @ imm = #0xde
 80005c4:      	ldr	r1, [sp, #0x4]
 80005c6:      	mov	r2, r0
;             ld9: pe12
 80005c8:      	ldr	r0, [sp, #0x8]
 80005ca:      	str	r2, [sp, #0x10]
 80005cc:      	bl	0x8000b6c <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hf53e248b7270b927E> @ imm = #0x59c
 80005d0:      	bl	0x8000fb0 <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hfec5325a38d210e3E> @ imm = #0x9dc
 80005d4:      	bl	0x80006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6> @ imm = #0xca
 80005d8:      	ldr	r1, [sp, #0x4]
 80005da:      	mov	r2, r0
;             ld10: pe13
 80005dc:      	ldr	r0, [sp, #0x8]
 80005de:      	str	r2, [sp, #0x14]
 80005e0:      	bl	0x8000c76 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h9ab3e915d3731881E> @ imm = #0x692
 80005e4:      	bl	0x8000fb8 <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hc117bfb2c19fa051E> @ imm = #0x9d0
 80005e8:      	bl	0x80006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6> @ imm = #0xb6
 80005ec:      	ldr.w	r12, [sp, #0xc]
 80005f0:      	ldr	r3, [sp, #0x10]
 80005f2:      	ldr	r2, [sp, #0x14]
 80005f4:      	ldr.w	lr, [sp, #0x18]
 80005f8:      	mov	r1, r0
;         let mut leds = Leds {
 80005fa:      	ldr	r0, [sp, #0x1c]
 80005fc:      	strb.w	r0, [sp, #0x40]
 8000600:      	add	r0, sp, #0x40
 8000602:      	adds	r6, r0, #0x1
 8000604:      	str	r6, [sp, #0x20]
 8000606:      	strb.w	r5, [sp, #0x41]
 800060a:      	adds	r5, r0, #0x2
 800060c:      	str	r5, [sp, #0x24]
 800060e:      	strb.w	r4, [sp, #0x42]
 8000612:      	adds	r4, r0, #0x3
 8000614:      	str	r4, [sp, #0x28]
 8000616:      	strb.w	lr, [sp, #0x43]
 800061a:      	add.w	lr, r0, #0x4
 800061e:      	str.w	lr, [sp, #0x2c]
 8000622:      	strb.w	r12, [sp, #0x44]
 8000626:      	add.w	r12, r0, #0x5
 800062a:      	str.w	r12, [sp, #0x30]
 800062e:      	strb.w	r3, [sp, #0x45]
 8000632:      	adds	r3, r0, #0x6
 8000634:      	str	r3, [sp, #0x34]
 8000636:      	strb.w	r2, [sp, #0x46]
 800063a:      	adds	r2, r0, #0x7
 800063c:      	str	r2, [sp, #0x38]
 800063e:      	strb.w	r1, [sp, #0x47]
;         leds.ld3.off().ok();
 8000642:      	bl	0x8001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec> @ imm = #0x9ce
 8000646:      	bl	0x8001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E> @ imm = #0x9da
;         leds.ld4.off().ok();
 800064a:      	ldr	r0, [sp, #0x20]
 800064c:      	bl	0x8001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec> @ imm = #0x9c4
 8000650:      	bl	0x8001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E> @ imm = #0x9d0
;         leds.ld5.off().ok();
 8000654:      	ldr	r0, [sp, #0x24]
 8000656:      	bl	0x8001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec> @ imm = #0x9ba
 800065a:      	bl	0x8001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E> @ imm = #0x9c6
;         leds.ld6.off().ok();
 800065e:      	ldr	r0, [sp, #0x28]
 8000660:      	bl	0x8001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec> @ imm = #0x9b0
 8000664:      	bl	0x8001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E> @ imm = #0x9bc
;         leds.ld7.off().ok();
 8000668:      	ldr	r0, [sp, #0x2c]
 800066a:      	bl	0x8001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec> @ imm = #0x9a6
 800066e:      	bl	0x8001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E> @ imm = #0x9b2
;         leds.ld8.off().ok();
 8000672:      	ldr	r0, [sp, #0x30]
 8000674:      	bl	0x8001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec> @ imm = #0x99c
 8000678:      	bl	0x8001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E> @ imm = #0x9a8
;         leds.ld9.off().ok();
 800067c:      	ldr	r0, [sp, #0x34]
 800067e:      	bl	0x8001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec> @ imm = #0x992
 8000682:      	bl	0x8001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E> @ imm = #0x99e
;         leds.ld10.off().ok();
 8000686:      	ldr	r0, [sp, #0x38]
 8000688:      	bl	0x8001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec> @ imm = #0x988
 800068c:      	bl	0x8001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E> @ imm = #0x994
 8000690:      	ldr	r1, [sp, #0x3c]
;         leds
 8000692:      	ldr	r0, [sp, #0x40]
 8000694:      	ldr	r2, [sp, #0x44]
 8000696:      	str	r2, [r1, #0x4]
 8000698:      	str	r0, [r1]
;     }
 800069a:      	add	sp, #0x60
 800069c:      	ldr	r11, [sp], #4
 80006a0:      	pop	{r4, r5, r6, r7, pc}

080006a2 <switch_hal::IntoSwitch::into_active_high_switch::hcefd8a6c2bb567c6>:
;     fn into_active_high_switch(self) -> Switch<Self, ActiveHigh>
 80006a2:      	push	{r7, lr}
 80006a4:      	mov	r7, sp
 80006a6:      	sub	sp, #0x8
 80006a8:      	strb	r0, [r7, #-1]
;         self.into_switch::<ActiveHigh>()
 80006ac:      	bl	0x8000fd0 <<T as switch_hal::IntoSwitch>::into_switch::h82a541574b183f47> @ imm = #0x920
;     }
 80006b0:      	add	sp, #0x8
 80006b2:      	pop	{r7, pc}

080006b4 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h2e19764fe8b3a23dE>:
;                         fn set_low(&mut self) -> Result<(), Self::Error> {
 80006b4:      	push	{r7, lr}
 80006b6:      	mov	r7, sp
 80006b8:      	sub	sp, #0x20
 80006ba:      	str	r0, [sp, #0x4]
 80006bc:      	movw	r0, #0x1018
 80006c0:      	movt	r0, #0x4800
 80006c4:      	str	r0, [sp]
 80006c6:      	str	r0, [sp, #0xc]
 80006c8:      	add	r0, sp, #0x4
 80006ca:      	str	r0, [sp, #0x10]
 80006cc:      	movs	r1, #0x0
;         self.register.set(f(&mut W {bits: Self::reset_value(), _reg: marker::PhantomData}).bits);
 80006ce:      	str	r1, [sp, #0x8]
 80006d0:      	add	r1, sp, #0x8
 80006d2:      	bl	0x80006ea <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h8857b01cae0e6762E> @ imm = #0x14
 80006d6:      	mov	r1, r0
 80006d8:      	ldr	r0, [sp]
 80006da:      	ldr	r1, [r1]
 80006dc:      	str	r0, [sp, #0x14]
 80006de:      	str	r1, [sp, #0x18]
 80006e0:      	str	r0, [sp, #0x1c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80006e2:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x157a
;                         }
 80006e6:      	add	sp, #0x20
 80006e8:      	pop	{r7, pc}

080006ea <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h8857b01cae0e6762E>:
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 80006ea:      	push	{r7, lr}
 80006ec:      	mov	r7, sp
 80006ee:      	sub	sp, #0x18
 80006f0:      	str	r1, [sp]
 80006f2:      	str	r0, [sp, #0x8]
 80006f4:      	str	r1, [sp, #0xc]
 80006f6:      	ldr	r0, [sp, #0x8]
 80006f8:      	ldr	r0, [r0]
 80006fa:      	ldrb	r0, [r0]
 80006fc:      	add.w	r1, r0, #0x10
 8000700:      	uxtb	r0, r1
 8000702:      	mov	r2, r1
 8000704:      	str	r2, [sp, #0x4]
 8000706:      	cmp	r0, r1
 8000708:      	bne	0x8000716 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h8857b01cae0e6762E+0x2c> @ imm = #0xa
 800070a:      	b	0x800070c <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h8857b01cae0e6762E+0x22> @ imm = #-0x2
 800070c:      	ldr	r0, [sp, #0x4]
 800070e:      	uxtb	r0, r0
 8000710:      	cmp	r0, #0x20
 8000712:      	blo	0x8000722 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h8857b01cae0e6762E+0x38> @ imm = #0xc
 8000714:      	b	0x8000738 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h8857b01cae0e6762E+0x4e> @ imm = #0x20
 8000716:      	movw	r0, #0x335c
 800071a:      	movt	r0, #0x800
 800071e:      	bl	0x8002fe0 <core::panicking::panic_const::panic_const_add_overflow::he3d7b2ec77b797ca> @ imm = #0x28be
 8000722:      	ldr	r0, [sp]
 8000724:      	ldr	r1, [sp, #0x4]
 8000726:      	and	r2, r1, #0x1f
 800072a:      	movs	r1, #0x1
 800072c:      	lsls	r1, r2
 800072e:      	str	r0, [sp, #0x10]
 8000730:      	str	r1, [sp, #0x14]
;         self.bits = bits;
 8000732:      	str	r1, [r0]
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000734:      	add	sp, #0x18
 8000736:      	pop	{r7, pc}
 8000738:      	movw	r0, #0x335c
 800073c:      	movt	r0, #0x800
 8000740:      	bl	0x800302c <core::panicking::panic_const::panic_const_shl_overflow::hb001c80bfcce0420> @ imm = #0x28e8

08000744 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h32c449d7b178946fE>:
;                             pub fn into_push_pull_output(
 8000744:      	push	{r7, lr}
 8000746:      	mov	r7, sp
 8000748:      	sub	sp, #0x68
 800074a:      	str	r1, [sp, #0x8]
 800074c:      	str	r0, [sp, #0x14]
 800074e:      	str	r1, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000750:      	bl	0x80010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45> @ imm = #0x950
 8000754:      	str	r0, [sp, #0x4]
 8000756:      	str	r0, [sp, #0x4c]
 8000758:      	str	r0, [sp, #0x54]
 800075a:      	str	r0, [sp, #0x58]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800075c:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x141e
;         let bits = self.register.get();
 8000760:      	str	r0, [sp, #0x50]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000762:      	str	r0, [sp, #0x44]
 8000764:      	str	r0, [sp, #0x48]
 8000766:      	add	r0, sp, #0x44
 8000768:      	add	r1, sp, #0x48
 800076a:      	bl	0x80007b2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3ac1e93a612e80bbE> @ imm = #0x44
 800076e:      	mov	r1, r0
 8000770:      	ldr	r0, [sp, #0x4]
 8000772:      	ldr	r1, [r1]
 8000774:      	str	r0, [sp, #0x5c]
 8000776:      	str	r1, [sp, #0x60]
 8000778:      	str	r0, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800077a:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x14e2
 800077e:      	ldr	r0, [sp, #0x8]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000780:      	bl	0x80010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f> @ imm = #0x930
 8000784:      	str	r0, [sp, #0xc]
 8000786:      	str	r0, [sp, #0x28]
 8000788:      	str	r0, [sp, #0x30]
 800078a:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800078c:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x13ee
;         let bits = self.register.get();
 8000790:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000792:      	str	r0, [sp, #0x20]
 8000794:      	str	r0, [sp, #0x24]
 8000796:      	add	r0, sp, #0x20
 8000798:      	add	r1, sp, #0x24
 800079a:      	bl	0x8000800 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha09ad8923fb7cfd7E> @ imm = #0x62
 800079e:      	mov	r1, r0
 80007a0:      	ldr	r0, [sp, #0xc]
 80007a2:      	ldr	r1, [r1]
 80007a4:      	str	r0, [sp, #0x38]
 80007a6:      	str	r1, [sp, #0x3c]
 80007a8:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80007aa:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x14b2
;                             }
 80007ae:      	add	sp, #0x68
 80007b0:      	pop	{r7, pc}

080007b2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3ac1e93a612e80bbE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80007b2:      	push	{r7, lr}
 80007b4:      	mov	r7, sp
 80007b6:      	sub	sp, #0x30
 80007b8:      	str	r1, [sp, #0x4]
 80007ba:      	str	r0, [sp, #0xc]
 80007bc:      	str	r1, [sp, #0x10]
 80007be:      	str	r1, [sp, #0x14]
 80007c0:      	str	r1, [sp, #0x1c]
 80007c2:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80007c4:      	strb	r0, [r7, #-21]
 80007c8:      	ldrb	r0, [r7, #-21]
 80007cc:      	str	r1, [sp, #0x20]
 80007ce:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 80007d2:      	movw	r1, #0x33e0
 80007d6:      	movt	r1, #0x800
 80007da:      	bl	0x8000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566> @ imm = #0x804
 80007de:      	ldr	r1, [sp, #0x4]
 80007e0:      	mov	r2, r0
 80007e2:      	str	r1, [sp, #0x28]
 80007e4:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80007e8:      	ldr	r1, [sp, #0x28]
 80007ea:      	ldr	r0, [r1]
 80007ec:      	bic	r0, r0, #0x30000
 80007f0:      	and	r2, r2, #0x3
 80007f4:      	orr.w	r0, r0, r2, lsl #16
 80007f8:      	str	r0, [r1]
;         self.w
 80007fa:      	ldr	r0, [sp, #0x28]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80007fc:      	add	sp, #0x30
 80007fe:      	pop	{r7, pc}

08000800 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha09ad8923fb7cfd7E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000800:      	push	{r7, lr}
 8000802:      	mov	r7, sp
 8000804:      	sub	sp, #0x30
 8000806:      	str	r1, [sp, #0x4]
 8000808:      	str	r0, [sp, #0xc]
 800080a:      	str	r1, [sp, #0x10]
 800080c:      	str	r1, [sp, #0x14]
 800080e:      	str	r1, [sp, #0x1c]
 8000810:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000812:      	strb	r0, [r7, #-21]
 8000816:      	ldrb	r0, [r7, #-21]
 800081a:      	str	r1, [sp, #0x20]
 800081c:      	and	r0, r0, #0x1
 8000820:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000824:      	movw	r1, #0x34d4
 8000828:      	movt	r1, #0x800
 800082c:      	bl	0x8000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298> @ imm = #0x7c4
 8000830:      	ldr	r1, [sp, #0x4]
 8000832:      	mov	r2, r0
 8000834:      	str	r1, [sp, #0x28]
 8000836:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 800083a:      	ldr	r1, [sp, #0x28]
 800083c:      	ldr	r0, [r1]
 800083e:      	bic	r0, r0, #0x100
 8000842:      	orr.w	r0, r0, r2, lsl #8
 8000846:      	str	r0, [r1]
;         self.w
 8000848:      	ldr	r0, [sp, #0x28]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800084a:      	add	sp, #0x30
 800084c:      	pop	{r7, pc}

0800084e <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17he7ab85a0d6c1d16dE>:
;                             pub fn into_push_pull_output(
 800084e:      	push	{r7, lr}
 8000850:      	mov	r7, sp
 8000852:      	sub	sp, #0x68
 8000854:      	str	r1, [sp, #0x8]
 8000856:      	str	r0, [sp, #0x14]
 8000858:      	str	r1, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800085a:      	bl	0x80010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45> @ imm = #0x846
 800085e:      	str	r0, [sp, #0x4]
 8000860:      	str	r0, [sp, #0x4c]
 8000862:      	str	r0, [sp, #0x54]
 8000864:      	str	r0, [sp, #0x58]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000866:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x1314
;         let bits = self.register.get();
 800086a:      	str	r0, [sp, #0x50]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800086c:      	str	r0, [sp, #0x44]
 800086e:      	str	r0, [sp, #0x48]
 8000870:      	add	r0, sp, #0x44
 8000872:      	add	r1, sp, #0x48
 8000874:      	bl	0x80008bc <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h03fcb4bf5ae3573bE> @ imm = #0x44
 8000878:      	mov	r1, r0
 800087a:      	ldr	r0, [sp, #0x4]
 800087c:      	ldr	r1, [r1]
 800087e:      	str	r0, [sp, #0x5c]
 8000880:      	str	r1, [sp, #0x60]
 8000882:      	str	r0, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000884:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x13d8
 8000888:      	ldr	r0, [sp, #0x8]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800088a:      	bl	0x80010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f> @ imm = #0x826
 800088e:      	str	r0, [sp, #0xc]
 8000890:      	str	r0, [sp, #0x28]
 8000892:      	str	r0, [sp, #0x30]
 8000894:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000896:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x12e4
;         let bits = self.register.get();
 800089a:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800089c:      	str	r0, [sp, #0x20]
 800089e:      	str	r0, [sp, #0x24]
 80008a0:      	add	r0, sp, #0x20
 80008a2:      	add	r1, sp, #0x24
 80008a4:      	bl	0x800090a <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf758d82f890e75efE> @ imm = #0x62
 80008a8:      	mov	r1, r0
 80008aa:      	ldr	r0, [sp, #0xc]
 80008ac:      	ldr	r1, [r1]
 80008ae:      	str	r0, [sp, #0x38]
 80008b0:      	str	r1, [sp, #0x3c]
 80008b2:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80008b4:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x13a8
;                             }
 80008b8:      	add	sp, #0x68
 80008ba:      	pop	{r7, pc}

080008bc <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h03fcb4bf5ae3573bE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008bc:      	push	{r7, lr}
 80008be:      	mov	r7, sp
 80008c0:      	sub	sp, #0x30
 80008c2:      	str	r1, [sp, #0x4]
 80008c4:      	str	r0, [sp, #0xc]
 80008c6:      	str	r1, [sp, #0x10]
 80008c8:      	str	r1, [sp, #0x14]
 80008ca:      	str	r1, [sp, #0x1c]
 80008cc:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80008ce:      	strb	r0, [r7, #-21]
 80008d2:      	ldrb	r0, [r7, #-21]
 80008d6:      	str	r1, [sp, #0x20]
 80008d8:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 80008dc:      	movw	r1, #0x33f0
 80008e0:      	movt	r1, #0x800
 80008e4:      	bl	0x8000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566> @ imm = #0x6fa
 80008e8:      	ldr	r1, [sp, #0x4]
 80008ea:      	mov	r2, r0
 80008ec:      	str	r1, [sp, #0x28]
 80008ee:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 80008f2:      	ldr	r1, [sp, #0x28]
 80008f4:      	ldr	r0, [r1]
 80008f6:      	bic	r0, r0, #0xc0000
 80008fa:      	and	r2, r2, #0x3
 80008fe:      	orr.w	r0, r0, r2, lsl #18
 8000902:      	str	r0, [r1]
;         self.w
 8000904:      	ldr	r0, [sp, #0x28]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000906:      	add	sp, #0x30
 8000908:      	pop	{r7, pc}

0800090a <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf758d82f890e75efE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800090a:      	push	{r7, lr}
 800090c:      	mov	r7, sp
 800090e:      	sub	sp, #0x30
 8000910:      	str	r1, [sp, #0x4]
 8000912:      	str	r0, [sp, #0xc]
 8000914:      	str	r1, [sp, #0x10]
 8000916:      	str	r1, [sp, #0x14]
 8000918:      	str	r1, [sp, #0x1c]
 800091a:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 800091c:      	strb	r0, [r7, #-21]
 8000920:      	ldrb	r0, [r7, #-21]
 8000924:      	str	r1, [sp, #0x20]
 8000926:      	and	r0, r0, #0x1
 800092a:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 800092e:      	movw	r1, #0x34e4
 8000932:      	movt	r1, #0x800
 8000936:      	bl	0x8000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298> @ imm = #0x6ba
 800093a:      	ldr	r1, [sp, #0x4]
 800093c:      	mov	r2, r0
 800093e:      	str	r1, [sp, #0x28]
 8000940:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 8000944:      	ldr	r1, [sp, #0x28]
 8000946:      	ldr	r0, [r1]
 8000948:      	bic	r0, r0, #0x200
 800094c:      	orr.w	r0, r0, r2, lsl #9
 8000950:      	str	r0, [r1]
;         self.w
 8000952:      	ldr	r0, [sp, #0x28]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000954:      	add	sp, #0x30
 8000956:      	pop	{r7, pc}

08000958 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h6303afd7b1b6ae2dE>:
;                             pub fn into_push_pull_output(
 8000958:      	push	{r7, lr}
 800095a:      	mov	r7, sp
 800095c:      	sub	sp, #0x68
 800095e:      	str	r1, [sp, #0x8]
 8000960:      	str	r0, [sp, #0x14]
 8000962:      	str	r1, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000964:      	bl	0x80010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45> @ imm = #0x73c
 8000968:      	str	r0, [sp, #0x4]
 800096a:      	str	r0, [sp, #0x4c]
 800096c:      	str	r0, [sp, #0x54]
 800096e:      	str	r0, [sp, #0x58]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000970:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x120a
;         let bits = self.register.get();
 8000974:      	str	r0, [sp, #0x50]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000976:      	str	r0, [sp, #0x44]
 8000978:      	str	r0, [sp, #0x48]
 800097a:      	add	r0, sp, #0x44
 800097c:      	add	r1, sp, #0x48
 800097e:      	bl	0x80009c6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h30c327145eda841aE> @ imm = #0x44
 8000982:      	mov	r1, r0
 8000984:      	ldr	r0, [sp, #0x4]
 8000986:      	ldr	r1, [r1]
 8000988:      	str	r0, [sp, #0x5c]
 800098a:      	str	r1, [sp, #0x60]
 800098c:      	str	r0, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800098e:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x12ce
 8000992:      	ldr	r0, [sp, #0x8]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000994:      	bl	0x80010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f> @ imm = #0x71c
 8000998:      	str	r0, [sp, #0xc]
 800099a:      	str	r0, [sp, #0x28]
 800099c:      	str	r0, [sp, #0x30]
 800099e:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80009a0:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x11da
;         let bits = self.register.get();
 80009a4:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80009a6:      	str	r0, [sp, #0x20]
 80009a8:      	str	r0, [sp, #0x24]
 80009aa:      	add	r0, sp, #0x20
 80009ac:      	add	r1, sp, #0x24
 80009ae:      	bl	0x8000a14 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h4601be57394f9727E> @ imm = #0x62
 80009b2:      	mov	r1, r0
 80009b4:      	ldr	r0, [sp, #0xc]
 80009b6:      	ldr	r1, [r1]
 80009b8:      	str	r0, [sp, #0x38]
 80009ba:      	str	r1, [sp, #0x3c]
 80009bc:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80009be:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x129e
;                             }
 80009c2:      	add	sp, #0x68
 80009c4:      	pop	{r7, pc}

080009c6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h30c327145eda841aE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009c6:      	push	{r7, lr}
 80009c8:      	mov	r7, sp
 80009ca:      	sub	sp, #0x30
 80009cc:      	str	r1, [sp, #0x4]
 80009ce:      	str	r0, [sp, #0xc]
 80009d0:      	str	r1, [sp, #0x10]
 80009d2:      	str	r1, [sp, #0x14]
 80009d4:      	str	r1, [sp, #0x1c]
 80009d6:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80009d8:      	strb	r0, [r7, #-21]
 80009dc:      	ldrb	r0, [r7, #-21]
 80009e0:      	str	r1, [sp, #0x20]
 80009e2:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 80009e6:      	movw	r1, #0x3400
 80009ea:      	movt	r1, #0x800
 80009ee:      	bl	0x8000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566> @ imm = #0x5f0
 80009f2:      	ldr	r1, [sp, #0x4]
 80009f4:      	mov	r2, r0
 80009f6:      	str	r1, [sp, #0x28]
 80009f8:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 80009fc:      	ldr	r1, [sp, #0x28]
 80009fe:      	ldr	r0, [r1]
 8000a00:      	bic	r0, r0, #0x300000
 8000a04:      	and	r2, r2, #0x3
 8000a08:      	orr.w	r0, r0, r2, lsl #20
 8000a0c:      	str	r0, [r1]
;         self.w
 8000a0e:      	ldr	r0, [sp, #0x28]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a10:      	add	sp, #0x30
 8000a12:      	pop	{r7, pc}

08000a14 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h4601be57394f9727E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a14:      	push	{r7, lr}
 8000a16:      	mov	r7, sp
 8000a18:      	sub	sp, #0x30
 8000a1a:      	str	r1, [sp, #0x4]
 8000a1c:      	str	r0, [sp, #0xc]
 8000a1e:      	str	r1, [sp, #0x10]
 8000a20:      	str	r1, [sp, #0x14]
 8000a22:      	str	r1, [sp, #0x1c]
 8000a24:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000a26:      	strb	r0, [r7, #-21]
 8000a2a:      	ldrb	r0, [r7, #-21]
 8000a2e:      	str	r1, [sp, #0x20]
 8000a30:      	and	r0, r0, #0x1
 8000a34:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000a38:      	movw	r1, #0x34f4
 8000a3c:      	movt	r1, #0x800
 8000a40:      	bl	0x8000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298> @ imm = #0x5b0
 8000a44:      	ldr	r1, [sp, #0x4]
 8000a46:      	mov	r2, r0
 8000a48:      	str	r1, [sp, #0x28]
 8000a4a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 8000a4e:      	ldr	r1, [sp, #0x28]
 8000a50:      	ldr	r0, [r1]
 8000a52:      	bic	r0, r0, #0x400
 8000a56:      	orr.w	r0, r0, r2, lsl #10
 8000a5a:      	str	r0, [r1]
;         self.w
 8000a5c:      	ldr	r0, [sp, #0x28]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a5e:      	add	sp, #0x30
 8000a60:      	pop	{r7, pc}

08000a62 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17hf10be0fa4873934aE>:
;                             pub fn into_push_pull_output(
 8000a62:      	push	{r7, lr}
 8000a64:      	mov	r7, sp
 8000a66:      	sub	sp, #0x68
 8000a68:      	str	r1, [sp, #0x8]
 8000a6a:      	str	r0, [sp, #0x14]
 8000a6c:      	str	r1, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a6e:      	bl	0x80010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45> @ imm = #0x632
 8000a72:      	str	r0, [sp, #0x4]
 8000a74:      	str	r0, [sp, #0x4c]
 8000a76:      	str	r0, [sp, #0x54]
 8000a78:      	str	r0, [sp, #0x58]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a7a:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x1100
;         let bits = self.register.get();
 8000a7e:      	str	r0, [sp, #0x50]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000a80:      	str	r0, [sp, #0x44]
 8000a82:      	str	r0, [sp, #0x48]
 8000a84:      	add	r0, sp, #0x44
 8000a86:      	add	r1, sp, #0x48
 8000a88:      	bl	0x8000ad0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h126dd573524c2a8dE> @ imm = #0x44
 8000a8c:      	mov	r1, r0
 8000a8e:      	ldr	r0, [sp, #0x4]
 8000a90:      	ldr	r1, [r1]
 8000a92:      	str	r0, [sp, #0x5c]
 8000a94:      	str	r1, [sp, #0x60]
 8000a96:      	str	r0, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000a98:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x11c4
 8000a9c:      	ldr	r0, [sp, #0x8]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a9e:      	bl	0x80010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f> @ imm = #0x612
 8000aa2:      	str	r0, [sp, #0xc]
 8000aa4:      	str	r0, [sp, #0x28]
 8000aa6:      	str	r0, [sp, #0x30]
 8000aa8:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000aaa:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x10d0
;         let bits = self.register.get();
 8000aae:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ab0:      	str	r0, [sp, #0x20]
 8000ab2:      	str	r0, [sp, #0x24]
 8000ab4:      	add	r0, sp, #0x20
 8000ab6:      	add	r1, sp, #0x24
 8000ab8:      	bl	0x8000b1e <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdd152c1d36f8696dE> @ imm = #0x62
 8000abc:      	mov	r1, r0
 8000abe:      	ldr	r0, [sp, #0xc]
 8000ac0:      	ldr	r1, [r1]
 8000ac2:      	str	r0, [sp, #0x38]
 8000ac4:      	str	r1, [sp, #0x3c]
 8000ac6:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000ac8:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x1194
;                             }
 8000acc:      	add	sp, #0x68
 8000ace:      	pop	{r7, pc}

08000ad0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h126dd573524c2a8dE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ad0:      	push	{r7, lr}
 8000ad2:      	mov	r7, sp
 8000ad4:      	sub	sp, #0x30
 8000ad6:      	str	r1, [sp, #0x4]
 8000ad8:      	str	r0, [sp, #0xc]
 8000ada:      	str	r1, [sp, #0x10]
 8000adc:      	str	r1, [sp, #0x14]
 8000ade:      	str	r1, [sp, #0x1c]
 8000ae0:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000ae2:      	strb	r0, [r7, #-21]
 8000ae6:      	ldrb	r0, [r7, #-21]
 8000aea:      	str	r1, [sp, #0x20]
 8000aec:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000af0:      	movw	r1, #0x3410
 8000af4:      	movt	r1, #0x800
 8000af8:      	bl	0x8000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566> @ imm = #0x4e6
 8000afc:      	ldr	r1, [sp, #0x4]
 8000afe:      	mov	r2, r0
 8000b00:      	str	r1, [sp, #0x28]
 8000b02:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000b06:      	ldr	r1, [sp, #0x28]
 8000b08:      	ldr	r0, [r1]
 8000b0a:      	bic	r0, r0, #0xc00000
 8000b0e:      	and	r2, r2, #0x3
 8000b12:      	orr.w	r0, r0, r2, lsl #22
 8000b16:      	str	r0, [r1]
;         self.w
 8000b18:      	ldr	r0, [sp, #0x28]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b1a:      	add	sp, #0x30
 8000b1c:      	pop	{r7, pc}

08000b1e <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdd152c1d36f8696dE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b1e:      	push	{r7, lr}
 8000b20:      	mov	r7, sp
 8000b22:      	sub	sp, #0x30
 8000b24:      	str	r1, [sp, #0x4]
 8000b26:      	str	r0, [sp, #0xc]
 8000b28:      	str	r1, [sp, #0x10]
 8000b2a:      	str	r1, [sp, #0x14]
 8000b2c:      	str	r1, [sp, #0x1c]
 8000b2e:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000b30:      	strb	r0, [r7, #-21]
 8000b34:      	ldrb	r0, [r7, #-21]
 8000b38:      	str	r1, [sp, #0x20]
 8000b3a:      	and	r0, r0, #0x1
 8000b3e:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000b42:      	movw	r1, #0x3504
 8000b46:      	movt	r1, #0x800
 8000b4a:      	bl	0x8000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298> @ imm = #0x4a6
 8000b4e:      	ldr	r1, [sp, #0x4]
 8000b50:      	mov	r2, r0
 8000b52:      	str	r1, [sp, #0x28]
 8000b54:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000b58:      	ldr	r1, [sp, #0x28]
 8000b5a:      	ldr	r0, [r1]
 8000b5c:      	bic	r0, r0, #0x800
 8000b60:      	orr.w	r0, r0, r2, lsl #11
 8000b64:      	str	r0, [r1]
;         self.w
 8000b66:      	ldr	r0, [sp, #0x28]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b68:      	add	sp, #0x30
 8000b6a:      	pop	{r7, pc}

08000b6c <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hf53e248b7270b927E>:
;                             pub fn into_push_pull_output(
 8000b6c:      	push	{r7, lr}
 8000b6e:      	mov	r7, sp
 8000b70:      	sub	sp, #0x68
 8000b72:      	str	r1, [sp, #0x8]
 8000b74:      	str	r0, [sp, #0x14]
 8000b76:      	str	r1, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b78:      	bl	0x80010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45> @ imm = #0x528
 8000b7c:      	str	r0, [sp, #0x4]
 8000b7e:      	str	r0, [sp, #0x28]
 8000b80:      	str	r0, [sp, #0x30]
 8000b82:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000b84:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0xff6
;         let bits = self.register.get();
 8000b88:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000b8a:      	str	r0, [sp, #0x20]
 8000b8c:      	str	r0, [sp, #0x24]
 8000b8e:      	add	r0, sp, #0x20
 8000b90:      	add	r1, sp, #0x24
 8000b92:      	bl	0x8000bda <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h288594150a52cae7E> @ imm = #0x44
 8000b96:      	mov	r1, r0
 8000b98:      	ldr	r0, [sp, #0x4]
 8000b9a:      	ldr	r1, [r1]
 8000b9c:      	str	r0, [sp, #0x38]
 8000b9e:      	str	r1, [sp, #0x3c]
 8000ba0:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000ba2:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x10ba
 8000ba6:      	ldr	r0, [sp, #0x8]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ba8:      	bl	0x80010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f> @ imm = #0x508
 8000bac:      	str	r0, [sp, #0xc]
 8000bae:      	str	r0, [sp, #0x4c]
 8000bb0:      	str	r0, [sp, #0x54]
 8000bb2:      	str	r0, [sp, #0x58]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000bb4:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0xfc6
;         let bits = self.register.get();
 8000bb8:      	str	r0, [sp, #0x50]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000bba:      	str	r0, [sp, #0x44]
 8000bbc:      	str	r0, [sp, #0x48]
 8000bbe:      	add	r0, sp, #0x44
 8000bc0:      	add	r1, sp, #0x48
 8000bc2:      	bl	0x8000c28 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2d390578568d36e9E> @ imm = #0x62
 8000bc6:      	mov	r1, r0
 8000bc8:      	ldr	r0, [sp, #0xc]
 8000bca:      	ldr	r1, [r1]
 8000bcc:      	str	r0, [sp, #0x5c]
 8000bce:      	str	r1, [sp, #0x60]
 8000bd0:      	str	r0, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000bd2:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0x108a
;                             }
 8000bd6:      	add	sp, #0x68
 8000bd8:      	pop	{r7, pc}

08000bda <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h288594150a52cae7E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000bda:      	push	{r7, lr}
 8000bdc:      	mov	r7, sp
 8000bde:      	sub	sp, #0x30
 8000be0:      	str	r1, [sp, #0x4]
 8000be2:      	str	r0, [sp, #0xc]
 8000be4:      	str	r1, [sp, #0x10]
 8000be6:      	str	r1, [sp, #0x14]
 8000be8:      	str	r1, [sp, #0x1c]
 8000bea:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000bec:      	strb	r0, [r7, #-21]
 8000bf0:      	ldrb	r0, [r7, #-21]
 8000bf4:      	str	r1, [sp, #0x20]
 8000bf6:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000bfa:      	movw	r1, #0x3420
 8000bfe:      	movt	r1, #0x800
 8000c02:      	bl	0x8000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566> @ imm = #0x3dc
 8000c06:      	ldr	r1, [sp, #0x4]
 8000c08:      	mov	r2, r0
 8000c0a:      	str	r1, [sp, #0x28]
 8000c0c:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000c10:      	ldr	r1, [sp, #0x28]
 8000c12:      	ldr	r0, [r1]
 8000c14:      	bic	r0, r0, #0x3000000
 8000c18:      	and	r2, r2, #0x3
 8000c1c:      	orr.w	r0, r0, r2, lsl #24
 8000c20:      	str	r0, [r1]
;         self.w
 8000c22:      	ldr	r0, [sp, #0x28]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c24:      	add	sp, #0x30
 8000c26:      	pop	{r7, pc}

08000c28 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2d390578568d36e9E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c28:      	push	{r7, lr}
 8000c2a:      	mov	r7, sp
 8000c2c:      	sub	sp, #0x30
 8000c2e:      	str	r1, [sp, #0x4]
 8000c30:      	str	r0, [sp, #0xc]
 8000c32:      	str	r1, [sp, #0x10]
 8000c34:      	str	r1, [sp, #0x14]
 8000c36:      	str	r1, [sp, #0x1c]
 8000c38:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000c3a:      	strb	r0, [r7, #-21]
 8000c3e:      	ldrb	r0, [r7, #-21]
 8000c42:      	str	r1, [sp, #0x20]
 8000c44:      	and	r0, r0, #0x1
 8000c48:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000c4c:      	movw	r1, #0x3514
 8000c50:      	movt	r1, #0x800
 8000c54:      	bl	0x8000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298> @ imm = #0x39c
 8000c58:      	ldr	r1, [sp, #0x4]
 8000c5a:      	mov	r2, r0
 8000c5c:      	str	r1, [sp, #0x28]
 8000c5e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000c62:      	ldr	r1, [sp, #0x28]
 8000c64:      	ldr	r0, [r1]
 8000c66:      	bic	r0, r0, #0x1000
 8000c6a:      	orr.w	r0, r0, r2, lsl #12
 8000c6e:      	str	r0, [r1]
;         self.w
 8000c70:      	ldr	r0, [sp, #0x28]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c72:      	add	sp, #0x30
 8000c74:      	pop	{r7, pc}

08000c76 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h9ab3e915d3731881E>:
;                             pub fn into_push_pull_output(
 8000c76:      	push	{r7, lr}
 8000c78:      	mov	r7, sp
 8000c7a:      	sub	sp, #0x68
 8000c7c:      	str	r1, [sp, #0x8]
 8000c7e:      	str	r0, [sp, #0x14]
 8000c80:      	str	r1, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c82:      	bl	0x80010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45> @ imm = #0x41e
 8000c86:      	str	r0, [sp, #0x4]
 8000c88:      	str	r0, [sp, #0x28]
 8000c8a:      	str	r0, [sp, #0x30]
 8000c8c:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000c8e:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0xeec
;         let bits = self.register.get();
 8000c92:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000c94:      	str	r0, [sp, #0x20]
 8000c96:      	str	r0, [sp, #0x24]
 8000c98:      	add	r0, sp, #0x20
 8000c9a:      	add	r1, sp, #0x24
 8000c9c:      	bl	0x8000d32 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hed61933c2bb59922E> @ imm = #0x92
 8000ca0:      	mov	r1, r0
 8000ca2:      	ldr	r0, [sp, #0x4]
 8000ca4:      	ldr	r1, [r1]
 8000ca6:      	str	r0, [sp, #0x38]
 8000ca8:      	str	r1, [sp, #0x3c]
 8000caa:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000cac:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xfb0
 8000cb0:      	ldr	r0, [sp, #0x8]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000cb2:      	bl	0x80010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f> @ imm = #0x3fe
 8000cb6:      	str	r0, [sp, #0xc]
 8000cb8:      	str	r0, [sp, #0x4c]
 8000cba:      	str	r0, [sp, #0x54]
 8000cbc:      	str	r0, [sp, #0x58]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000cbe:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0xebc
;         let bits = self.register.get();
 8000cc2:      	str	r0, [sp, #0x50]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000cc4:      	str	r0, [sp, #0x44]
 8000cc6:      	str	r0, [sp, #0x48]
 8000cc8:      	add	r0, sp, #0x44
 8000cca:      	add	r1, sp, #0x48
 8000ccc:      	bl	0x8000ce4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hce35a4e2307eb98bE> @ imm = #0x14
 8000cd0:      	mov	r1, r0
 8000cd2:      	ldr	r0, [sp, #0xc]
 8000cd4:      	ldr	r1, [r1]
 8000cd6:      	str	r0, [sp, #0x5c]
 8000cd8:      	str	r1, [sp, #0x60]
 8000cda:      	str	r0, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000cdc:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xf80
;                             }
 8000ce0:      	add	sp, #0x68
 8000ce2:      	pop	{r7, pc}

08000ce4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hce35a4e2307eb98bE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ce4:      	push	{r7, lr}
 8000ce6:      	mov	r7, sp
 8000ce8:      	sub	sp, #0x30
 8000cea:      	str	r1, [sp, #0x4]
 8000cec:      	str	r0, [sp, #0xc]
 8000cee:      	str	r1, [sp, #0x10]
 8000cf0:      	str	r1, [sp, #0x14]
 8000cf2:      	str	r1, [sp, #0x1c]
 8000cf4:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000cf6:      	strb	r0, [r7, #-21]
 8000cfa:      	ldrb	r0, [r7, #-21]
 8000cfe:      	str	r1, [sp, #0x20]
 8000d00:      	and	r0, r0, #0x1
 8000d04:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000d08:      	movw	r1, #0x3524
 8000d0c:      	movt	r1, #0x800
 8000d10:      	bl	0x8000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298> @ imm = #0x2e0
 8000d14:      	ldr	r1, [sp, #0x4]
 8000d16:      	mov	r2, r0
 8000d18:      	str	r1, [sp, #0x28]
 8000d1a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000d1e:      	ldr	r1, [sp, #0x28]
 8000d20:      	ldr	r0, [r1]
 8000d22:      	bic	r0, r0, #0x2000
 8000d26:      	orr.w	r0, r0, r2, lsl #13
 8000d2a:      	str	r0, [r1]
;         self.w
 8000d2c:      	ldr	r0, [sp, #0x28]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d2e:      	add	sp, #0x30
 8000d30:      	pop	{r7, pc}

08000d32 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hed61933c2bb59922E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d32:      	push	{r7, lr}
 8000d34:      	mov	r7, sp
 8000d36:      	sub	sp, #0x30
 8000d38:      	str	r1, [sp, #0x4]
 8000d3a:      	str	r0, [sp, #0xc]
 8000d3c:      	str	r1, [sp, #0x10]
 8000d3e:      	str	r1, [sp, #0x14]
 8000d40:      	str	r1, [sp, #0x1c]
 8000d42:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000d44:      	strb	r0, [r7, #-21]
 8000d48:      	ldrb	r0, [r7, #-21]
 8000d4c:      	str	r1, [sp, #0x20]
 8000d4e:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000d52:      	movw	r1, #0x3430
 8000d56:      	movt	r1, #0x800
 8000d5a:      	bl	0x8000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566> @ imm = #0x284
 8000d5e:      	ldr	r1, [sp, #0x4]
 8000d60:      	mov	r2, r0
 8000d62:      	str	r1, [sp, #0x28]
 8000d64:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 8000d68:      	ldr	r1, [sp, #0x28]
 8000d6a:      	ldr	r0, [r1]
 8000d6c:      	bic	r0, r0, #0xc000000
 8000d70:      	and	r2, r2, #0x3
 8000d74:      	orr.w	r0, r0, r2, lsl #26
 8000d78:      	str	r0, [r1]
;         self.w
 8000d7a:      	ldr	r0, [sp, #0x28]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d7c:      	add	sp, #0x30
 8000d7e:      	pop	{r7, pc}

08000d80 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h7dce87edc7b557a7E>:
;                             pub fn into_push_pull_output(
 8000d80:      	push	{r7, lr}
 8000d82:      	mov	r7, sp
 8000d84:      	sub	sp, #0x68
 8000d86:      	str	r1, [sp, #0x8]
 8000d88:      	str	r0, [sp, #0x14]
 8000d8a:      	str	r1, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d8c:      	bl	0x80010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45> @ imm = #0x314
 8000d90:      	str	r0, [sp, #0x4]
 8000d92:      	str	r0, [sp, #0x4c]
 8000d94:      	str	r0, [sp, #0x54]
 8000d96:      	str	r0, [sp, #0x58]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000d98:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0xde2
;         let bits = self.register.get();
 8000d9c:      	str	r0, [sp, #0x50]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000d9e:      	str	r0, [sp, #0x44]
 8000da0:      	str	r0, [sp, #0x48]
 8000da2:      	add	r0, sp, #0x44
 8000da4:      	add	r1, sp, #0x48
 8000da6:      	bl	0x8000e3c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd170cffe9dba0fa3E> @ imm = #0x92
 8000daa:      	mov	r1, r0
 8000dac:      	ldr	r0, [sp, #0x4]
 8000dae:      	ldr	r1, [r1]
 8000db0:      	str	r0, [sp, #0x5c]
 8000db2:      	str	r1, [sp, #0x60]
 8000db4:      	str	r0, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000db6:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xea6
 8000dba:      	ldr	r0, [sp, #0x8]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000dbc:      	bl	0x80010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f> @ imm = #0x2f4
 8000dc0:      	str	r0, [sp, #0xc]
 8000dc2:      	str	r0, [sp, #0x28]
 8000dc4:      	str	r0, [sp, #0x30]
 8000dc6:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000dc8:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0xdb2
;         let bits = self.register.get();
 8000dcc:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000dce:      	str	r0, [sp, #0x20]
 8000dd0:      	str	r0, [sp, #0x24]
 8000dd2:      	add	r0, sp, #0x20
 8000dd4:      	add	r1, sp, #0x24
 8000dd6:      	bl	0x8000dee <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h45f336fa8a5b78d3E> @ imm = #0x14
 8000dda:      	mov	r1, r0
 8000ddc:      	ldr	r0, [sp, #0xc]
 8000dde:      	ldr	r1, [r1]
 8000de0:      	str	r0, [sp, #0x38]
 8000de2:      	str	r1, [sp, #0x3c]
 8000de4:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000de6:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xe76
;                             }
 8000dea:      	add	sp, #0x68
 8000dec:      	pop	{r7, pc}

08000dee <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h45f336fa8a5b78d3E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000dee:      	push	{r7, lr}
 8000df0:      	mov	r7, sp
 8000df2:      	sub	sp, #0x30
 8000df4:      	str	r1, [sp, #0x4]
 8000df6:      	str	r0, [sp, #0xc]
 8000df8:      	str	r1, [sp, #0x10]
 8000dfa:      	str	r1, [sp, #0x14]
 8000dfc:      	str	r1, [sp, #0x1c]
 8000dfe:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000e00:      	strb	r0, [r7, #-21]
 8000e04:      	ldrb	r0, [r7, #-21]
 8000e08:      	str	r1, [sp, #0x20]
 8000e0a:      	and	r0, r0, #0x1
 8000e0e:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000e12:      	movw	r1, #0x3534
 8000e16:      	movt	r1, #0x800
 8000e1a:      	bl	0x8000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298> @ imm = #0x1d6
 8000e1e:      	ldr	r1, [sp, #0x4]
 8000e20:      	mov	r2, r0
 8000e22:      	str	r1, [sp, #0x28]
 8000e24:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000e28:      	ldr	r1, [sp, #0x28]
 8000e2a:      	ldr	r0, [r1]
 8000e2c:      	bic	r0, r0, #0x4000
 8000e30:      	orr.w	r0, r0, r2, lsl #14
 8000e34:      	str	r0, [r1]
;         self.w
 8000e36:      	ldr	r0, [sp, #0x28]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e38:      	add	sp, #0x30
 8000e3a:      	pop	{r7, pc}

08000e3c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd170cffe9dba0fa3E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e3c:      	push	{r7, lr}
 8000e3e:      	mov	r7, sp
 8000e40:      	sub	sp, #0x30
 8000e42:      	str	r1, [sp, #0x4]
 8000e44:      	str	r0, [sp, #0xc]
 8000e46:      	str	r1, [sp, #0x10]
 8000e48:      	str	r1, [sp, #0x14]
 8000e4a:      	str	r1, [sp, #0x1c]
 8000e4c:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000e4e:      	strb	r0, [r7, #-21]
 8000e52:      	ldrb	r0, [r7, #-21]
 8000e56:      	str	r1, [sp, #0x20]
 8000e58:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000e5c:      	movw	r1, #0x3440
 8000e60:      	movt	r1, #0x800
 8000e64:      	bl	0x8000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566> @ imm = #0x17a
 8000e68:      	ldr	r1, [sp, #0x4]
 8000e6a:      	mov	r2, r0
 8000e6c:      	str	r1, [sp, #0x28]
 8000e6e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 8000e72:      	ldr	r1, [sp, #0x28]
 8000e74:      	ldr	r0, [r1]
 8000e76:      	bic	r0, r0, #0x30000000
 8000e7a:      	and	r2, r2, #0x3
 8000e7e:      	orr.w	r0, r0, r2, lsl #28
 8000e82:      	str	r0, [r1]
;         self.w
 8000e84:      	ldr	r0, [sp, #0x28]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e86:      	add	sp, #0x30
 8000e88:      	pop	{r7, pc}

08000e8a <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h67fe6444d0d76f5bE>:
;                             pub fn into_push_pull_output(
 8000e8a:      	push	{r7, lr}
 8000e8c:      	mov	r7, sp
 8000e8e:      	sub	sp, #0x68
 8000e90:      	str	r1, [sp, #0x8]
 8000e92:      	str	r0, [sp, #0x14]
 8000e94:      	str	r1, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e96:      	bl	0x80010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45> @ imm = #0x20a
 8000e9a:      	str	r0, [sp, #0x4]
 8000e9c:      	str	r0, [sp, #0x28]
 8000e9e:      	str	r0, [sp, #0x30]
 8000ea0:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000ea2:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0xcd8
;         let bits = self.register.get();
 8000ea6:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ea8:      	str	r0, [sp, #0x20]
 8000eaa:      	str	r0, [sp, #0x24]
 8000eac:      	add	r0, sp, #0x20
 8000eae:      	add	r1, sp, #0x24
 8000eb0:      	bl	0x8000f46 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb749d6a62b3a7380E> @ imm = #0x92
 8000eb4:      	mov	r1, r0
 8000eb6:      	ldr	r0, [sp, #0x4]
 8000eb8:      	ldr	r1, [r1]
 8000eba:      	str	r0, [sp, #0x38]
 8000ebc:      	str	r1, [sp, #0x3c]
 8000ebe:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000ec0:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xd9c
 8000ec4:      	ldr	r0, [sp, #0x8]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ec6:      	bl	0x80010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f> @ imm = #0x1ea
 8000eca:      	str	r0, [sp, #0xc]
 8000ecc:      	str	r0, [sp, #0x4c]
 8000ece:      	str	r0, [sp, #0x54]
 8000ed0:      	str	r0, [sp, #0x58]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000ed2:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0xca8
;         let bits = self.register.get();
 8000ed6:      	str	r0, [sp, #0x50]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ed8:      	str	r0, [sp, #0x44]
 8000eda:      	str	r0, [sp, #0x48]
 8000edc:      	add	r0, sp, #0x44
 8000ede:      	add	r1, sp, #0x48
 8000ee0:      	bl	0x8000ef8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha19a3cbe555257f5E> @ imm = #0x14
 8000ee4:      	mov	r1, r0
 8000ee6:      	ldr	r0, [sp, #0xc]
 8000ee8:      	ldr	r1, [r1]
 8000eea:      	str	r0, [sp, #0x5c]
 8000eec:      	str	r1, [sp, #0x60]
 8000eee:      	str	r0, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000ef0:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xd6c
;                             }
 8000ef4:      	add	sp, #0x68
 8000ef6:      	pop	{r7, pc}

08000ef8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha19a3cbe555257f5E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ef8:      	push	{r7, lr}
 8000efa:      	mov	r7, sp
 8000efc:      	sub	sp, #0x30
 8000efe:      	str	r1, [sp, #0x4]
 8000f00:      	str	r0, [sp, #0xc]
 8000f02:      	str	r1, [sp, #0x10]
 8000f04:      	str	r1, [sp, #0x14]
 8000f06:      	str	r1, [sp, #0x1c]
 8000f08:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000f0a:      	strb	r0, [r7, #-21]
 8000f0e:      	ldrb	r0, [r7, #-21]
 8000f12:      	str	r1, [sp, #0x20]
 8000f14:      	and	r0, r0, #0x1
 8000f18:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000f1c:      	movw	r1, #0x3544
 8000f20:      	movt	r1, #0x800
 8000f24:      	bl	0x8000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298> @ imm = #0xcc
 8000f28:      	ldr	r1, [sp, #0x4]
 8000f2a:      	mov	r2, r0
 8000f2c:      	str	r1, [sp, #0x28]
 8000f2e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 8000f32:      	ldr	r1, [sp, #0x28]
 8000f34:      	ldr	r0, [r1]
 8000f36:      	bic	r0, r0, #0x8000
 8000f3a:      	orr.w	r0, r0, r2, lsl #15
 8000f3e:      	str	r0, [r1]
;         self.w
 8000f40:      	ldr	r0, [sp, #0x28]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f42:      	add	sp, #0x30
 8000f44:      	pop	{r7, pc}

08000f46 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb749d6a62b3a7380E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f46:      	push	{r7, lr}
 8000f48:      	mov	r7, sp
 8000f4a:      	sub	sp, #0x30
 8000f4c:      	str	r1, [sp, #0x4]
 8000f4e:      	str	r0, [sp, #0xc]
 8000f50:      	str	r1, [sp, #0x10]
 8000f52:      	str	r1, [sp, #0x14]
 8000f54:      	str	r1, [sp, #0x1c]
 8000f56:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000f58:      	strb	r0, [r7, #-21]
 8000f5c:      	ldrb	r0, [r7, #-21]
 8000f60:      	str	r1, [sp, #0x20]
 8000f62:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000f66:      	movw	r1, #0x3450
 8000f6a:      	movt	r1, #0x800
 8000f6e:      	bl	0x8000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566> @ imm = #0x70
 8000f72:      	ldr	r1, [sp, #0x4]
 8000f74:      	mov	r2, r0
 8000f76:      	str	r1, [sp, #0x28]
 8000f78:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 8000f7c:      	ldr	r1, [sp, #0x28]
 8000f7e:      	ldr	r0, [r1]
 8000f80:      	bic	r0, r0, #0xc0000000
 8000f84:      	orr.w	r0, r0, r2, lsl #30
 8000f88:      	str	r0, [r1]
;         self.w
 8000f8a:      	ldr	r0, [sp, #0x28]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f8c:      	add	sp, #0x30
 8000f8e:      	pop	{r7, pc}

08000f90 <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17haa43f7db9c097e93E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f90:      	sub	sp, #0x4
 8000f92:      	movs	r0, #0x8
;                             }
 8000f94:      	add	sp, #0x4
 8000f96:      	bx	lr

08000f98 <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hea9f04cf0c667d8eE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000f98:      	sub	sp, #0x4
 8000f9a:      	movs	r0, #0x9
;                             }
 8000f9c:      	add	sp, #0x4
 8000f9e:      	bx	lr

08000fa0 <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hc0cfcd4cd75c00a3E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000fa0:      	sub	sp, #0x4
 8000fa2:      	movs	r0, #0xa
;                             }
 8000fa4:      	add	sp, #0x4
 8000fa6:      	bx	lr

08000fa8 <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h22dc9edc38dc6f97E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000fa8:      	sub	sp, #0x4
 8000faa:      	movs	r0, #0xb
;                             }
 8000fac:      	add	sp, #0x4
 8000fae:      	bx	lr

08000fb0 <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hfec5325a38d210e3E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000fb0:      	sub	sp, #0x4
 8000fb2:      	movs	r0, #0xc
;                             }
 8000fb4:      	add	sp, #0x4
 8000fb6:      	bx	lr

08000fb8 <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hc117bfb2c19fa051E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000fb8:      	sub	sp, #0x4
 8000fba:      	movs	r0, #0xd
;                             }
 8000fbc:      	add	sp, #0x4
 8000fbe:      	bx	lr

08000fc0 <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hd4b60bbaad6f4262E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000fc0:      	sub	sp, #0x4
 8000fc2:      	movs	r0, #0xe
;                             }
 8000fc4:      	add	sp, #0x4
 8000fc6:      	bx	lr

08000fc8 <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h8adda58b1689e311E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000fc8:      	sub	sp, #0x4
 8000fca:      	movs	r0, #0xf
;                             }
 8000fcc:      	add	sp, #0x4
 8000fce:      	bx	lr

08000fd0 <<T as switch_hal::IntoSwitch>::into_switch::h82a541574b183f47>:
;     fn into_switch<ActiveLevel>(self) -> Switch<Self, ActiveLevel> {
 8000fd0:      	push	{r7, lr}
 8000fd2:      	mov	r7, sp
 8000fd4:      	sub	sp, #0x8
 8000fd6:      	strb	r0, [r7, #-1]
;         Switch::<Self, ActiveLevel>::new(self)
 8000fda:      	bl	0x800100a <switch_hal::Switch<IoPin,ActiveLevel>::new::h7b4115e5e2b6cdf2> @ imm = #0x2c
;     }
 8000fde:      	add	sp, #0x8
 8000fe0:      	pop	{r7, pc}

08000fe2 <<T as core::convert::Into<U>>::into::h881fb507a81e7566>:
;     fn into(self) -> U {
 8000fe2:      	sub	sp, #0x4
 8000fe4:      	strb.w	r0, [sp, #0x2]
 8000fe8:      	strb.w	r0, [sp, #0x3]
;     }
 8000fec:      	ldrb.w	r0, [sp, #0x3]
 8000ff0:      	add	sp, #0x4
 8000ff2:      	bx	lr

08000ff4 <<T as core::convert::Into<U>>::into::h01bfc86776490298>:
;     fn into(self) -> U {
 8000ff4:      	sub	sp, #0x4
 8000ff6:      	strb.w	r0, [sp, #0x2]
 8000ffa:      	strb.w	r0, [sp, #0x3]
;     }
 8000ffe:      	ldrb.w	r0, [sp, #0x3]
 8001002:      	and	r0, r0, #0x1
 8001006:      	add	sp, #0x4
 8001008:      	bx	lr

0800100a <switch_hal::Switch<IoPin,ActiveLevel>::new::h7b4115e5e2b6cdf2>:
;     pub fn new(pin: IoPin) -> Self {
 800100a:      	sub	sp, #0x4
 800100c:      	strb.w	r0, [sp, #0x3]
;     }
 8001010:      	add	sp, #0x4
 8001012:      	bx	lr

08001014 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h0088b207b3ca15ec>:
;     fn off(&mut self) -> Result<(), Self::Error> {
 8001014:      	push	{r7, lr}
 8001016:      	mov	r7, sp
 8001018:      	sub	sp, #0x8
 800101a:      	str	r0, [sp, #0x4]
;         self.pin.set_low()
 800101c:      	bl	0x80006b4 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h2e19764fe8b3a23dE> @ imm = #-0x96c
;     }
 8001020:      	add	sp, #0x8
 8001022:      	pop	{r7, pc}

08001024 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E>:
;     pub fn ok(self) -> Option<T> {
 8001024:      	sub	sp, #0x4
;         match self {
 8001026:      	b	0x8001028 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E+0x4> @ imm = #-0x2
 8001028:      	movs	r0, #0x1
;             Ok(x) => Some(x),
 800102a:      	strb.w	r0, [sp, #0x2]
 800102e:      	b	0x8001030 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E+0xc> @ imm = #-0x2
;     }
 8001030:      	b	0x8001032 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h40abe0f7a89b9db0E+0xe> @ imm = #-0x2
 8001032:      	ldrb.w	r0, [sp, #0x2]
 8001036:      	and	r0, r0, #0x1
 800103a:      	add	sp, #0x4
 800103c:      	bx	lr

0800103e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h83e2097c85e88821E>:
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800103e:      	sub	sp, #0x1c
 8001040:      	str	r0, [sp, #0x4]
 8001042:      	str	r1, [sp, #0x8]
 8001044:      	str	r1, [sp, #0xc]
 8001046:      	str	r1, [sp, #0x10]
 8001048:      	str	r1, [sp, #0x14]
 800104a:      	movs	r0, #0x1
 800104c:      	strb.w	r0, [sp, #0x1b]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001050:      	ldr	r1, [sp, #0x14]
 8001052:      	ldr	r0, [r1]
 8001054:      	orr	r0, r0, #0x200000
 8001058:      	str	r0, [r1]
;         self.w
 800105a:      	ldr	r0, [sp, #0x14]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800105c:      	add	sp, #0x1c
 800105e:      	bx	lr

08001060 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17he2422fac0397044dE>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001060:      	sub	sp, #0x1c
 8001062:      	str	r0, [sp, #0x4]
 8001064:      	str	r1, [sp, #0x8]
 8001066:      	str	r1, [sp, #0xc]
 8001068:      	str	r1, [sp, #0x10]
 800106a:      	str	r1, [sp, #0x14]
 800106c:      	movs	r0, #0x1
 800106e:      	strb.w	r0, [sp, #0x1b]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001072:      	ldr	r1, [sp, #0x14]
 8001074:      	ldr	r0, [r1]
 8001076:      	orr	r0, r0, #0x200000
 800107a:      	str	r0, [r1]
;         self.w
 800107c:      	ldr	r0, [sp, #0x14]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 800107e:      	add	sp, #0x1c
 8001080:      	bx	lr

08001082 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h5ee1767948a3125eE>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001082:      	sub	sp, #0x1c
 8001084:      	str	r0, [sp, #0x4]
 8001086:      	str	r1, [sp, #0x8]
 8001088:      	str	r1, [sp, #0xc]
 800108a:      	str	r1, [sp, #0x10]
 800108c:      	str	r1, [sp, #0x14]
 800108e:      	movs	r0, #0x0
 8001090:      	strb.w	r0, [sp, #0x1b]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001094:      	ldr	r1, [sp, #0x14]
 8001096:      	ldr	r0, [r1]
 8001098:      	bic	r0, r0, #0x200000
 800109c:      	str	r0, [r1]
;         self.w
 800109e:      	ldr	r0, [sp, #0x14]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80010a0:      	add	sp, #0x1c
 80010a2:      	bx	lr

080010a4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hc652c25857636d45>:
;                         pub(crate) fn moder(&mut self) -> &$gpioy::MODER {
 80010a4:      	sub	sp, #0x4
 80010a6:      	str	r0, [sp]
 80010a8:      	movw	r0, #0x1000
 80010ac:      	movt	r0, #0x4800
;                         }
 80010b0:      	add	sp, #0x4
 80010b2:      	bx	lr

080010b4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::hc8b7110ade18e83f>:
;                         pub(crate) fn otyper(&mut self) -> &$gpioy::OTYPER {
 80010b4:      	sub	sp, #0x4
 80010b6:      	str	r0, [sp]
 80010b8:      	movw	r0, #0x1004
 80010bc:      	movt	r0, #0x4800
;                         }
 80010c0:      	add	sp, #0x4
 80010c2:      	bx	lr

080010c4 <stm32f3xx_hal::rcc::AHB::enr::h027a16df336b48f8>:
;     pub(crate) fn enr(&mut self) -> &rcc::AHBENR {
 80010c4:      	sub	sp, #0x4
 80010c6:      	str	r0, [sp]
 80010c8:      	movw	r0, #0x1014
 80010cc:      	movt	r0, #0x4002
;     }
 80010d0:      	add	sp, #0x4
 80010d2:      	bx	lr

080010d4 <stm32f3xx_hal::rcc::AHB::rstr::hcd0d3340de23d994>:
;     pub(crate) fn rstr(&mut self) -> &rcc::AHBRSTR {
 80010d4:      	sub	sp, #0x4
 80010d6:      	str	r0, [sp]
 80010d8:      	movw	r0, #0x1028
 80010dc:      	movt	r0, #0x4002
;     }
 80010e0:      	add	sp, #0x4
 80010e2:      	bx	lr

080010e4 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h69114d748207bae1>:
; #[derive(Default)]
 80010e4:      	push	{r4, r5, r6, r7, lr}
 80010e6:      	add	r7, sp, #0xc
 80010e8:      	push.w	{r8, r9, r11}
 80010ec:      	sub	sp, #0x10
;     hse: Option<u32>,
 80010ee:      	str	r0, [sp, #0xc]
 80010f0:      	bl	0x8001216 <<core::option::Option<T> as core::default::Default>::default::h6fb81c82c85b0ad4> @ imm = #0x122
 80010f4:      	mov	r9, r0
 80010f6:      	mov	r8, r1
;     hclk: Option<u32>,
 80010f8:      	bl	0x8001216 <<core::option::Option<T> as core::default::Default>::default::h6fb81c82c85b0ad4> @ imm = #0x11a
 80010fc:      	mov	r6, r0
 80010fe:      	mov	r5, r1
;     pclk1: Option<u32>,
 8001100:      	bl	0x8001216 <<core::option::Option<T> as core::default::Default>::default::h6fb81c82c85b0ad4> @ imm = #0x112
 8001104:      	mov	r4, r0
;     pclk2: Option<u32>,
 8001106:      	str	r1, [sp, #0x8]
 8001108:      	bl	0x8001216 <<core::option::Option<T> as core::default::Default>::default::h6fb81c82c85b0ad4> @ imm = #0x10a
 800110c:      	str	r0, [sp]
;     sysclk: Option<u32>,
 800110e:      	str	r1, [sp, #0x4]
 8001110:      	bl	0x8001216 <<core::option::Option<T> as core::default::Default>::default::h6fb81c82c85b0ad4> @ imm = #0x102
 8001114:      	ldr.w	r12, [sp]
 8001118:      	ldr	r3, [sp, #0x4]
 800111a:      	ldr.w	lr, [sp, #0x8]
 800111e:      	mov	r2, r0
 8001120:      	ldr	r0, [sp, #0xc]
; #[derive(Default)]
 8001122:      	str.w	r9, [r0]
 8001126:      	str.w	r8, [r0, #0x4]
 800112a:      	mov.w	r8, #0x0
 800112e:      	strb.w	r8, [r0, #0x28]
 8001132:      	strb.w	r8, [r0, #0x29]
 8001136:      	str	r6, [r0, #0x8]
 8001138:      	str	r5, [r0, #0xc]
 800113a:      	str	r4, [r0, #0x10]
 800113c:      	str.w	lr, [r0, #0x14]
 8001140:      	str.w	r12, [r0, #0x18]
 8001144:      	str	r3, [r0, #0x1c]
 8001146:      	str	r2, [r0, #0x20]
 8001148:      	str	r1, [r0, #0x24]
 800114a:      	add	sp, #0x10
 800114c:      	pop.w	{r8, r9, r11}
 8001150:      	pop	{r4, r5, r6, r7, pc}

08001152 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h5819d8ddb56c7374>:
;     fn constrain(self) -> Rcc {
 8001152:      	push	{r4, r5, r7, lr}
 8001154:      	add	r7, sp, #0x8
 8001156:      	sub	sp, #0x38
;             cfgr: CFGR::default(),
 8001158:      	str	r0, [sp]
 800115a:      	add	r0, sp, #0x8
 800115c:      	str	r0, [sp, #0x4]
 800115e:      	bl	0x80010e4 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h69114d748207bae1> @ imm = #-0x7e
 8001162:      	ldr	r0, [sp]
 8001164:      	ldr	r1, [sp, #0x4]
;         Rcc {
 8001166:      	ldm.w	r1!, {r2, r3, r4, r12, lr}
 800116a:      	stm.w	r0!, {r2, r3, r4, r12, lr}
 800116e:      	ldm.w	r1, {r2, r3, r4, r5, r12, lr}
 8001172:      	stm.w	r0, {r2, r3, r4, r5, r12, lr}
;     }
 8001176:      	add	sp, #0x38
 8001178:      	pop	{r4, r5, r7, pc}

0800117a <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hdceb10867ed4e863E>:
;                         fn split(self, ahb: &mut AHB) -> Parts {
 800117a:      	push	{r7, lr}
 800117c:      	mov	r7, sp
 800117e:      	sub	sp, #0x88
 8001180:      	str	r0, [sp, #0x8]
 8001182:      	str	r0, [sp, #0x14]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001184:      	bl	0x80010c4 <stm32f3xx_hal::rcc::AHB::enr::h027a16df336b48f8> @ imm = #-0xc4
 8001188:      	str	r0, [sp]
 800118a:      	str	r0, [sp, #0x48]
 800118c:      	str	r0, [sp, #0x50]
 800118e:      	str	r0, [sp, #0x54]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001190:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x9ea
;         let bits = self.register.get();
 8001194:      	str	r0, [sp, #0x4c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001196:      	str	r0, [sp, #0x40]
 8001198:      	str	r0, [sp, #0x44]
 800119a:      	add	r0, sp, #0x40
 800119c:      	add	r1, sp, #0x44
 800119e:      	bl	0x800103e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h83e2097c85e88821E> @ imm = #-0x164
 80011a2:      	mov	r1, r0
 80011a4:      	ldr	r0, [sp]
 80011a6:      	ldr	r1, [r1]
 80011a8:      	str	r0, [sp, #0x58]
 80011aa:      	str	r1, [sp, #0x5c]
 80011ac:      	str	r0, [sp, #0x60]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80011ae:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xaae
 80011b2:      	ldr	r0, [sp, #0x8]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80011b4:      	bl	0x80010d4 <stm32f3xx_hal::rcc::AHB::rstr::hcd0d3340de23d994> @ imm = #-0xe4
 80011b8:      	str	r0, [sp, #0x4]
 80011ba:      	str	r0, [sp, #0x24]
 80011bc:      	str	r0, [sp, #0x2c]
 80011be:      	str	r0, [sp, #0x30]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80011c0:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x9ba
;         let bits = self.register.get();
 80011c4:      	str	r0, [sp, #0x28]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80011c6:      	str	r0, [sp, #0x1c]
 80011c8:      	str	r0, [sp, #0x20]
 80011ca:      	add	r0, sp, #0x1c
 80011cc:      	add	r1, sp, #0x20
 80011ce:      	bl	0x8001060 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17he2422fac0397044dE> @ imm = #-0x172
 80011d2:      	mov	r1, r0
 80011d4:      	ldr	r0, [sp, #0x4]
 80011d6:      	ldr	r1, [r1]
 80011d8:      	str	r0, [sp, #0x34]
 80011da:      	str	r1, [sp, #0x38]
 80011dc:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80011de:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xa7e
 80011e2:      	ldr	r0, [sp, #0x8]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80011e4:      	bl	0x80010d4 <stm32f3xx_hal::rcc::AHB::rstr::hcd0d3340de23d994> @ imm = #-0x114
 80011e8:      	str	r0, [sp, #0xc]
 80011ea:      	str	r0, [sp, #0x6c]
 80011ec:      	str	r0, [sp, #0x74]
 80011ee:      	str	r0, [sp, #0x78]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80011f0:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #0x98a
;         let bits = self.register.get();
 80011f4:      	str	r0, [sp, #0x70]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80011f6:      	str	r0, [sp, #0x64]
 80011f8:      	str	r0, [sp, #0x68]
 80011fa:      	add	r0, sp, #0x64
 80011fc:      	add	r1, sp, #0x68
 80011fe:      	bl	0x8001082 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h5ee1767948a3125eE> @ imm = #-0x180
 8001202:      	mov	r1, r0
 8001204:      	ldr	r0, [sp, #0xc]
 8001206:      	ldr	r1, [r1]
 8001208:      	str	r0, [sp, #0x7c]
 800120a:      	str	r1, [sp, #0x80]
 800120c:      	str	r0, [sp, #0x84]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800120e:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #0xa4e
;                         }
 8001212:      	add	sp, #0x88
 8001214:      	pop	{r7, pc}

08001216 <<core::option::Option<T> as core::default::Default>::default::h6fb81c82c85b0ad4>:
;     fn default() -> Option<T> {
 8001216:      	sub	sp, #0x8
 8001218:      	movs	r0, #0x0
;         None
 800121a:      	str	r0, [sp]
;     }
 800121c:      	ldr	r0, [sp]
 800121e:      	ldr	r1, [sp, #0x4]
 8001220:      	add	sp, #0x8
 8001222:      	bx	lr

08001224 <r0::zero_bss::h521613f82fba7a94>:
; pub unsafe fn zero_bss<T>(mut sbss: *mut T, ebss: *mut T)
 8001224:      	push	{r7, lr}
 8001226:      	mov	r7, sp
 8001228:      	sub	sp, #0x50
 800122a:      	str	r1, [sp, #0x18]
 800122c:      	str	r0, [sp, #0x1c]
 800122e:      	str	r1, [sp, #0x20]
;     while sbss < ebss {
 8001230:      	b	0x8001232 <r0::zero_bss::h521613f82fba7a94+0xe> @ imm = #-0x2
 8001232:      	ldr	r1, [sp, #0x18]
 8001234:      	ldr	r0, [sp, #0x1c]
 8001236:      	cmp	r0, r1
 8001238:      	blo	0x8001240 <r0::zero_bss::h521613f82fba7a94+0x1c> @ imm = #0x4
 800123a:      	b	0x800123c <r0::zero_bss::h521613f82fba7a94+0x18> @ imm = #-0x2
; }
 800123c:      	add	sp, #0x50
 800123e:      	pop	{r7, pc}
;         ptr::write_volatile(sbss, mem::zeroed());
 8001240:      	ldr	r0, [sp, #0x1c]
 8001242:      	str	r0, [sp, #0x8]
 8001244:      	movs	r1, #0x0
;     pub const unsafe fn write_bytes(self, val: u8, count: usize)
 8001246:      	str	r1, [sp, #0x4]
 8001248:      	strb	r1, [r7, #-37]
 800124c:      	movs	r0, #0x1
 800124e:      	str	r0, [sp, #0xc]
 8001250:      	str	r0, [sp, #0x2c]
; pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
 8001252:      	strb	r1, [r7, #-29]
 8001256:      	str	r0, [sp, #0x34]
 8001258:      	add	r0, sp, #0x24
;         unsafe { u.as_mut_ptr().write_bytes(0u8, 1) };
 800125a:      	str	r0, [sp, #0x38]
;         self as *mut _ as *mut T
 800125c:      	str	r0, [sp, #0x3c]
;                 zero_size: bool = T::IS_ZST || count == 0,
 800125e:      	strb	r1, [r7, #-38]
;                 precondition_check($($arg,)*);
 8001262:      	ldrb	r1, [r7, #-38]
 8001266:      	and	r2, r1, #0x1
 800126a:      	movs	r1, #0x4
 800126c:      	str	r1, [sp, #0x10]
 800126e:      	bl	0x80012fc <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5> @ imm = #0x8a
 8001272:      	ldr	r1, [sp, #0x4]
 8001274:      	ldr	r0, [sp, #0x8]
;         write_bytes(dst, val, count)
 8001276:      	str	r1, [sp, #0x24]
;         u
 8001278:      	ldr	r1, [sp, #0x24]
 800127a:      	str	r1, [sp, #0x40]
;             ManuallyDrop::into_inner(self.value)
 800127c:      	str	r1, [sp, #0x44]
;         ptr::write_volatile(sbss, mem::zeroed());
 800127e:      	bl	0x80013ba <core::ptr::write_volatile::h99e490cbafb944e6> @ imm = #0x138
 8001282:      	ldr	r1, [sp, #0xc]
 8001284:      	ldr	r2, [sp, #0x10]
;         sbss = sbss.offset(1);
 8001286:      	ldr	r0, [sp, #0x1c]
 8001288:      	str	r0, [sp, #0x14]
 800128a:      	str	r0, [sp, #0x48]
 800128c:      	str	r1, [sp, #0x4c]
;                 precondition_check($($arg,)*);
 800128e:      	bl	0x80014b6 <core::ptr::mut_ptr::<impl *mut T>::offset::precondition_check::h5c33a8d206eaa7ff> @ imm = #0x224
 8001292:      	ldr	r0, [sp, #0x14]
;         unsafe { intrinsics::offset(self, count) }
 8001294:      	adds	r0, #0x4
;         sbss = sbss.offset(1);
 8001296:      	str	r0, [sp, #0x1c]
;     while sbss < ebss {
 8001298:      	b	0x8001232 <r0::zero_bss::h521613f82fba7a94+0xe> @ imm = #-0x6a

0800129a <r0::init_data::hdbf9aef85a336761>:
; pub unsafe fn init_data<T>(
 800129a:      	push	{r7, lr}
 800129c:      	mov	r7, sp
 800129e:      	sub	sp, #0x38
 80012a0:      	str	r1, [sp, #0x18]
 80012a2:      	str	r0, [sp, #0x1c]
 80012a4:      	str	r2, [sp, #0x20]
 80012a6:      	str	r1, [sp, #0x24]
;     while sdata < edata {
 80012a8:      	b	0x80012aa <r0::init_data::hdbf9aef85a336761+0x10> @ imm = #-0x2
 80012aa:      	ldr	r1, [sp, #0x18]
 80012ac:      	ldr	r0, [sp, #0x1c]
 80012ae:      	cmp	r0, r1
 80012b0:      	blo	0x80012b8 <r0::init_data::hdbf9aef85a336761+0x1e> @ imm = #0x4
 80012b2:      	b	0x80012b4 <r0::init_data::hdbf9aef85a336761+0x1a> @ imm = #-0x2
; }
 80012b4:      	add	sp, #0x38
 80012b6:      	pop	{r7, pc}
;         ptr::write(sdata, ptr::read(sidata));
 80012b8:      	ldr	r0, [sp, #0x1c]
 80012ba:      	str	r0, [sp, #0x4]
 80012bc:      	ldr	r0, [sp, #0x20]
 80012be:      	bl	0x80014a0 <core::ptr::read::h1163accb1e844ed1> @ imm = #0x1de
 80012c2:      	mov	r1, r0
 80012c4:      	ldr	r0, [sp, #0x4]
 80012c6:      	bl	0x80014aa <core::ptr::write::h5c66db18c35c2a7d> @ imm = #0x1e0
;         sdata = sdata.offset(1);
 80012ca:      	ldr	r0, [sp, #0x1c]
 80012cc:      	str	r0, [sp, #0x8]
 80012ce:      	str	r0, [sp, #0x28]
 80012d0:      	movs	r1, #0x1
 80012d2:      	str	r1, [sp, #0xc]
 80012d4:      	str	r1, [sp, #0x2c]
 80012d6:      	movs	r2, #0x4
;                 precondition_check($($arg,)*);
 80012d8:      	str	r2, [sp, #0x10]
 80012da:      	bl	0x80014b6 <core::ptr::mut_ptr::<impl *mut T>::offset::precondition_check::h5c33a8d206eaa7ff> @ imm = #0x1d8
 80012de:      	ldr	r0, [sp, #0x8]
 80012e0:      	ldr	r1, [sp, #0xc]
 80012e2:      	ldr	r2, [sp, #0x10]
;         unsafe { intrinsics::offset(self, count) }
 80012e4:      	adds	r0, #0x4
;         sdata = sdata.offset(1);
 80012e6:      	str	r0, [sp, #0x1c]
;         sidata = sidata.offset(1);
 80012e8:      	ldr	r0, [sp, #0x20]
 80012ea:      	str	r0, [sp, #0x14]
 80012ec:      	str	r0, [sp, #0x30]
 80012ee:      	str	r1, [sp, #0x34]
;                 precondition_check($($arg,)*);
 80012f0:      	bl	0x800152c <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf81ec332bbdabc3b> @ imm = #0x238
 80012f4:      	ldr	r0, [sp, #0x14]
;         unsafe { intrinsics::offset(self, count) }
 80012f6:      	adds	r0, #0x4
;         sidata = sidata.offset(1);
 80012f8:      	str	r0, [sp, #0x20]
;     while sdata < edata {
 80012fa:      	b	0x80012aa <r0::init_data::hdbf9aef85a336761+0x10> @ imm = #-0x54

080012fc <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5>:
;             const fn precondition_check($($name:$ty),*) {
 80012fc:      	push	{r7, lr}
 80012fe:      	mov	r7, sp
 8001300:      	sub	sp, #0x40
 8001302:      	str	r1, [sp, #0x4]
 8001304:      	str	r0, [sp, #0x8]
 8001306:      	mov	r3, r2
 8001308:      	str	r3, [sp, #0xc]
 800130a:      	str	r0, [sp, #0x28]
 800130c:      	str	r1, [sp, #0x2c]
 800130e:      	strb	r2, [r7, #-13]
;     pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
 8001312:      	movw	r0, #0x3580
 8001316:      	movt	r0, #0x800
 800131a:      	str	r0, [sp, #0x34]
 800131c:      	mov.w	r0, #0x55555555
;             return intrinsics::ctpop(self);
 8001320:      	and.w	r0, r0, r1, lsr #1
 8001324:      	subs	r0, r1, r0
 8001326:      	mov.w	r1, #0x33333333
 800132a:      	and.w	r1, r1, r0, lsr #2
 800132e:      	bic	r0, r0, #0xcccccccc
 8001332:      	add	r0, r1
 8001334:      	add.w	r0, r0, r0, lsr #4
 8001338:      	bic	r0, r0, #0xf0f0f0f0
 800133c:      	mov.w	r1, #0x1010101
 8001340:      	muls	r0, r1, r0
 8001342:      	lsrs	r0, r0, #0x18
 8001344:      	str	r0, [sp, #0x38]
 8001346:      	ldr	r0, [sp, #0x38]
;         if !align.is_power_of_two() {
 8001348:      	cmp	r0, #0x1
 800134a:      	bne	0x800135e <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0x62> @ imm = #0x10
 800134c:      	b	0x800134e <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0x52> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 800134e:      	ldr	r0, [sp, #0x8]
 8001350:      	ldr	r1, [sp, #0x4]
 8001352:      	mov	r2, r0
;         self.addr() & (align - 1) == 0
 8001354:      	str	r2, [sp]
 8001356:      	subs	r1, #0x1
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 8001358:      	tst	r0, r1
 800135a:      	beq	0x8001392 <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0x96> @ imm = #0x34
 800135c:      	b	0x800139a <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0x9e> @ imm = #0x3a
;         Arguments { pieces, fmt: None, args: &[] }
 800135e:      	movw	r0, #0x3580
 8001362:      	movt	r0, #0x800
 8001366:      	str	r0, [sp, #0x10]
 8001368:      	movs	r0, #0x1
 800136a:      	str	r0, [sp, #0x14]
 800136c:      	movw	r0, #0x35f8
 8001370:      	movt	r0, #0x800
 8001374:      	ldr	r1, [r0]
 8001376:      	ldr	r0, [r0, #0x4]
 8001378:      	str	r1, [sp, #0x20]
 800137a:      	str	r0, [sp, #0x24]
 800137c:      	movs	r0, #0x4
 800137e:      	str	r0, [sp, #0x18]
 8001380:      	movs	r0, #0x0
 8001382:      	str	r0, [sp, #0x1c]
;             panic!("is_aligned_to: align is not a power-of-two");
 8001384:      	movw	r1, #0x3678
 8001388:      	movt	r1, #0x800
 800138c:      	add	r0, sp, #0x10
 800138e:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #0xfca
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 8001392:      	ldr	r0, [sp, #0xc]
 8001394:      	lsls	r0, r0, #0x1f
 8001396:      	cbnz	r0, 0x80013a6 <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0xaa> @ imm = #0xc
 8001398:      	b	0x800139c <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0xa0> @ imm = #0x0
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, zero_size)
 800139a:      	b	0x80013a8 <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0xac> @ imm = #0xa
;         let ptr = self as *const u8;
 800139c:      	ldr	r0, [sp]
 800139e:      	ldr	r1, [sp, #0x8]
 80013a0:      	str	r1, [sp, #0x3c]
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, zero_size)
 80013a2:      	cbnz	r0, 0x80013b6 <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0xba> @ imm = #0x10
 80013a4:      	b	0x80013a8 <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0xac> @ imm = #0x0
 80013a6:      	b	0x80013b6 <core::intrinsics::write_bytes::precondition_check::h9c190c65657a81b5+0xba> @ imm = #0xc
;                     ::core::panicking::panic_nounwind(
 80013a8:      	movw	r0, #0x3588
 80013ac:      	movt	r0, #0x800
 80013b0:      	movs	r1, #0x6f
 80013b2:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0x100a
;             }
 80013b6:      	add	sp, #0x40
 80013b8:      	pop	{r7, pc}

080013ba <core::ptr::write_volatile::h99e490cbafb944e6>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 80013ba:      	push	{r7, lr}
 80013bc:      	mov	r7, sp
 80013be:      	sub	sp, #0x10
 80013c0:      	str	r1, [sp]
 80013c2:      	str	r0, [sp, #0x4]
 80013c4:      	str	r0, [sp, #0x8]
 80013c6:      	str	r1, [sp, #0xc]
;             if ::core::ub_checks::$kind() {
 80013c8:      	b	0x80013ca <core::ptr::write_volatile::h99e490cbafb944e6+0x10> @ imm = #-0x2
;                 precondition_check($($arg,)*);
 80013ca:      	ldr	r0, [sp, #0x4]
 80013cc:      	movs	r1, #0x4
 80013ce:      	movs	r2, #0x0
 80013d0:      	bl	0x80013e0 <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c> @ imm = #0xc
;             if ::core::ub_checks::$kind() {
 80013d4:      	b	0x80013d6 <core::ptr::write_volatile::h99e490cbafb944e6+0x1c> @ imm = #-0x2
;         intrinsics::volatile_store(dst, src);
 80013d6:      	ldr	r0, [sp]
 80013d8:      	ldr	r1, [sp, #0x4]
 80013da:      	str	r0, [r1]
; }
 80013dc:      	add	sp, #0x10
 80013de:      	pop	{r7, pc}

080013e0 <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c>:
;             const fn precondition_check($($name:$ty),*) {
 80013e0:      	push	{r7, lr}
 80013e2:      	mov	r7, sp
 80013e4:      	sub	sp, #0x48
 80013e6:      	str	r1, [sp, #0x8]
 80013e8:      	str	r0, [sp, #0xc]
 80013ea:      	mov	r3, r2
 80013ec:      	str	r3, [sp, #0x10]
 80013ee:      	str	r0, [sp, #0x2c]
 80013f0:      	str	r1, [sp, #0x30]
 80013f2:      	strb	r2, [r7, #-17]
;     pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
 80013f6:      	movw	r2, #0x3580
 80013fa:      	movt	r2, #0x800
 80013fe:      	str	r2, [sp, #0x38]
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
 8001400:      	str	r0, [sp, #0x3c]
 8001402:      	mov.w	r0, #0x55555555
;             return intrinsics::ctpop(self);
 8001406:      	and.w	r0, r0, r1, lsr #1
 800140a:      	subs	r0, r1, r0
 800140c:      	mov.w	r1, #0x33333333
 8001410:      	and.w	r1, r1, r0, lsr #2
 8001414:      	bic	r0, r0, #0xcccccccc
 8001418:      	add	r0, r1
 800141a:      	add.w	r0, r0, r0, lsr #4
 800141e:      	bic	r0, r0, #0xf0f0f0f0
 8001422:      	mov.w	r1, #0x1010101
 8001426:      	muls	r0, r1, r0
 8001428:      	lsrs	r0, r0, #0x18
 800142a:      	str	r0, [sp, #0x40]
 800142c:      	ldr	r0, [sp, #0x40]
;         if !align.is_power_of_two() {
 800142e:      	cmp	r0, #0x1
 8001430:      	bne	0x8001444 <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0x64> @ imm = #0x10
 8001432:      	b	0x8001434 <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0x54> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 8001434:      	ldr	r0, [sp, #0xc]
 8001436:      	ldr	r1, [sp, #0x8]
 8001438:      	mov	r2, r0
;         self.addr() & (align - 1) == 0
 800143a:      	str	r2, [sp, #0x4]
 800143c:      	subs	r1, #0x1
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 800143e:      	tst	r0, r1
 8001440:      	beq	0x8001478 <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0x98> @ imm = #0x34
 8001442:      	b	0x8001480 <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0xa0> @ imm = #0x3a
;         Arguments { pieces, fmt: None, args: &[] }
 8001444:      	movw	r0, #0x3580
 8001448:      	movt	r0, #0x800
 800144c:      	str	r0, [sp, #0x14]
 800144e:      	movs	r0, #0x1
 8001450:      	str	r0, [sp, #0x18]
 8001452:      	movw	r0, #0x35f8
 8001456:      	movt	r0, #0x800
 800145a:      	ldr	r1, [r0]
 800145c:      	ldr	r0, [r0, #0x4]
 800145e:      	str	r1, [sp, #0x24]
 8001460:      	str	r0, [sp, #0x28]
 8001462:      	movs	r0, #0x4
 8001464:      	str	r0, [sp, #0x1c]
 8001466:      	movs	r0, #0x0
 8001468:      	str	r0, [sp, #0x20]
;             panic!("is_aligned_to: align is not a power-of-two");
 800146a:      	movw	r1, #0x3678
 800146e:      	movt	r1, #0x800
 8001472:      	add	r0, sp, #0x14
 8001474:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #0xee4
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 8001478:      	ldr	r0, [sp, #0x10]
 800147a:      	lsls	r0, r0, #0x1f
 800147c:      	cbnz	r0, 0x800148c <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0xac> @ imm = #0xc
 800147e:      	b	0x8001482 <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0xa2> @ imm = #0x0
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
 8001480:      	b	0x800148e <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0xae> @ imm = #0xa
;         let ptr = self as *const u8;
 8001482:      	ldr	r0, [sp, #0x4]
 8001484:      	ldr	r1, [sp, #0xc]
 8001486:      	str	r1, [sp, #0x44]
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
 8001488:      	cbnz	r0, 0x800149c <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0xbc> @ imm = #0x10
 800148a:      	b	0x800148e <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0xae> @ imm = #0x0
 800148c:      	b	0x800149c <core::ptr::write_volatile::precondition_check::hbed45ebb2989657c+0xbc> @ imm = #0xc
;                     ::core::panicking::panic_nounwind(
 800148e:      	movw	r0, #0x3688
 8001492:      	movt	r0, #0x800
 8001496:      	movs	r1, #0x6f
 8001498:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0xf24
;             }
 800149c:      	add	sp, #0x48
 800149e:      	pop	{r7, pc}

080014a0 <core::ptr::read::h1163accb1e844ed1>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 80014a0:      	sub	sp, #0x4
 80014a2:      	str	r0, [sp]
;         crate::intrinsics::read_via_copy(src)
 80014a4:      	ldr	r0, [r0]
; }
 80014a6:      	add	sp, #0x4
 80014a8:      	bx	lr

080014aa <core::ptr::write::h5c66db18c35c2a7d>:
; pub const unsafe fn write<T>(dst: *mut T, src: T) {
 80014aa:      	sub	sp, #0x8
 80014ac:      	str	r0, [sp]
 80014ae:      	str	r1, [sp, #0x4]
;         intrinsics::write_via_move(dst, src)
 80014b0:      	str	r1, [r0]
; }
 80014b2:      	add	sp, #0x8
 80014b4:      	bx	lr

080014b6 <core::ptr::mut_ptr::<impl *mut T>::offset::precondition_check::h5c33a8d206eaa7ff>:
;             const fn precondition_check($($name:$ty),*) {
 80014b6:      	push	{r7, lr}
 80014b8:      	mov	r7, sp
 80014ba:      	sub	sp, #0x40
 80014bc:      	mov	r3, r2
 80014be:      	mov	r2, r1
 80014c0:      	str	r0, [sp, #0x4]
 80014c2:      	str	r0, [sp, #0xc]
 80014c4:      	str	r2, [sp, #0x10]
 80014c6:      	str	r3, [sp, #0x14]
;                     let Some(byte_offset) = count.checked_mul(size as isize) else {
 80014c8:      	str	r3, [sp, #0x18]
;             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
 80014ca:      	smull	r1, r0, r2, r3
 80014ce:      	smmul	r2, r2, r3
 80014d2:      	subs.w	r2, r2, r1, asr #31
 80014d6:      	it	ne
 80014d8:      	movne	r2, #0x1
 80014da:      	mov	r3, r1
 80014dc:      	str	r3, [sp, #0x8]
 80014de:      	str	r1, [sp, #0x1c]
 80014e0:      	strb	r2, [r7, #-29]
;             (a as Self, b)
 80014e4:      	str	r1, [sp, #0x24]
;             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
 80014e6:      	cmp.w	r0, r1, asr #31
;     if b {
 80014ea:      	bne	0x8001518 <core::ptr::mut_ptr::<impl *mut T>::offset::precondition_check::h5c33a8d206eaa7ff+0x62> @ imm = #0x2a
 80014ec:      	b	0x80014ee <core::ptr::mut_ptr::<impl *mut T>::offset::precondition_check::h5c33a8d206eaa7ff+0x38> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 80014ee:      	ldr	r2, [sp, #0x8]
 80014f0:      	ldr	r0, [sp, #0x4]
 80014f2:      	str	r0, [sp, #0x28]
;             let (res, overflowed) = self.overflowing_add(rhs as Self);
 80014f4:      	str	r2, [sp, #0x2c]
;             let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
 80014f6:      	adds	r3, r0, r2
 80014f8:      	mov.w	r1, #0x0
 80014fc:      	adc	r0, r1, #0x0
 8001500:      	str	r3, [sp, #0x30]
 8001502:      	strb	r0, [r7, #-9]
;             (a as Self, b)
 8001506:      	str	r3, [sp, #0x38]
;             (res, overflowed ^ (rhs < 0))
 8001508:      	cmp	r2, #0x0
 800150a:      	it	mi
 800150c:      	movmi	r1, #0x1
 800150e:      	eors	r0, r1
 8001510:      	strb	r0, [r7, #-1]
;             ) => runtime_offset_nowrap(this, count, size)
 8001514:      	cbz	r0, 0x8001528 <core::ptr::mut_ptr::<impl *mut T>::offset::precondition_check::h5c33a8d206eaa7ff+0x72> @ imm = #0x10
 8001516:      	b	0x800151a <core::ptr::mut_ptr::<impl *mut T>::offset::precondition_check::h5c33a8d206eaa7ff+0x64> @ imm = #0x0
 8001518:      	b	0x800151a <core::ptr::mut_ptr::<impl *mut T>::offset::precondition_check::h5c33a8d206eaa7ff+0x64> @ imm = #-0x2
;                     ::core::panicking::panic_nounwind(
 800151a:      	movw	r0, #0x36f7
 800151e:      	movt	r0, #0x800
 8001522:      	movs	r1, #0x5d
 8001524:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0xe98
;             }
 8001528:      	add	sp, #0x40
 800152a:      	pop	{r7, pc}

0800152c <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf81ec332bbdabc3b>:
;             const fn precondition_check($($name:$ty),*) {
 800152c:      	push	{r7, lr}
 800152e:      	mov	r7, sp
 8001530:      	sub	sp, #0x40
 8001532:      	mov	r3, r2
 8001534:      	mov	r2, r1
 8001536:      	str	r0, [sp, #0x4]
 8001538:      	str	r0, [sp, #0xc]
 800153a:      	str	r2, [sp, #0x10]
 800153c:      	str	r3, [sp, #0x14]
;                     let Some(byte_offset) = count.checked_mul(size as isize) else {
 800153e:      	str	r3, [sp, #0x18]
;             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
 8001540:      	smull	r1, r0, r2, r3
 8001544:      	smmul	r2, r2, r3
 8001548:      	subs.w	r2, r2, r1, asr #31
 800154c:      	it	ne
 800154e:      	movne	r2, #0x1
 8001550:      	mov	r3, r1
 8001552:      	str	r3, [sp, #0x8]
 8001554:      	str	r1, [sp, #0x1c]
 8001556:      	strb	r2, [r7, #-29]
;             (a as Self, b)
 800155a:      	str	r1, [sp, #0x24]
;             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
 800155c:      	cmp.w	r0, r1, asr #31
;     if b {
 8001560:      	bne	0x800158e <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf81ec332bbdabc3b+0x62> @ imm = #0x2a
 8001562:      	b	0x8001564 <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf81ec332bbdabc3b+0x38> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 8001564:      	ldr	r2, [sp, #0x8]
 8001566:      	ldr	r0, [sp, #0x4]
 8001568:      	str	r0, [sp, #0x28]
;             let (res, overflowed) = self.overflowing_add(rhs as Self);
 800156a:      	str	r2, [sp, #0x2c]
;             let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
 800156c:      	adds	r3, r0, r2
 800156e:      	mov.w	r1, #0x0
 8001572:      	adc	r0, r1, #0x0
 8001576:      	str	r3, [sp, #0x30]
 8001578:      	strb	r0, [r7, #-9]
;             (a as Self, b)
 800157c:      	str	r3, [sp, #0x38]
;             (res, overflowed ^ (rhs < 0))
 800157e:      	cmp	r2, #0x0
 8001580:      	it	mi
 8001582:      	movmi	r1, #0x1
 8001584:      	eors	r0, r1
 8001586:      	strb	r0, [r7, #-1]
;             ) => runtime_offset_nowrap(this, count, size)
 800158a:      	cbz	r0, 0x800159e <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf81ec332bbdabc3b+0x72> @ imm = #0x10
 800158c:      	b	0x8001590 <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf81ec332bbdabc3b+0x64> @ imm = #0x0
 800158e:      	b	0x8001590 <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf81ec332bbdabc3b+0x64> @ imm = #-0x2
;                     ::core::panicking::panic_nounwind(
 8001590:      	movw	r0, #0x36f7
 8001594:      	movt	r0, #0x800
 8001598:      	movs	r1, #0x5d
 800159a:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0xe22
;             }
 800159e:      	add	sp, #0x40
 80015a0:      	pop	{r7, pc}
 80015a2:      	bmi	0x800154e <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf81ec332bbdabc3b+0x22> @ imm = #-0x58

080015a4 <core::sync::atomic::compiler_fence::h47b36ed461e034f3>:
; pub fn compiler_fence(order: Ordering) {
 80015a4:      	push	{r7, lr}
 80015a6:      	mov	r7, sp
 80015a8:      	sub	sp, #0x28
 80015aa:      	strb	r0, [r7, #-29]
;     pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
 80015ae:      	movw	r0, #0x3788
 80015b2:      	movt	r0, #0x800
 80015b6:      	str	r0, [sp, #0x24]
;         match order {
 80015b8:      	ldrb	r0, [r7, #-29]
 80015bc:      	str	r0, [sp, #0x4]
 80015be:      	ldr	r1, [sp, #0x4]
 80015c0:      	tbb	[pc, r1]
 80015c4: 04 1e 1f 20  	.word	0x201f1e04
 80015c8: 21 00	.short	0x0021
 80015ca:      	trap
;         Arguments { pieces, fmt: None, args: &[] }
 80015cc:      	movw	r0, #0x3788
 80015d0:      	movt	r0, #0x800
 80015d4:      	str	r0, [sp, #0xc]
 80015d6:      	movs	r0, #0x1
 80015d8:      	str	r0, [sp, #0x10]
 80015da:      	movw	r0, #0x35f8
 80015de:      	movt	r0, #0x800
 80015e2:      	ldr	r1, [r0]
 80015e4:      	ldr	r0, [r0, #0x4]
 80015e6:      	str	r1, [sp, #0x1c]
 80015e8:      	str	r0, [sp, #0x20]
 80015ea:      	movs	r0, #0x4
 80015ec:      	str	r0, [sp, #0x14]
 80015ee:      	movs	r0, #0x0
 80015f0:      	str	r0, [sp, #0x18]
;             Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
 80015f2:      	movw	r1, #0x3808
 80015f6:      	movt	r1, #0x800
 80015fa:      	add	r0, sp, #0xc
 80015fc:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #0xd5c
;             Release => intrinsics::atomic_singlethreadfence_release(),
 8001600:      	b	0x8001608 <core::sync::atomic::compiler_fence::h47b36ed461e034f3+0x64> @ imm = #0x4
;             Acquire => intrinsics::atomic_singlethreadfence_acquire(),
 8001602:      	b	0x8001608 <core::sync::atomic::compiler_fence::h47b36ed461e034f3+0x64> @ imm = #0x2
;             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
 8001604:      	b	0x8001608 <core::sync::atomic::compiler_fence::h47b36ed461e034f3+0x64> @ imm = #0x0
;             SeqCst => intrinsics::atomic_singlethreadfence_seqcst(),
 8001606:      	b	0x8001608 <core::sync::atomic::compiler_fence::h47b36ed461e034f3+0x64> @ imm = #-0x2
; }
 8001608:      	add	sp, #0x28
 800160a:      	pop	{r7, pc}

0800160c <ResetTrampoline>:
;             fn trampoline() -> ! {
 800160c:      	push	{r7, lr}
 800160e:      	mov	r7, sp
;                 unsafe { main() }
 8001610:      	bl	0x80001e2 <main>        @ imm = #-0x1432

08001614 <WWDG>:
; pub unsafe extern "C" fn DefaultHandler_() -> ! {
 8001614:      	push	{r7, lr}
 8001616:      	mov	r7, sp
 8001618:      	sub	sp, #0x8
;     loop {
 800161a:      	b	0x800161c <WWDG+0x8>    @ imm = #-0x2
 800161c:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 800161e:      	strb	r0, [r7, #-1]
 8001622:      	ldrb	r0, [r7, #-1]
 8001626:      	bl	0x80015a4 <core::sync::atomic::compiler_fence::h47b36ed461e034f3> @ imm = #-0x86
 800162a:      	b	0x800161c <WWDG+0x8>    @ imm = #-0x12

0800162c <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 800162c:      	bx	lr

0800162e <<&T as core::fmt::Display>::fmt::h42e40e3344af5d73>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 800162e:      	push	{r7, lr}
 8001630:      	mov	r7, sp
 8001632:      	sub	sp, #0x8
 8001634:      	str	r0, [sp]
 8001636:      	str	r1, [sp, #0x4]
 8001638:      	ldr	r0, [r0]
 800163a:      	bl	0x800229c <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h2b5956d83f344cb2> @ imm = #0xc5e
 800163e:      	add	sp, #0x8
 8001640:      	pop	{r7, pc}

08001642 <core::fmt::Write::write_char::hb21d3734cb21f39d>:
;     fn write_char(&mut self, c: char) -> Result {
 8001642:      	push	{r7, lr}
 8001644:      	mov	r7, sp
 8001646:      	sub	sp, #0x28
 8001648:      	str	r1, [sp]
 800164a:      	mov	r1, r0
 800164c:      	ldr	r0, [sp]
 800164e:      	str	r1, [sp, #0x4]
 8001650:      	str	r1, [sp, #0x10]
 8001652:      	str	r0, [sp, #0x14]
 8001654:      	movs	r1, #0x0
;         self.write_str(c.encode_utf8(&mut [0; 4]))
 8001656:      	str	r1, [sp, #0xc]
 8001658:      	add	r1, sp, #0xc
 800165a:      	str	r1, [sp, #0x18]
 800165c:      	movs	r2, #0x4
 800165e:      	str	r2, [sp, #0x1c]
;         unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
 8001660:      	bl	0x80016b6 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02> @ imm = #0x52
 8001664:      	mov	r2, r0
 8001666:      	ldr	r0, [sp, #0x4]
 8001668:      	str	r2, [sp, #0x8]
 800166a:      	mov	r2, r1
 800166c:      	ldr	r1, [sp, #0x8]
 800166e:      	str	r1, [sp, #0x20]
 8001670:      	str	r2, [sp, #0x24]
;         self.write_str(c.encode_utf8(&mut [0; 4]))
 8001672:      	bl	0x800197a <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9f6613e3984fcc50> @ imm = #0x304
;     }
 8001676:      	add	sp, #0x28
 8001678:      	pop	{r7, pc}

0800167a <core::fmt::Write::write_fmt::hb9d24a7b100cf871>:
;     fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
 800167a:      	push	{r7, lr}
 800167c:      	mov	r7, sp
 800167e:      	sub	sp, #0x8
 8001680:      	str	r0, [sp, #0x4]
;         self.spec_write_fmt(args)
 8001682:      	bl	0x80019a2 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588> @ imm = #0x31c
;     }
 8001686:      	add	sp, #0x8
 8001688:      	pop	{r7, pc}

0800168a <core::fmt::Arguments::new_v1::ha1b8ee3b4cd5f329>:
;     pub fn new_v1<const P: usize, const A: usize>(
 800168a:      	sub	sp, #0xc
 800168c:      	str	r1, [sp]
 800168e:      	mov	r1, r0
 8001690:      	ldr	r0, [sp]
 8001692:      	str	r0, [sp, #0x4]
 8001694:      	str	r2, [sp, #0x8]
;         Arguments { pieces, fmt: None, args }
 8001696:      	str	r0, [r1]
 8001698:      	movs	r0, #0x2
 800169a:      	str	r0, [r1, #0x4]
 800169c:      	movw	r0, #0x35f8
 80016a0:      	movt	r0, #0x800
 80016a4:      	ldr	r3, [r0]
 80016a6:      	ldr	r0, [r0, #0x4]
 80016a8:      	str	r3, [r1, #0x10]
 80016aa:      	str	r0, [r1, #0x14]
 80016ac:      	str	r2, [r1, #0x8]
 80016ae:      	movs	r0, #0x1
 80016b0:      	str	r0, [r1, #0xc]
;     }
 80016b2:      	add	sp, #0xc
 80016b4:      	bx	lr

080016b6 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02>:
; pub const fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
 80016b6:      	push	{r7, lr}
 80016b8:      	mov	r7, sp
 80016ba:      	sub	sp, #0x58
 80016bc:      	str	r2, [sp, #0x4]
 80016be:      	str	r1, [sp, #0x8]
 80016c0:      	str	r0, [sp, #0xc]
 80016c2:      	str	r0, [sp, #0x14]
 80016c4:      	str	r1, [sp, #0x18]
 80016c6:      	str	r2, [sp, #0x1c]
;         ..MAX_ONE_B => 1,
 80016c8:      	cmp	r0, #0x80
 80016ca:      	blo	0x80016d8 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x22> @ imm = #0xa
 80016cc:      	b	0x80016ce <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x18> @ imm = #-0x2
;         ..MAX_TWO_B => 2,
 80016ce:      	ldr	r0, [sp, #0xc]
 80016d0:      	cmp.w	r0, #0x800
 80016d4:      	blo	0x80016ee <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x38> @ imm = #0x16
 80016d6:      	b	0x80016e4 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x2e> @ imm = #0xa
 80016d8:      	ldr	r0, [sp, #0x4]
 80016da:      	movs	r1, #0x1
;         ..MAX_ONE_B => 1,
 80016dc:      	str	r1, [sp, #0x10]
;         (1, [a, ..]) => {
 80016de:      	cmp	r0, #0x0
 80016e0:      	bne	0x80017b2 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0xfc> @ imm = #0xce
 80016e2:      	b	0x8001712 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x5c> @ imm = #0x2c
;         ..MAX_THREE_B => 3,
 80016e4:      	ldr	r0, [sp, #0xc]
 80016e6:      	cmp.w	r0, #0x10000
 80016ea:      	blo	0x8001706 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x50> @ imm = #0x18
 80016ec:      	b	0x80016fa <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x44> @ imm = #0xa
 80016ee:      	ldr	r0, [sp, #0x4]
 80016f0:      	movs	r1, #0x2
;         ..MAX_TWO_B => 2,
 80016f2:      	str	r1, [sp, #0x10]
;         (2, [a, b, ..]) => {
 80016f4:      	cmp	r0, #0x1
 80016f6:      	bhi	0x8001794 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0xde> @ imm = #0x9a
 80016f8:      	b	0x8001712 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x5c> @ imm = #0x16
 80016fa:      	ldr	r0, [sp, #0x4]
 80016fc:      	movs	r1, #0x4
;         _ => 4,
 80016fe:      	str	r1, [sp, #0x10]
;         (4, [a, b, c, d, ..]) => {
 8001700:      	cmp	r0, #0x3
 8001702:      	bhi	0x8001728 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x72> @ imm = #0x22
 8001704:      	b	0x8001712 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x5c> @ imm = #0xa
 8001706:      	ldr	r0, [sp, #0x4]
 8001708:      	movs	r1, #0x3
;         ..MAX_THREE_B => 3,
 800170a:      	str	r1, [sp, #0x10]
;         (3, [a, b, c, ..]) => {
 800170c:      	cmp	r0, #0x2
 800170e:      	bhi	0x800176a <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0xb4> @ imm = #0x58
 8001710:      	b	0x8001712 <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x5c> @ imm = #-0x2
;                 len: usize = len,
 8001712:      	ldr	r2, [sp, #0x4]
 8001714:      	ldr	r0, [sp, #0xc]
 8001716:      	ldr	r1, [sp, #0x10]
 8001718:      	str	r1, [sp, #0x44]
;                 dst_len: usize = dst.len(),
 800171a:      	str	r2, [sp, #0x48]
;         const_eval_select(($($val,)*), compiletime, runtime)
 800171c:      	movw	r3, #0x3890
 8001720:      	movt	r3, #0x800
 8001724:      	bl	0x8002f54 <core::char::methods::encode_utf8_raw::do_panic::runtime::haf1e49ca432775d9> @ imm = #0x182c
;         (4, [a, b, c, d, ..]) => {
 8001728:      	ldr	r1, [sp, #0x8]
 800172a:      	ldr	r0, [sp, #0xc]
 800172c:      	str	r1, [sp, #0x20]
 800172e:      	adds	r2, r1, #0x1
 8001730:      	str	r2, [sp, #0x24]
 8001732:      	adds	r2, r1, #0x2
 8001734:      	str	r2, [sp, #0x28]
 8001736:      	adds	r2, r1, #0x3
 8001738:      	str	r2, [sp, #0x2c]
;             *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
 800173a:      	lsrs	r2, r0, #0x12
 800173c:      	movs	r3, #0x1e
 800173e:      	bfi	r2, r3, #3, #29
 8001742:      	strb	r2, [r1]
;             *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
 8001744:      	lsrs	r3, r0, #0xc
 8001746:      	movs	r2, #0x2
 8001748:      	bfi	r3, r2, #6, #26
 800174c:      	strb	r3, [r1, #0x1]
;             *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 800174e:      	lsrs	r3, r0, #0x6
 8001750:      	bfi	r3, r2, #6, #26
 8001754:      	strb	r3, [r1, #0x2]
;             *d = (code & 0x3F) as u8 | TAG_CONT;
 8001756:      	bfi	r0, r2, #6, #26
 800175a:      	strb	r0, [r1, #0x3]
;         }
 800175c:      	b	0x800175e <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0xa8> @ imm = #-0x2
;         self as *mut [T] as *mut T
 800175e:      	ldr	r0, [sp, #0x8]
 8001760:      	str	r0, [sp, #0x50]
;     unsafe { slice::from_raw_parts_mut(dst.as_mut_ptr(), len) }
 8001762:      	ldr	r0, [sp, #0x10]
 8001764:      	str	r0, [sp]
 8001766:      	str	r0, [sp, #0x54]
;             if ::core::ub_checks::$kind() {
 8001768:      	b	0x80017bc <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x106> @ imm = #0x50
;         (3, [a, b, c, ..]) => {
 800176a:      	ldr	r1, [sp, #0x8]
 800176c:      	ldr	r0, [sp, #0xc]
 800176e:      	str	r1, [sp, #0x30]
 8001770:      	adds	r2, r1, #0x1
 8001772:      	str	r2, [sp, #0x34]
 8001774:      	adds	r2, r1, #0x2
 8001776:      	str	r2, [sp, #0x38]
;             *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
 8001778:      	lsrs	r2, r0, #0xc
 800177a:      	movs	r3, #0xe
 800177c:      	bfi	r2, r3, #4, #28
 8001780:      	strb	r2, [r1]
;             *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 8001782:      	lsrs	r3, r0, #0x6
 8001784:      	movs	r2, #0x2
 8001786:      	bfi	r3, r2, #6, #26
 800178a:      	strb	r3, [r1, #0x1]
;             *c = (code & 0x3F) as u8 | TAG_CONT;
 800178c:      	bfi	r0, r2, #6, #26
 8001790:      	strb	r0, [r1, #0x2]
;         }
 8001792:      	b	0x800175e <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0xa8> @ imm = #-0x38
;         (2, [a, b, ..]) => {
 8001794:      	ldr	r1, [sp, #0x8]
 8001796:      	ldr	r0, [sp, #0xc]
 8001798:      	str	r1, [sp, #0x3c]
 800179a:      	adds	r2, r1, #0x1
 800179c:      	str	r2, [sp, #0x40]
;             *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
 800179e:      	lsrs	r2, r0, #0x6
 80017a0:      	movs	r3, #0x6
 80017a2:      	bfi	r2, r3, #5, #27
 80017a6:      	strb	r2, [r1]
 80017a8:      	movs	r2, #0x2
;             *b = (code & 0x3F) as u8 | TAG_CONT;
 80017aa:      	bfi	r0, r2, #6, #26
 80017ae:      	strb	r0, [r1, #0x1]
;         }
 80017b0:      	b	0x800175e <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0xa8> @ imm = #-0x56
;         (1, [a, ..]) => {
 80017b2:      	ldr	r0, [sp, #0xc]
 80017b4:      	ldr	r1, [sp, #0x8]
 80017b6:      	str	r1, [sp, #0x4c]
;             *a = code as u8;
 80017b8:      	strb	r0, [r1]
;         }
 80017ba:      	b	0x800175e <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0xa8> @ imm = #-0x60
;                 precondition_check($($arg,)*);
 80017bc:      	ldr	r3, [sp]
 80017be:      	ldr	r0, [sp, #0x8]
 80017c0:      	movs	r2, #0x1
 80017c2:      	mov	r1, r2
 80017c4:      	bl	0x800183c <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925> @ imm = #0x74
;             if ::core::ub_checks::$kind() {
 80017c8:      	b	0x80017ca <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0x114> @ imm = #-0x2
; }
 80017ca:      	ldr	r1, [sp]
 80017cc:      	ldr	r0, [sp, #0x8]
 80017ce:      	add	sp, #0x58
 80017d0:      	pop	{r7, pc}
 80017d2:      	bmi	0x800177e <core::char::methods::encode_utf8_raw::h7f25afb0eb4a1f02+0xc8> @ imm = #-0x58

080017d4 <core::sync::atomic::compiler_fence::hdb325c49c4bbe1fc>:
; pub fn compiler_fence(order: Ordering) {
 80017d4:      	push	{r7, lr}
 80017d6:      	mov	r7, sp
 80017d8:      	sub	sp, #0x28
 80017da:      	strb	r0, [r7, #-29]
;     pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
 80017de:      	movw	r0, #0x38d4
 80017e2:      	movt	r0, #0x800
 80017e6:      	str	r0, [sp, #0x24]
;         match order {
 80017e8:      	ldrb	r0, [r7, #-29]
 80017ec:      	str	r0, [sp, #0x4]
 80017ee:      	ldr	r1, [sp, #0x4]
 80017f0:      	tbb	[pc, r1]
 80017f4: 04 1e 1f 20  	.word	0x201f1e04
 80017f8: 21 00	.short	0x0021
 80017fa:      	trap
;         Arguments { pieces, fmt: None, args: &[] }
 80017fc:      	movw	r0, #0x38d4
 8001800:      	movt	r0, #0x800
 8001804:      	str	r0, [sp, #0xc]
 8001806:      	movs	r0, #0x1
 8001808:      	str	r0, [sp, #0x10]
 800180a:      	movw	r0, #0x35f8
 800180e:      	movt	r0, #0x800
 8001812:      	ldr	r1, [r0]
 8001814:      	ldr	r0, [r0, #0x4]
 8001816:      	str	r1, [sp, #0x1c]
 8001818:      	str	r0, [sp, #0x20]
 800181a:      	movs	r0, #0x4
 800181c:      	str	r0, [sp, #0x14]
 800181e:      	movs	r0, #0x0
 8001820:      	str	r0, [sp, #0x18]
;             Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
 8001822:      	movw	r1, #0x3954
 8001826:      	movt	r1, #0x800
 800182a:      	add	r0, sp, #0xc
 800182c:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #0xb2c
;             Release => intrinsics::atomic_singlethreadfence_release(),
 8001830:      	b	0x8001838 <core::sync::atomic::compiler_fence::hdb325c49c4bbe1fc+0x64> @ imm = #0x4
;             Acquire => intrinsics::atomic_singlethreadfence_acquire(),
 8001832:      	b	0x8001838 <core::sync::atomic::compiler_fence::hdb325c49c4bbe1fc+0x64> @ imm = #0x2
;             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
 8001834:      	b	0x8001838 <core::sync::atomic::compiler_fence::hdb325c49c4bbe1fc+0x64> @ imm = #0x0
;             SeqCst => intrinsics::atomic_singlethreadfence_seqcst(),
 8001836:      	b	0x8001838 <core::sync::atomic::compiler_fence::hdb325c49c4bbe1fc+0x64> @ imm = #-0x2
; }
 8001838:      	add	sp, #0x28
 800183a:      	pop	{r7, pc}

0800183c <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925>:
;             const fn precondition_check($($name:$ty),*) {
 800183c:      	push	{r7, lr}
 800183e:      	mov	r7, sp
 8001840:      	sub	sp, #0x58
 8001842:      	str	r3, [sp, #0x8]
 8001844:      	str	r2, [sp, #0xc]
 8001846:      	str	r1, [sp, #0x10]
 8001848:      	str	r0, [sp, #0x14]
 800184a:      	str	r0, [sp, #0x34]
 800184c:      	str	r1, [sp, #0x38]
 800184e:      	str	r2, [sp, #0x3c]
 8001850:      	str	r3, [sp, #0x40]
 8001852:      	movs	r1, #0x0
;     is_zst: bool,
 8001854:      	strb	r1, [r7, #-18]
;         fn runtime($($arg: $ty),*) $( -> $ret )? {
 8001858:      	strb	r1, [r7, #-17]
;     pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
 800185c:      	movw	r1, #0x3990
 8001860:      	movt	r1, #0x800
 8001864:      	str	r1, [sp, #0x48]
;             ub_checks::maybe_is_aligned_and_not_null(data, align, false)
 8001866:      	str	r0, [sp, #0x4c]
 8001868:      	mov.w	r0, #0x55555555
;             return intrinsics::ctpop(self);
 800186c:      	and.w	r0, r0, r2, lsr #1
 8001870:      	subs	r0, r2, r0
 8001872:      	mov.w	r1, #0x33333333
 8001876:      	and.w	r1, r1, r0, lsr #2
 800187a:      	bic	r0, r0, #0xcccccccc
 800187e:      	add	r0, r1
 8001880:      	add.w	r0, r0, r0, lsr #4
 8001884:      	bic	r0, r0, #0xf0f0f0f0
 8001888:      	mov.w	r1, #0x1010101
 800188c:      	muls	r0, r1, r0
 800188e:      	lsrs	r0, r0, #0x18
 8001890:      	str	r0, [sp, #0x50]
 8001892:      	ldr	r0, [sp, #0x50]
;         if !align.is_power_of_two() {
 8001894:      	cmp	r0, #0x1
 8001896:      	bne	0x80018aa <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0x6e> @ imm = #0x10
 8001898:      	b	0x800189a <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0x5e> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 800189a:      	ldr	r0, [sp, #0x14]
 800189c:      	ldr	r1, [sp, #0xc]
 800189e:      	mov	r2, r0
;         self.addr() & (align - 1) == 0
 80018a0:      	str	r2, [sp, #0x4]
 80018a2:      	subs	r1, #0x1
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 80018a4:      	tst	r0, r1
 80018a6:      	beq	0x80018de <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xa2> @ imm = #0x34
 80018a8:      	b	0x80018e8 <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xac> @ imm = #0x3c
;         Arguments { pieces, fmt: None, args: &[] }
 80018aa:      	movw	r0, #0x3990
 80018ae:      	movt	r0, #0x800
 80018b2:      	str	r0, [sp, #0x18]
 80018b4:      	movs	r0, #0x1
 80018b6:      	str	r0, [sp, #0x1c]
 80018b8:      	movw	r0, #0x35f8
 80018bc:      	movt	r0, #0x800
 80018c0:      	ldr	r1, [r0]
 80018c2:      	ldr	r0, [r0, #0x4]
 80018c4:      	str	r1, [sp, #0x28]
 80018c6:      	str	r0, [sp, #0x2c]
 80018c8:      	movs	r0, #0x4
 80018ca:      	str	r0, [sp, #0x20]
 80018cc:      	movs	r0, #0x0
 80018ce:      	str	r0, [sp, #0x24]
;             panic!("is_aligned_to: align is not a power-of-two");
 80018d0:      	movw	r1, #0x3b3c
 80018d4:      	movt	r1, #0x800
 80018d8:      	add	r0, sp, #0x18
 80018da:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #0xa7e
;         let ptr = self as *const u8;
 80018de:      	ldr	r0, [sp, #0x4]
 80018e0:      	ldr	r1, [sp, #0x14]
 80018e2:      	str	r1, [sp, #0x54]
;             ub_checks::maybe_is_aligned_and_not_null(data, align, false)
 80018e4:      	cbnz	r0, 0x80018ec <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xb0> @ imm = #0x4
 80018e6:      	b	0x80018ea <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xae> @ imm = #0x0
 80018e8:      	b	0x80018ea <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xae> @ imm = #-0x2
 80018ea:      	b	0x8001934 <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xf8> @ imm = #0x46
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
 80018ec:      	ldr	r0, [sp, #0x10]
 80018ee:      	clz	r1, r0
 80018f2:      	lsrs	r1, r1, #0x5
 80018f4:      	str	r1, [sp]
 80018f6:      	cbnz	r0, 0x8001902 <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xc6> @ imm = #0x8
 80018f8:      	b	0x80018fa <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xbe> @ imm = #-0x2
 80018fa:      	mov.w	r0, #0xffffffff
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
 80018fe:      	str	r0, [sp, #0x30]
 8001900:      	b	0x800190a <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xce> @ imm = #0x6
 8001902:      	ldr	r0, [sp]
 8001904:      	lsls	r0, r0, #0x1f
 8001906:      	cbnz	r0, 0x8001922 <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xe6> @ imm = #0x18
 8001908:      	b	0x8001914 <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xd8> @ imm = #0x8
;     len <= max_len
 800190a:      	ldr	r0, [sp, #0x8]
 800190c:      	ldr	r1, [sp, #0x30]
;                 && ub_checks::is_valid_allocation_size(size, len)
 800190e:      	cmp	r0, r1
 8001910:      	bls	0x8001930 <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xf4> @ imm = #0x1c
 8001912:      	b	0x800192e <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xf2> @ imm = #0x18
 8001914:      	ldr	r1, [sp, #0x10]
 8001916:      	mvn	r0, #0x80000000
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
 800191a:      	udiv	r0, r0, r1
 800191e:      	str	r0, [sp, #0x30]
 8001920:      	b	0x800190a <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xce> @ imm = #-0x1a
 8001922:      	movw	r0, #0x3a0c
 8001926:      	movt	r0, #0x800
 800192a:      	bl	0x8003052 <core::panicking::panic_const::panic_const_div_by_zero::hecbc72778d74a986> @ imm = #0x1724
 800192e:      	b	0x8001934 <core::slice::raw::from_raw_parts_mut::precondition_check::h4a36aa7340bd5925+0xf8> @ imm = #0x2
;             }
 8001930:      	add	sp, #0x58
 8001932:      	pop	{r7, pc}
;                     ::core::panicking::panic_nounwind(
 8001934:      	movw	r0, #0x3a1c
 8001938:      	movt	r0, #0x800
 800193c:      	movs	r1, #0xa6
 800193e:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0xa7e

08001942 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E>:
;     pub fn ok(self) -> Option<T> {
 8001942:      	sub	sp, #0x4
 8001944:      	strb.w	r0, [sp, #0x1]
;         match self {
 8001948:      	ldrb.w	r0, [sp, #0x1]
 800194c:      	lsls	r0, r0, #0x1f
 800194e:      	cbnz	r0, 0x800195a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E+0x18> @ imm = #0x8
 8001950:      	b	0x8001952 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E+0x10> @ imm = #-0x2
 8001952:      	movs	r0, #0x1
;             Ok(x) => Some(x),
 8001954:      	strb.w	r0, [sp, #0x2]
 8001958:      	b	0x8001962 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E+0x20> @ imm = #0x6
 800195a:      	movs	r0, #0x0
;             Err(_) => None,
 800195c:      	strb.w	r0, [sp, #0x2]
 8001960:      	b	0x8001962 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E+0x20> @ imm = #-0x2
;     }
 8001962:      	ldrb.w	r0, [sp, #0x1]
 8001966:      	lsls	r0, r0, #0x1f
 8001968:      	cbnz	r0, 0x8001978 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E+0x36> @ imm = #0xc
 800196a:      	b	0x800196c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E+0x2a> @ imm = #-0x2
 800196c:      	ldrb.w	r0, [sp, #0x2]
 8001970:      	and	r0, r0, #0x1
 8001974:      	add	sp, #0x4
 8001976:      	bx	lr
 8001978:      	b	0x800196c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E+0x2a> @ imm = #-0x10

0800197a <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9f6613e3984fcc50>:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 800197a:      	push	{r7, lr}
 800197c:      	mov	r7, sp
 800197e:      	sub	sp, #0x18
 8001980:      	str	r0, [sp, #0x4]
 8001982:      	str	r1, [sp, #0x8]
 8001984:      	str	r2, [sp, #0xc]
;         write_all(self.0, s.as_bytes());
 8001986:      	ldr	r0, [r0]
 8001988:      	str	r1, [sp, #0x10]
 800198a:      	str	r2, [sp, #0x14]
 800198c:      	bl	0x800211a <cortex_m::itm::write_all::hc735a957d772bd45> @ imm = #0x78a
 8001990:      	movs	r0, #0x0
;         Ok(())
 8001992:      	strb	r0, [r7, #-21]
;     }
 8001996:      	ldrb	r0, [r7, #-21]
 800199a:      	and	r0, r0, #0x1
 800199e:      	add	sp, #0x18
 80019a0:      	pop	{r7, pc}

080019a2 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588>:
;             fn spec_write_fmt(self, args: Arguments<'_>) -> Result {
 80019a2:      	push	{r4, r5, r6, r7, lr}
 80019a4:      	add	r7, sp, #0xc
 80019a6:      	str	r8, [sp, #-4]!
 80019aa:      	sub	sp, #0x60
 80019ac:      	str	r1, [sp]
 80019ae:      	str	r0, [sp, #0x4]
 80019b0:      	str	r0, [sp, #0x2c]
;                 if let Some(s) = args.as_statically_known_str() {
 80019b2:      	str	r1, [sp, #0x30]
;         match (self.pieces, self.args) {
 80019b4:      	ldr	r0, [r1]
 80019b6:      	str	r0, [sp, #0x8]
 80019b8:      	ldr	r0, [r1, #0x4]
 80019ba:      	str	r0, [sp, #0xc]
 80019bc:      	ldr	r1, [r1, #0xc]
;             ([], []) => Some(""),
 80019be:      	str	r1, [sp, #0x10]
 80019c0:      	cbnz	r0, 0x80019ca <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x28> @ imm = #0x6
 80019c2:      	b	0x80019c4 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x22> @ imm = #-0x2
 80019c4:      	ldr	r0, [sp, #0x10]
 80019c6:      	cbz	r0, 0x80019d2 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x30> @ imm = #0x8
 80019c8:      	b	0x80019dc <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x3a> @ imm = #0x10
;             ([s], []) => Some(s),
 80019ca:      	ldr	r0, [sp, #0xc]
 80019cc:      	cmp	r0, #0x1
 80019ce:      	beq	0x80019f8 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x56> @ imm = #0x26
 80019d0:      	b	0x80019dc <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x3a> @ imm = #0x8
 80019d2:      	movs	r0, #0x1
;             ([], []) => Some(""),
 80019d4:      	str	r0, [sp, #0x20]
 80019d6:      	movs	r0, #0x0
 80019d8:      	str	r0, [sp, #0x24]
 80019da:      	b	0x80019ee <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x4c> @ imm = #0x10
;             _ => None,
 80019dc:      	movw	r0, #0x35f8
 80019e0:      	movt	r0, #0x800
 80019e4:      	ldr	r1, [r0]
 80019e6:      	ldr	r0, [r0, #0x4]
 80019e8:      	str	r1, [sp, #0x20]
 80019ea:      	str	r0, [sp, #0x24]
 80019ec:      	b	0x80019ee <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x4c> @ imm = #-0x2
 80019ee:      	add	r0, sp, #0x20
;         if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
 80019f0:      	str	r0, [sp, #0x38]
;         matches!(*self, Some(_))
 80019f2:      	ldr	r0, [sp, #0x20]
;         match $expression {
 80019f4:      	cbnz	r0, 0x8001a0e <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x6c> @ imm = #0x16
 80019f6:      	b	0x8001a16 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x74> @ imm = #0x1c
;             ([s], []) => Some(s),
 80019f8:      	ldr	r0, [sp, #0x10]
 80019fa:      	cmp	r0, #0x0
 80019fc:      	bne	0x80019dc <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x3a> @ imm = #-0x24
 80019fe:      	b	0x8001a00 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x5e> @ imm = #-0x2
 8001a00:      	ldr	r0, [sp, #0x8]
 8001a02:      	str	r0, [sp, #0x34]
 8001a04:      	ldr	r1, [r0]
 8001a06:      	ldr	r0, [r0, #0x4]
 8001a08:      	str	r1, [sp, #0x20]
 8001a0a:      	str	r0, [sp, #0x24]
 8001a0c:      	b	0x80019ee <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x4c> @ imm = #-0x22
 8001a0e:      	movs	r0, #0x1
;             $pattern $(if $guard)? => true,
 8001a10:      	strb	r0, [r7, #-69]
 8001a14:      	b	0x8001a1e <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x7c> @ imm = #0x6
 8001a16:      	movs	r0, #0x0
;             _ => false
 8001a18:      	strb	r0, [r7, #-69]
 8001a1c:      	b	0x8001a1e <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x7c> @ imm = #-0x2
 8001a1e:      	movs	r0, #0x0
;         if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
 8001a20:      	strb	r0, [r7, #-49]
 8001a24:      	ldrb	r0, [r7, #-49]
 8001a28:      	lsls	r0, r0, #0x1f
 8001a2a:      	cbnz	r0, 0x8001a30 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x8e> @ imm = #0x2
 8001a2c:      	b	0x8001a2e <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x8c> @ imm = #-0x2
;                 if let Some(s) = args.as_statically_known_str() {
 8001a2e:      	b	0x8001a3e <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x9c> @ imm = #0xc
;         if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
 8001a30:      	ldr	r1, [sp, #0x20]
 8001a32:      	ldr	r0, [sp, #0x24]
 8001a34:      	str	r1, [sp, #0x18]
 8001a36:      	str	r0, [sp, #0x1c]
;                 if let Some(s) = args.as_statically_known_str() {
 8001a38:      	ldr	r0, [sp, #0x18]
 8001a3a:      	cbnz	r0, 0x8001a60 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0xbe> @ imm = #0x22
 8001a3c:      	b	0x8001a3e <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0x9c> @ imm = #-0x2
 8001a3e:      	ldr	r0, [sp, #0x4]
 8001a40:      	ldr	r3, [sp]
 8001a42:      	add	r2, sp, #0x48
;                     write(self, args)
 8001a44:      	mov	r1, r2
 8001a46:      	ldm.w	r3, {r4, r5, r6, r8, r12, lr}
 8001a4a:      	stm.w	r1, {r4, r5, r6, r8, r12, lr}
 8001a4e:      	movw	r1, #0x3b4c
 8001a52:      	movt	r1, #0x800
 8001a56:      	bl	0x80023ec <core::fmt::write::h12ffdcfc6d6a0c0c> @ imm = #0x992
 8001a5a:      	strb	r0, [r7, #-89]
;                 if let Some(s) = args.as_statically_known_str() {
 8001a5e:      	b	0x8001a74 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0xd2> @ imm = #0x12
 8001a60:      	ldr	r0, [sp, #0x4]
 8001a62:      	ldr	r1, [sp, #0x18]
 8001a64:      	ldr	r2, [sp, #0x1c]
 8001a66:      	str	r1, [sp, #0x40]
 8001a68:      	str	r2, [sp, #0x44]
;                     self.write_str(s)
 8001a6a:      	bl	0x800197a <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9f6613e3984fcc50> @ imm = #-0xf4
 8001a6e:      	strb	r0, [r7, #-89]
 8001a72:      	b	0x8001a74 <<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt::hf77713640c23b588+0xd2> @ imm = #-0x2
;             }
 8001a74:      	ldrb	r0, [r7, #-89]
 8001a78:      	and	r0, r0, #0x1
 8001a7c:      	add	sp, #0x60
 8001a7e:      	ldr	r8, [sp], #4
 8001a82:      	pop	{r4, r5, r6, r7, pc}

08001a84 <cortex_m::itm::write_fmt::hf0dbb80395ad9358>:
; pub fn write_fmt(port: &mut Stim, args: fmt::Arguments) {
 8001a84:      	push	{r4, r5, r6, r7, lr}
 8001a86:      	add	r7, sp, #0xc
 8001a88:      	str	r11, [sp, #-4]!
 8001a8c:      	sub	sp, #0x20
 8001a8e:      	mov	r2, r1
 8001a90:      	str	r0, [sp, #0x4]
;     Port(port).write_fmt(args).ok();
 8001a92:      	str	r0, [sp]
 8001a94:      	add	r1, sp, #0x8
 8001a96:      	mov	r0, r1
 8001a98:      	ldm.w	r2, {r3, r4, r5, r6, r12, lr}
 8001a9c:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8001aa0:      	mov	r0, sp
 8001aa2:      	bl	0x800167a <core::fmt::Write::write_fmt::hb9d24a7b100cf871> @ imm = #-0x42c
 8001aa6:      	bl	0x8001942 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h3a504f6fb4f8d7c4E> @ imm = #-0x168
; }
 8001aaa:      	add	sp, #0x20
 8001aac:      	ldr	r11, [sp], #4
 8001ab0:      	pop	{r4, r5, r6, r7, pc}

08001ab2 <cortex_m::interrupt::disable::h6a9957978400c4a3>:
; pub fn disable() {
 8001ab2:      	push	{r7, lr}
 8001ab4:      	mov	r7, sp
;                     $func($($args),*)
 8001ab6:      	bl	0x8002278 <__cpsid>     @ imm = #0x7be
; }
 8001aba:      	pop	{r7, pc}

08001abc <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 8001abc:      	push	{r7, lr}
 8001abe:      	mov	r7, sp
 8001ac0:      	sub	sp, #0x58
 8001ac2:      	str	r0, [sp, #0xc]
;     interrupt::disable();
 8001ac4:      	bl	0x8001ab2 <cortex_m::interrupt::disable::h6a9957978400c4a3> @ imm = #-0x16
 8001ac8:      	mov.w	r0, #0xe0000000
;     let itm = unsafe { &mut *ITM::ptr() };
 8001acc:      	str	r0, [sp, #0x4]
 8001ace:      	str	r0, [sp, #0x3c]
;     let stim = &mut itm.stim[0];
 8001ad0:      	str	r0, [sp, #0x40]
 8001ad2:      	add	r1, sp, #0xc
 8001ad4:      	str	r1, [sp, #0x4c]
;         Self::new(x, Display::fmt)
 8001ad6:      	movw	r0, #0x162f
 8001ada:      	movt	r0, #0x800
 8001ade:      	str	r0, [sp, #0x50]
;         unsafe { NonNull { pointer: r as *const T } }
 8001ae0:      	str	r1, [sp, #0x54]
;             ty: ArgumentType::Placeholder {
 8001ae2:      	str	r1, [sp, #0x44]
 8001ae4:      	str	r0, [sp, #0x48]
;         Argument {
 8001ae6:      	ldr	r0, [sp, #0x44]
 8001ae8:      	ldr	r1, [sp, #0x48]
 8001aea:      	str	r1, [sp, #0x34]
 8001aec:      	str	r0, [sp, #0x30]
;     iprintln!(stim, "{}", info);
 8001aee:      	ldr	r0, [sp, #0x30]
 8001af0:      	ldr	r1, [sp, #0x34]
 8001af2:      	str	r1, [sp, #0x2c]
 8001af4:      	str	r0, [sp, #0x28]
 8001af6:      	movw	r1, #0x3b68
 8001afa:      	movt	r1, #0x800
 8001afe:      	add	r0, sp, #0x10
 8001b00:      	str	r0, [sp, #0x8]
 8001b02:      	add	r2, sp, #0x28
 8001b04:      	bl	0x800168a <core::fmt::Arguments::new_v1::ha1b8ee3b4cd5f329> @ imm = #-0x47e
 8001b08:      	ldr	r0, [sp, #0x4]
 8001b0a:      	ldr	r1, [sp, #0x8]
 8001b0c:      	bl	0x8001a84 <cortex_m::itm::write_fmt::hf0dbb80395ad9358> @ imm = #-0x8c
 8001b10:      	b	0x8001b12 <rust_begin_unwind+0x56> @ imm = #-0x2
 8001b12:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8001b14:      	strb	r0, [r7, #-29]
 8001b18:      	ldrb	r0, [r7, #-29]
 8001b1c:      	bl	0x80017d4 <core::sync::atomic::compiler_fence::hdb325c49c4bbe1fc> @ imm = #-0x34c
 8001b20:      	b	0x8001b12 <rust_begin_unwind+0x56> @ imm = #-0x12

08001b22 <<usize as core::iter::range::Step>::forward_unchecked::h509e212e87017ffd>:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
 8001b22:      	push	{r7, lr}
 8001b24:      	mov	r7, sp
 8001b26:      	sub	sp, #0x10
 8001b28:      	str	r1, [sp]
 8001b2a:      	str	r0, [sp, #0x4]
 8001b2c:      	str	r0, [sp, #0x8]
 8001b2e:      	str	r1, [sp, #0xc]
;             if ::core::ub_checks::$kind() {
 8001b30:      	b	0x8001b32 <<usize as core::iter::range::Step>::forward_unchecked::h509e212e87017ffd+0x10> @ imm = #-0x2
;                 precondition_check($($arg,)*);
 8001b32:      	ldr	r1, [sp]
 8001b34:      	ldr	r0, [sp, #0x4]
 8001b36:      	bl	0x8001b46 <core::num::<impl usize>::unchecked_add::precondition_check::hef0836615403e4b3> @ imm = #0xc
 8001b3a:      	b	0x8001b3c <<usize as core::iter::range::Step>::forward_unchecked::h509e212e87017ffd+0x1a> @ imm = #-0x2
;                 intrinsics::unchecked_add(self, rhs)
 8001b3c:      	ldr	r0, [sp, #0x4]
 8001b3e:      	ldr	r1, [sp]
 8001b40:      	add	r0, r1
;         }
 8001b42:      	add	sp, #0x10
 8001b44:      	pop	{r7, pc}

08001b46 <core::num::<impl usize>::unchecked_add::precondition_check::hef0836615403e4b3>:
;             const fn precondition_check($($name:$ty),*) {
 8001b46:      	push	{r7, lr}
 8001b48:      	mov	r7, sp
 8001b4a:      	sub	sp, #0x18
 8001b4c:      	str	r1, [sp, #0x4]
 8001b4e:      	mov	r1, r0
 8001b50:      	ldr	r0, [sp, #0x4]
 8001b52:      	str	r1, [sp, #0x8]
 8001b54:      	str	r0, [sp, #0xc]
;             let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
 8001b56:      	adds	r0, r0, r1
 8001b58:      	mov.w	r2, #0x0
 8001b5c:      	adc	r2, r2, #0x0
 8001b60:      	str	r0, [sp, #0x10]
 8001b62:      	strb	r2, [r7, #-1]
 8001b66:      	cmp	r0, r1
;                 ) => !lhs.overflowing_add(rhs).1,
 8001b68:      	blo	0x8001b70 <core::num::<impl usize>::unchecked_add::precondition_check::hef0836615403e4b3+0x2a> @ imm = #0x4
 8001b6a:      	b	0x8001b6c <core::num::<impl usize>::unchecked_add::precondition_check::hef0836615403e4b3+0x26> @ imm = #-0x2
;             }
 8001b6c:      	add	sp, #0x18
 8001b6e:      	pop	{r7, pc}
;                     ::core::panicking::panic_nounwind(
 8001b70:      	movw	r0, #0x3b78
 8001b74:      	movt	r0, #0x800
 8001b78:      	movs	r1, #0x45
 8001b7a:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0x842

08001b7e <core::ptr::read_volatile::h434050a1f6636f1b>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
 8001b7e:      	push	{r7, lr}
 8001b80:      	mov	r7, sp
 8001b82:      	sub	sp, #0x10
 8001b84:      	str	r0, [sp, #0x4]
 8001b86:      	str	r0, [sp, #0x8]
;             if ::core::ub_checks::$kind() {
 8001b88:      	b	0x8001b8a <core::ptr::read_volatile::h434050a1f6636f1b+0xc> @ imm = #-0x2
;                 precondition_check($($arg,)*);
 8001b8a:      	ldr	r0, [sp, #0x4]
 8001b8c:      	movs	r1, #0x4
 8001b8e:      	movs	r2, #0x0
 8001b90:      	bl	0x8001ba2 <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e> @ imm = #0xe
;             if ::core::ub_checks::$kind() {
 8001b94:      	b	0x8001b96 <core::ptr::read_volatile::h434050a1f6636f1b+0x18> @ imm = #-0x2
;         intrinsics::volatile_load(src)
 8001b96:      	ldr	r0, [sp, #0x4]
 8001b98:      	ldr	r0, [r0]
 8001b9a:      	str	r0, [sp, #0xc]
 8001b9c:      	ldr	r0, [sp, #0xc]
; }
 8001b9e:      	add	sp, #0x10
 8001ba0:      	pop	{r7, pc}

08001ba2 <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e>:
;             const fn precondition_check($($name:$ty),*) {
 8001ba2:      	push	{r7, lr}
 8001ba4:      	mov	r7, sp
 8001ba6:      	sub	sp, #0x40
 8001ba8:      	str	r1, [sp, #0x4]
 8001baa:      	str	r0, [sp, #0x8]
 8001bac:      	mov	r3, r2
 8001bae:      	str	r3, [sp, #0xc]
 8001bb0:      	str	r0, [sp, #0x28]
 8001bb2:      	str	r1, [sp, #0x2c]
 8001bb4:      	strb	r2, [r7, #-13]
;     pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
 8001bb8:      	movw	r0, #0x3be8
 8001bbc:      	movt	r0, #0x800
 8001bc0:      	str	r0, [sp, #0x34]
 8001bc2:      	mov.w	r0, #0x55555555
;             return intrinsics::ctpop(self);
 8001bc6:      	and.w	r0, r0, r1, lsr #1
 8001bca:      	subs	r0, r1, r0
 8001bcc:      	mov.w	r1, #0x33333333
 8001bd0:      	and.w	r1, r1, r0, lsr #2
 8001bd4:      	bic	r0, r0, #0xcccccccc
 8001bd8:      	add	r0, r1
 8001bda:      	add.w	r0, r0, r0, lsr #4
 8001bde:      	bic	r0, r0, #0xf0f0f0f0
 8001be2:      	mov.w	r1, #0x1010101
 8001be6:      	muls	r0, r1, r0
 8001be8:      	lsrs	r0, r0, #0x18
 8001bea:      	str	r0, [sp, #0x38]
 8001bec:      	ldr	r0, [sp, #0x38]
;         if !align.is_power_of_two() {
 8001bee:      	cmp	r0, #0x1
 8001bf0:      	bne	0x8001c04 <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0x62> @ imm = #0x10
 8001bf2:      	b	0x8001bf4 <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0x52> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 8001bf4:      	ldr	r0, [sp, #0x8]
 8001bf6:      	ldr	r1, [sp, #0x4]
 8001bf8:      	mov	r2, r0
;         self.addr() & (align - 1) == 0
 8001bfa:      	str	r2, [sp]
 8001bfc:      	subs	r1, #0x1
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 8001bfe:      	tst	r0, r1
 8001c00:      	beq	0x8001c38 <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0x96> @ imm = #0x34
 8001c02:      	b	0x8001c40 <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0x9e> @ imm = #0x3a
;         Arguments { pieces, fmt: None, args: &[] }
 8001c04:      	movw	r0, #0x3be8
 8001c08:      	movt	r0, #0x800
 8001c0c:      	str	r0, [sp, #0x10]
 8001c0e:      	movs	r0, #0x1
 8001c10:      	str	r0, [sp, #0x14]
 8001c12:      	movw	r0, #0x35f8
 8001c16:      	movt	r0, #0x800
 8001c1a:      	ldr	r1, [r0]
 8001c1c:      	ldr	r0, [r0, #0x4]
 8001c1e:      	str	r1, [sp, #0x20]
 8001c20:      	str	r0, [sp, #0x24]
 8001c22:      	movs	r0, #0x4
 8001c24:      	str	r0, [sp, #0x18]
 8001c26:      	movs	r0, #0x0
 8001c28:      	str	r0, [sp, #0x1c]
;             panic!("is_aligned_to: align is not a power-of-two");
 8001c2a:      	movw	r1, #0x3cd8
 8001c2e:      	movt	r1, #0x800
 8001c32:      	add	r0, sp, #0x10
 8001c34:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #0x724
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 8001c38:      	ldr	r0, [sp, #0xc]
 8001c3a:      	lsls	r0, r0, #0x1f
 8001c3c:      	cbnz	r0, 0x8001c4c <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0xaa> @ imm = #0xc
 8001c3e:      	b	0x8001c42 <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0xa0> @ imm = #0x0
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
 8001c40:      	b	0x8001c4e <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0xac> @ imm = #0xa
;         let ptr = self as *const u8;
 8001c42:      	ldr	r0, [sp]
 8001c44:      	ldr	r1, [sp, #0x8]
 8001c46:      	str	r1, [sp, #0x3c]
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
 8001c48:      	cbnz	r0, 0x8001c5c <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0xba> @ imm = #0x10
 8001c4a:      	b	0x8001c4e <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0xac> @ imm = #0x0
 8001c4c:      	b	0x8001c5c <core::ptr::read_volatile::precondition_check::h43519cd7b61ac77e+0xba> @ imm = #0xc
;                     ::core::panicking::panic_nounwind(
 8001c4e:      	movw	r0, #0x3bf0
 8001c52:      	movt	r0, #0x800
 8001c56:      	movs	r1, #0x6e
 8001c58:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0x764
;             }
 8001c5c:      	add	sp, #0x40
 8001c5e:      	pop	{r7, pc}

08001c60 <core::ptr::write_volatile::h02b1c09a15955409>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 8001c60:      	push	{r7, lr}
 8001c62:      	mov	r7, sp
 8001c64:      	sub	sp, #0x10
 8001c66:      	str	r1, [sp]
 8001c68:      	str	r0, [sp, #0x4]
 8001c6a:      	str	r0, [sp, #0x8]
 8001c6c:      	str	r1, [sp, #0xc]
;             if ::core::ub_checks::$kind() {
 8001c6e:      	b	0x8001c70 <core::ptr::write_volatile::h02b1c09a15955409+0x10> @ imm = #-0x2
;                 precondition_check($($arg,)*);
 8001c70:      	ldr	r0, [sp, #0x4]
 8001c72:      	movs	r1, #0x4
 8001c74:      	movs	r2, #0x0
 8001c76:      	bl	0x8001cda <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120> @ imm = #0x60
;             if ::core::ub_checks::$kind() {
 8001c7a:      	b	0x8001c7c <core::ptr::write_volatile::h02b1c09a15955409+0x1c> @ imm = #-0x2
;         intrinsics::volatile_store(dst, src);
 8001c7c:      	ldr	r0, [sp]
 8001c7e:      	ldr	r1, [sp, #0x4]
 8001c80:      	str	r0, [r1]
; }
 8001c82:      	add	sp, #0x10
 8001c84:      	pop	{r7, pc}

08001c86 <core::ptr::write_volatile::h482d8877a3741cc6>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 8001c86:      	push	{r7, lr}
 8001c88:      	mov	r7, sp
 8001c8a:      	sub	sp, #0x10
 8001c8c:      	str	r0, [sp]
 8001c8e:      	mov	r2, r1
 8001c90:      	str	r2, [sp, #0x4]
 8001c92:      	str	r0, [sp, #0x8]
 8001c94:      	strh	r1, [r7, #-2]
;             if ::core::ub_checks::$kind() {
 8001c98:      	b	0x8001c9a <core::ptr::write_volatile::h482d8877a3741cc6+0x14> @ imm = #-0x2
;                 precondition_check($($arg,)*);
 8001c9a:      	ldr	r0, [sp]
 8001c9c:      	movs	r1, #0x2
 8001c9e:      	movs	r2, #0x0
 8001ca0:      	bl	0x8001cda <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120> @ imm = #0x36
;             if ::core::ub_checks::$kind() {
 8001ca4:      	b	0x8001ca6 <core::ptr::write_volatile::h482d8877a3741cc6+0x20> @ imm = #-0x2
;         intrinsics::volatile_store(dst, src);
 8001ca6:      	ldr	r0, [sp, #0x4]
 8001ca8:      	ldr	r1, [sp]
 8001caa:      	strh	r0, [r1]
; }
 8001cac:      	add	sp, #0x10
 8001cae:      	pop	{r7, pc}

08001cb0 <core::ptr::write_volatile::he26b6f621697aa10>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 8001cb0:      	push	{r7, lr}
 8001cb2:      	mov	r7, sp
 8001cb4:      	sub	sp, #0x10
 8001cb6:      	str	r0, [sp]
 8001cb8:      	mov	r2, r1
 8001cba:      	str	r2, [sp, #0x4]
 8001cbc:      	str	r0, [sp, #0x8]
 8001cbe:      	strb	r1, [r7, #-1]
;             if ::core::ub_checks::$kind() {
 8001cc2:      	b	0x8001cc4 <core::ptr::write_volatile::he26b6f621697aa10+0x14> @ imm = #-0x2
;                 precondition_check($($arg,)*);
 8001cc4:      	ldr	r0, [sp]
 8001cc6:      	movs	r1, #0x1
 8001cc8:      	movs	r2, #0x0
 8001cca:      	bl	0x8001cda <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120> @ imm = #0xc
;             if ::core::ub_checks::$kind() {
 8001cce:      	b	0x8001cd0 <core::ptr::write_volatile::he26b6f621697aa10+0x20> @ imm = #-0x2
;         intrinsics::volatile_store(dst, src);
 8001cd0:      	ldr	r0, [sp, #0x4]
 8001cd2:      	ldr	r1, [sp]
 8001cd4:      	strb	r0, [r1]
; }
 8001cd6:      	add	sp, #0x10
 8001cd8:      	pop	{r7, pc}

08001cda <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120>:
;             const fn precondition_check($($name:$ty),*) {
 8001cda:      	push	{r7, lr}
 8001cdc:      	mov	r7, sp
 8001cde:      	sub	sp, #0x48
 8001ce0:      	str	r1, [sp, #0x8]
 8001ce2:      	str	r0, [sp, #0xc]
 8001ce4:      	mov	r3, r2
 8001ce6:      	str	r3, [sp, #0x10]
 8001ce8:      	str	r0, [sp, #0x2c]
 8001cea:      	str	r1, [sp, #0x30]
 8001cec:      	strb	r2, [r7, #-17]
;     pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
 8001cf0:      	movw	r2, #0x3be8
 8001cf4:      	movt	r2, #0x800
 8001cf8:      	str	r2, [sp, #0x38]
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
 8001cfa:      	str	r0, [sp, #0x3c]
 8001cfc:      	mov.w	r0, #0x55555555
;             return intrinsics::ctpop(self);
 8001d00:      	and.w	r0, r0, r1, lsr #1
 8001d04:      	subs	r0, r1, r0
 8001d06:      	mov.w	r1, #0x33333333
 8001d0a:      	and.w	r1, r1, r0, lsr #2
 8001d0e:      	bic	r0, r0, #0xcccccccc
 8001d12:      	add	r0, r1
 8001d14:      	add.w	r0, r0, r0, lsr #4
 8001d18:      	bic	r0, r0, #0xf0f0f0f0
 8001d1c:      	mov.w	r1, #0x1010101
 8001d20:      	muls	r0, r1, r0
 8001d22:      	lsrs	r0, r0, #0x18
 8001d24:      	str	r0, [sp, #0x40]
 8001d26:      	ldr	r0, [sp, #0x40]
;         if !align.is_power_of_two() {
 8001d28:      	cmp	r0, #0x1
 8001d2a:      	bne	0x8001d3e <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0x64> @ imm = #0x10
 8001d2c:      	b	0x8001d2e <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0x54> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 8001d2e:      	ldr	r0, [sp, #0xc]
 8001d30:      	ldr	r1, [sp, #0x8]
 8001d32:      	mov	r2, r0
;         self.addr() & (align - 1) == 0
 8001d34:      	str	r2, [sp, #0x4]
 8001d36:      	subs	r1, #0x1
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 8001d38:      	tst	r0, r1
 8001d3a:      	beq	0x8001d72 <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0x98> @ imm = #0x34
 8001d3c:      	b	0x8001d7a <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0xa0> @ imm = #0x3a
;         Arguments { pieces, fmt: None, args: &[] }
 8001d3e:      	movw	r0, #0x3be8
 8001d42:      	movt	r0, #0x800
 8001d46:      	str	r0, [sp, #0x14]
 8001d48:      	movs	r0, #0x1
 8001d4a:      	str	r0, [sp, #0x18]
 8001d4c:      	movw	r0, #0x35f8
 8001d50:      	movt	r0, #0x800
 8001d54:      	ldr	r1, [r0]
 8001d56:      	ldr	r0, [r0, #0x4]
 8001d58:      	str	r1, [sp, #0x24]
 8001d5a:      	str	r0, [sp, #0x28]
 8001d5c:      	movs	r0, #0x4
 8001d5e:      	str	r0, [sp, #0x1c]
 8001d60:      	movs	r0, #0x0
 8001d62:      	str	r0, [sp, #0x20]
;             panic!("is_aligned_to: align is not a power-of-two");
 8001d64:      	movw	r1, #0x3cd8
 8001d68:      	movt	r1, #0x800
 8001d6c:      	add	r0, sp, #0x14
 8001d6e:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #0x5ea
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 8001d72:      	ldr	r0, [sp, #0x10]
 8001d74:      	lsls	r0, r0, #0x1f
 8001d76:      	cbnz	r0, 0x8001d86 <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0xac> @ imm = #0xc
 8001d78:      	b	0x8001d7c <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0xa2> @ imm = #0x0
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
 8001d7a:      	b	0x8001d88 <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0xae> @ imm = #0xa
;         let ptr = self as *const u8;
 8001d7c:      	ldr	r0, [sp, #0x4]
 8001d7e:      	ldr	r1, [sp, #0xc]
 8001d80:      	str	r1, [sp, #0x44]
;             ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
 8001d82:      	cbnz	r0, 0x8001d96 <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0xbc> @ imm = #0x10
 8001d84:      	b	0x8001d88 <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0xae> @ imm = #0x0
 8001d86:      	b	0x8001d96 <core::ptr::write_volatile::precondition_check::h664df5b9db1d1120+0xbc> @ imm = #0xc
;                     ::core::panicking::panic_nounwind(
 8001d88:      	movw	r0, #0x3ce8
 8001d8c:      	movt	r0, #0x800
 8001d90:      	movs	r1, #0x6f
 8001d92:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0x62a
;             }
 8001d96:      	add	sp, #0x48
 8001d98:      	pop	{r7, pc}

08001d9a <core::ptr::read::hb12351fbef1bf5f4>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 8001d9a:      	sub	sp, #0x4
 8001d9c:      	str	r0, [sp]
;         crate::intrinsics::read_via_copy(src)
 8001d9e:      	ldr	r0, [r0]
; }
 8001da0:      	add	sp, #0x4
 8001da2:      	bx	lr

08001da4 <core::ptr::read::hb5d2917f2627e021>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 8001da4:      	sub	sp, #0x4
 8001da6:      	str	r0, [sp]
; }
 8001da8:      	ldrh	r0, [r0]
 8001daa:      	add	sp, #0x4
 8001dac:      	bx	lr

08001dae <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5>:
;             const fn precondition_check($($name:$ty),*) {
 8001dae:      	push	{r7, lr}
 8001db0:      	mov	r7, sp
 8001db2:      	sub	sp, #0x40
 8001db4:      	mov	r3, r2
 8001db6:      	mov	r2, r1
 8001db8:      	str	r0, [sp, #0x4]
 8001dba:      	str	r0, [sp, #0xc]
 8001dbc:      	str	r2, [sp, #0x10]
 8001dbe:      	str	r3, [sp, #0x14]
;                     let Some(byte_offset) = count.checked_mul(size as isize) else {
 8001dc0:      	str	r3, [sp, #0x18]
;             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
 8001dc2:      	smull	r1, r0, r2, r3
 8001dc6:      	smmul	r2, r2, r3
 8001dca:      	subs.w	r2, r2, r1, asr #31
 8001dce:      	it	ne
 8001dd0:      	movne	r2, #0x1
 8001dd2:      	mov	r3, r1
 8001dd4:      	str	r3, [sp, #0x8]
 8001dd6:      	str	r1, [sp, #0x1c]
 8001dd8:      	strb	r2, [r7, #-29]
;             (a as Self, b)
 8001ddc:      	str	r1, [sp, #0x24]
;             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
 8001dde:      	cmp.w	r0, r1, asr #31
;     if b {
 8001de2:      	bne	0x8001e10 <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5+0x62> @ imm = #0x2a
 8001de4:      	b	0x8001de6 <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5+0x38> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 8001de6:      	ldr	r2, [sp, #0x8]
 8001de8:      	ldr	r0, [sp, #0x4]
 8001dea:      	str	r0, [sp, #0x28]
;             let (res, overflowed) = self.overflowing_add(rhs as Self);
 8001dec:      	str	r2, [sp, #0x2c]
;             let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
 8001dee:      	adds	r3, r0, r2
 8001df0:      	mov.w	r1, #0x0
 8001df4:      	adc	r0, r1, #0x0
 8001df8:      	str	r3, [sp, #0x30]
 8001dfa:      	strb	r0, [r7, #-9]
;             (a as Self, b)
 8001dfe:      	str	r3, [sp, #0x38]
;             (res, overflowed ^ (rhs < 0))
 8001e00:      	cmp	r2, #0x0
 8001e02:      	it	mi
 8001e04:      	movmi	r1, #0x1
 8001e06:      	eors	r0, r1
 8001e08:      	strb	r0, [r7, #-1]
;             ) => runtime_offset_nowrap(this, count, size)
 8001e0c:      	cbz	r0, 0x8001e20 <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5+0x72> @ imm = #0x10
 8001e0e:      	b	0x8001e12 <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5+0x64> @ imm = #0x0
 8001e10:      	b	0x8001e12 <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5+0x64> @ imm = #-0x2
;                     ::core::panicking::panic_nounwind(
 8001e12:      	movw	r0, #0x3d57
 8001e16:      	movt	r0, #0x800
 8001e1a:      	movs	r1, #0x5d
 8001e1c:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0x5a0
;             }
 8001e20:      	add	sp, #0x40
 8001e22:      	pop	{r7, pc}

08001e24 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h109aa65662a7f64e>:
;     fn next(&mut self) -> Option<A> {
 8001e24:      	push	{r7, lr}
 8001e26:      	mov	r7, sp
 8001e28:      	sub	sp, #0x8
 8001e2a:      	str	r0, [sp, #0x4]
;         self.spec_next()
 8001e2c:      	bl	0x8001f90 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h8c6b3deeef9d7978> @ imm = #0x160
;     }
 8001e30:      	add	sp, #0x8
 8001e32:      	pop	{r7, pc}

08001e34 <core::slice::raw::from_raw_parts::h54fd25d2a0daa780>:
; pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
 8001e34:      	push	{r7, lr}
 8001e36:      	mov	r7, sp
 8001e38:      	sub	sp, #0x10
 8001e3a:      	str	r1, [sp]
 8001e3c:      	str	r0, [sp, #0x4]
 8001e3e:      	str	r0, [sp, #0x8]
 8001e40:      	str	r1, [sp, #0xc]
;             if ::core::ub_checks::$kind() {
 8001e42:      	b	0x8001e44 <core::slice::raw::from_raw_parts::h54fd25d2a0daa780+0x10> @ imm = #-0x2
;                 precondition_check($($arg,)*);
 8001e44:      	ldr	r3, [sp]
 8001e46:      	ldr	r0, [sp, #0x4]
 8001e48:      	movs	r2, #0x4
 8001e4a:      	mov	r1, r2
 8001e4c:      	bl	0x8001e80 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239> @ imm = #0x30
;             if ::core::ub_checks::$kind() {
 8001e50:      	b	0x8001e52 <core::slice::raw::from_raw_parts::h54fd25d2a0daa780+0x1e> @ imm = #-0x2
; }
 8001e52:      	ldr	r1, [sp]
 8001e54:      	ldr	r0, [sp, #0x4]
 8001e56:      	add	sp, #0x10
 8001e58:      	pop	{r7, pc}

08001e5a <core::slice::raw::from_raw_parts::hd7e622b90155d603>:
; pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
 8001e5a:      	push	{r7, lr}
 8001e5c:      	mov	r7, sp
 8001e5e:      	sub	sp, #0x10
 8001e60:      	str	r1, [sp]
 8001e62:      	str	r0, [sp, #0x4]
 8001e64:      	str	r0, [sp, #0x8]
 8001e66:      	str	r1, [sp, #0xc]
;             if ::core::ub_checks::$kind() {
 8001e68:      	b	0x8001e6a <core::slice::raw::from_raw_parts::hd7e622b90155d603+0x10> @ imm = #-0x2
;                 precondition_check($($arg,)*);
 8001e6a:      	ldr	r3, [sp]
 8001e6c:      	ldr	r0, [sp, #0x4]
 8001e6e:      	movs	r2, #0x1
 8001e70:      	mov	r1, r2
 8001e72:      	bl	0x8001e80 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239> @ imm = #0xa
;             if ::core::ub_checks::$kind() {
 8001e76:      	b	0x8001e78 <core::slice::raw::from_raw_parts::hd7e622b90155d603+0x1e> @ imm = #-0x2
; }
 8001e78:      	ldr	r1, [sp]
 8001e7a:      	ldr	r0, [sp, #0x4]
 8001e7c:      	add	sp, #0x10
 8001e7e:      	pop	{r7, pc}

08001e80 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239>:
;             const fn precondition_check($($name:$ty),*) {
 8001e80:      	push	{r7, lr}
 8001e82:      	mov	r7, sp
 8001e84:      	sub	sp, #0x58
 8001e86:      	str	r3, [sp, #0x8]
 8001e88:      	str	r2, [sp, #0xc]
 8001e8a:      	str	r1, [sp, #0x10]
 8001e8c:      	str	r0, [sp, #0x14]
 8001e8e:      	str	r0, [sp, #0x34]
 8001e90:      	str	r1, [sp, #0x38]
 8001e92:      	str	r2, [sp, #0x3c]
 8001e94:      	str	r3, [sp, #0x40]
 8001e96:      	movs	r1, #0x0
;     is_zst: bool,
 8001e98:      	strb	r1, [r7, #-18]
;         fn runtime($($arg: $ty),*) $( -> $ret )? {
 8001e9c:      	strb	r1, [r7, #-17]
;     pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
 8001ea0:      	movw	r1, #0x3be8
 8001ea4:      	movt	r1, #0x800
 8001ea8:      	str	r1, [sp, #0x48]
;             ub_checks::maybe_is_aligned_and_not_null(data, align, false)
 8001eaa:      	str	r0, [sp, #0x4c]
 8001eac:      	mov.w	r0, #0x55555555
;             return intrinsics::ctpop(self);
 8001eb0:      	and.w	r0, r0, r2, lsr #1
 8001eb4:      	subs	r0, r2, r0
 8001eb6:      	mov.w	r1, #0x33333333
 8001eba:      	and.w	r1, r1, r0, lsr #2
 8001ebe:      	bic	r0, r0, #0xcccccccc
 8001ec2:      	add	r0, r1
 8001ec4:      	add.w	r0, r0, r0, lsr #4
 8001ec8:      	bic	r0, r0, #0xf0f0f0f0
 8001ecc:      	mov.w	r1, #0x1010101
 8001ed0:      	muls	r0, r1, r0
 8001ed2:      	lsrs	r0, r0, #0x18
 8001ed4:      	str	r0, [sp, #0x50]
 8001ed6:      	ldr	r0, [sp, #0x50]
;         if !align.is_power_of_two() {
 8001ed8:      	cmp	r0, #0x1
 8001eda:      	bne	0x8001eee <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0x6e> @ imm = #0x10
 8001edc:      	b	0x8001ede <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0x5e> @ imm = #-0x2
;         unsafe { mem::transmute(self.cast::<()>()) }
 8001ede:      	ldr	r0, [sp, #0x14]
 8001ee0:      	ldr	r1, [sp, #0xc]
 8001ee2:      	mov	r2, r0
;         self.addr() & (align - 1) == 0
 8001ee4:      	str	r2, [sp, #0x4]
 8001ee6:      	subs	r1, #0x1
;             ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
 8001ee8:      	tst	r0, r1
 8001eea:      	beq	0x8001f22 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xa2> @ imm = #0x34
 8001eec:      	b	0x8001f2c <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xac> @ imm = #0x3c
;         Arguments { pieces, fmt: None, args: &[] }
 8001eee:      	movw	r0, #0x3be8
 8001ef2:      	movt	r0, #0x800
 8001ef6:      	str	r0, [sp, #0x18]
 8001ef8:      	movs	r0, #0x1
 8001efa:      	str	r0, [sp, #0x1c]
 8001efc:      	movw	r0, #0x35f8
 8001f00:      	movt	r0, #0x800
 8001f04:      	ldr	r1, [r0]
 8001f06:      	ldr	r0, [r0, #0x4]
 8001f08:      	str	r1, [sp, #0x28]
 8001f0a:      	str	r0, [sp, #0x2c]
 8001f0c:      	movs	r0, #0x4
 8001f0e:      	str	r0, [sp, #0x20]
 8001f10:      	movs	r0, #0x0
 8001f12:      	str	r0, [sp, #0x24]
;             panic!("is_aligned_to: align is not a power-of-two");
 8001f14:      	movw	r1, #0x3cd8
 8001f18:      	movt	r1, #0x800
 8001f1c:      	add	r0, sp, #0x18
 8001f1e:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #0x43a
;         let ptr = self as *const u8;
 8001f22:      	ldr	r0, [sp, #0x4]
 8001f24:      	ldr	r1, [sp, #0x14]
 8001f26:      	str	r1, [sp, #0x54]
;             ub_checks::maybe_is_aligned_and_not_null(data, align, false)
 8001f28:      	cbnz	r0, 0x8001f30 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xb0> @ imm = #0x4
 8001f2a:      	b	0x8001f2e <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xae> @ imm = #0x0
 8001f2c:      	b	0x8001f2e <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xae> @ imm = #-0x2
 8001f2e:      	b	0x8001f78 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xf8> @ imm = #0x46
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
 8001f30:      	ldr	r0, [sp, #0x10]
 8001f32:      	clz	r1, r0
 8001f36:      	lsrs	r1, r1, #0x5
 8001f38:      	str	r1, [sp]
 8001f3a:      	cbnz	r0, 0x8001f46 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xc6> @ imm = #0x8
 8001f3c:      	b	0x8001f3e <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xbe> @ imm = #-0x2
 8001f3e:      	mov.w	r0, #0xffffffff
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
 8001f42:      	str	r0, [sp, #0x30]
 8001f44:      	b	0x8001f4e <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xce> @ imm = #0x6
 8001f46:      	ldr	r0, [sp]
 8001f48:      	lsls	r0, r0, #0x1f
 8001f4a:      	cbnz	r0, 0x8001f66 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xe6> @ imm = #0x18
 8001f4c:      	b	0x8001f58 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xd8> @ imm = #0x8
;     len <= max_len
 8001f4e:      	ldr	r0, [sp, #0x8]
 8001f50:      	ldr	r1, [sp, #0x30]
;                 && ub_checks::is_valid_allocation_size(size, len)
 8001f52:      	cmp	r0, r1
 8001f54:      	bls	0x8001f74 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xf4> @ imm = #0x1c
 8001f56:      	b	0x8001f72 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xf2> @ imm = #0x18
 8001f58:      	ldr	r1, [sp, #0x10]
 8001f5a:      	mvn	r0, #0x80000000
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
 8001f5e:      	udiv	r0, r0, r1
 8001f62:      	str	r0, [sp, #0x30]
 8001f64:      	b	0x8001f4e <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xce> @ imm = #-0x1a
 8001f66:      	movw	r0, #0x3e28
 8001f6a:      	movt	r0, #0x800
 8001f6e:      	bl	0x8003052 <core::panicking::panic_const::panic_const_div_by_zero::hecbc72778d74a986> @ imm = #0x10e0
 8001f72:      	b	0x8001f78 <core::slice::raw::from_raw_parts::precondition_check::h65434c2a9d50b239+0xf8> @ imm = #0x2
;             }
 8001f74:      	add	sp, #0x58
 8001f76:      	pop	{r7, pc}
;                     ::core::panicking::panic_nounwind(
 8001f78:      	movw	r0, #0x3e38
 8001f7c:      	movt	r0, #0x800
 8001f80:      	movs	r1, #0xa2
 8001f82:      	bl	0x80023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e> @ imm = #0x43a

08001f86 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h5e832799a811ce31>:
;     fn into_iter(self) -> I {
 8001f86:      	sub	sp, #0x8
 8001f88:      	str	r0, [sp]
 8001f8a:      	str	r1, [sp, #0x4]
;     }
 8001f8c:      	add	sp, #0x8
 8001f8e:      	bx	lr

08001f90 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h8c6b3deeef9d7978>:
;     fn spec_next(&mut self) -> Option<T> {
 8001f90:      	push	{r7, lr}
 8001f92:      	mov	r7, sp
 8001f94:      	sub	sp, #0x28
 8001f96:      	mov	r1, r0
 8001f98:      	str	r1, [sp, #0xc]
 8001f9a:      	str	r1, [sp, #0x18]
;         if self.start < self.end {
 8001f9c:      	adds	r0, r1, #0x4
 8001f9e:      	str	r1, [sp, #0x20]
 8001fa0:      	str	r0, [sp, #0x24]
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
 8001fa2:      	ldr	r0, [r1]
 8001fa4:      	ldr	r1, [r1, #0x4]
;         if self.start < self.end {
 8001fa6:      	cmp	r0, r1
 8001fa8:      	blo	0x8001fb2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h8c6b3deeef9d7978+0x22> @ imm = #0x6
 8001faa:      	b	0x8001fac <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h8c6b3deeef9d7978+0x1c> @ imm = #-0x2
 8001fac:      	movs	r0, #0x0
;             None
 8001fae:      	str	r0, [sp, #0x10]
;         if self.start < self.end {
 8001fb0:      	b	0x8001fd2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h8c6b3deeef9d7978+0x42> @ imm = #0x1e
;             let old = self.start;
 8001fb2:      	ldr	r0, [sp, #0xc]
 8001fb4:      	ldr	r0, [r0]
 8001fb6:      	str	r0, [sp, #0x4]
 8001fb8:      	str	r0, [sp, #0x1c]
 8001fba:      	movs	r1, #0x1
;             self.start = unsafe { Step::forward_unchecked(old, 1) };
 8001fbc:      	str	r1, [sp, #0x8]
 8001fbe:      	bl	0x8001b22 <<usize as core::iter::range::Step>::forward_unchecked::h509e212e87017ffd> @ imm = #-0x4a0
 8001fc2:      	ldr	r3, [sp, #0xc]
 8001fc4:      	ldr	r1, [sp, #0x4]
 8001fc6:      	mov	r2, r0
 8001fc8:      	ldr	r0, [sp, #0x8]
 8001fca:      	str	r2, [r3]
;             Some(old)
 8001fcc:      	str	r1, [sp, #0x14]
 8001fce:      	str	r0, [sp, #0x10]
;         if self.start < self.end {
 8001fd0:      	b	0x8001fd2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h8c6b3deeef9d7978+0x42> @ imm = #-0x2
;     }
 8001fd2:      	ldr	r0, [sp, #0x10]
 8001fd4:      	ldr	r1, [sp, #0x14]
 8001fd6:      	add	sp, #0x28
 8001fd8:      	pop	{r7, pc}

08001fda <cortex_m::itm::write_words::ha3a49af0243facb5>:
; unsafe fn write_words(stim: &mut Stim, bytes: &[u32]) {
 8001fda:      	push	{r7, lr}
 8001fdc:      	mov	r7, sp
 8001fde:      	sub	sp, #0x40
 8001fe0:      	str	r2, [sp, #0x4]
 8001fe2:      	mov	r2, r1
 8001fe4:      	ldr	r1, [sp, #0x4]
 8001fe6:      	str	r2, [sp, #0x8]
 8001fe8:      	mov	r2, r0
 8001fea:      	ldr	r0, [sp, #0x8]
 8001fec:      	str	r2, [sp, #0xc]
 8001fee:      	str	r2, [sp, #0x24]
 8001ff0:      	str	r0, [sp, #0x28]
 8001ff2:      	str	r1, [sp, #0x2c]
 8001ff4:      	str	r0, [sp, #0x38]
 8001ff6:      	str	r1, [sp, #0x3c]
;     let mut p = bytes.as_ptr();
 8001ff8:      	str	r0, [sp, #0x10]
 8001ffa:      	movs	r0, #0x0
;     for _ in 0..bytes.len() {
 8001ffc:      	bl	0x8001f86 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h5e832799a811ce31> @ imm = #-0x7a
 8002000:      	str	r0, [sp, #0x14]
 8002002:      	str	r1, [sp, #0x18]
 8002004:      	b	0x8002006 <cortex_m::itm::write_words::ha3a49af0243facb5+0x2c> @ imm = #-0x2
 8002006:      	add	r0, sp, #0x14
;     for _ in 0..bytes.len() {
 8002008:      	bl	0x8001e24 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h109aa65662a7f64e> @ imm = #-0x1e8
 800200c:      	str	r0, [sp, #0x1c]
 800200e:      	str	r1, [sp, #0x20]
 8002010:      	ldr	r0, [sp, #0x1c]
 8002012:      	cbnz	r0, 0x800201a <cortex_m::itm::write_words::ha3a49af0243facb5+0x40> @ imm = #0x4
 8002014:      	b	0x8002016 <cortex_m::itm::write_words::ha3a49af0243facb5+0x3c> @ imm = #-0x2
; }
 8002016:      	add	sp, #0x40
 8002018:      	pop	{r7, pc}
;         while !stim.is_fifo_ready() {}
 800201a:      	ldr	r0, [sp, #0xc]
 800201c:      	bl	0x8002262 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h6715dfba60264f58> @ imm = #0x242
 8002020:      	cmp	r0, #0x0
 8002022:      	beq	0x800201a <cortex_m::itm::write_words::ha3a49af0243facb5+0x40> @ imm = #-0xc
 8002024:      	b	0x8002026 <cortex_m::itm::write_words::ha3a49af0243facb5+0x4c> @ imm = #-0x2
;         stim.write_u32(ptr::read(p));
 8002026:      	ldr	r0, [sp, #0x10]
 8002028:      	bl	0x8001d9a <core::ptr::read::hb12351fbef1bf5f4> @ imm = #-0x292
 800202c:      	mov	r1, r0
 800202e:      	ldr	r0, [sp, #0xc]
 8002030:      	bl	0x800224e <cortex_m::peripheral::itm::Stim::write_u32::he7a4b87d1ba0dac0> @ imm = #0x21a
;         p = p.offset(1);
 8002034:      	ldr	r0, [sp, #0x10]
 8002036:      	str	r0, [sp]
 8002038:      	str	r0, [sp, #0x30]
 800203a:      	movs	r1, #0x1
 800203c:      	str	r1, [sp, #0x34]
 800203e:      	movs	r2, #0x4
;                 precondition_check($($arg,)*);
 8002040:      	bl	0x8001dae <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5> @ imm = #-0x296
 8002044:      	ldr	r0, [sp]
;         unsafe { intrinsics::offset(self, count) }
 8002046:      	adds	r0, #0x4
;         p = p.offset(1);
 8002048:      	str	r0, [sp, #0x10]
;     for _ in 0..bytes.len() {
 800204a:      	b	0x8002006 <cortex_m::itm::write_words::ha3a49af0243facb5+0x2c> @ imm = #-0x48

0800204c <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a>:
; unsafe fn write_aligned_impl(port: &mut Stim, buffer: &[u8]) {
 800204c:      	push	{r7, lr}
 800204e:      	mov	r7, sp
 8002050:      	sub	sp, #0x58
 8002052:      	str	r2, [sp, #0x10]
 8002054:      	str	r1, [sp, #0x14]
 8002056:      	str	r0, [sp, #0x18]
 8002058:      	str	r0, [sp, #0x24]
 800205a:      	str	r1, [sp, #0x28]
 800205c:      	str	r2, [sp, #0x2c]
;     let len = buffer.len();
 800205e:      	str	r2, [sp, #0x30]
;     if len == 0 {
 8002060:      	cbnz	r2, 0x8002068 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x1c> @ imm = #0x4
 8002062:      	b	0x8002064 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x18> @ imm = #-0x2
; }
 8002064:      	add	sp, #0x58
 8002066:      	pop	{r7, pc}
;     let split = len & !0b11;
 8002068:      	ldr	r0, [sp, #0x14]
 800206a:      	ldr	r1, [sp, #0x10]
 800206c:      	bic	r2, r1, #0x3
 8002070:      	str	r2, [sp, #0xc]
 8002072:      	str	r2, [sp, #0x34]
 8002074:      	str	r0, [sp, #0x50]
 8002076:      	str	r1, [sp, #0x54]
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 8002078:      	lsrs	r1, r1, #0x2
 800207a:      	bl	0x8001e34 <core::slice::raw::from_raw_parts::h54fd25d2a0daa780> @ imm = #-0x24a
 800207e:      	mov	r2, r0
 8002080:      	ldr	r0, [sp, #0x18]
 8002082:      	str	r2, [sp, #0x8]
 8002084:      	mov	r2, r1
;     write_words(
 8002086:      	ldr	r1, [sp, #0x8]
 8002088:      	bl	0x8001fda <cortex_m::itm::write_words::ha3a49af0243facb5> @ imm = #-0xb2
 800208c:      	ldr	r2, [sp, #0x10]
 800208e:      	ldr	r1, [sp, #0xc]
 8002090:      	ldr	r0, [sp, #0x14]
;     let mut left = len & 0b11;
 8002092:      	and	r3, r2, #0x3
 8002096:      	str	r3, [sp, #0x1c]
 8002098:      	str	r0, [sp, #0x48]
 800209a:      	str	r2, [sp, #0x4c]
 800209c:      	str	r0, [sp, #0x38]
 800209e:      	str	r1, [sp, #0x3c]
;         unsafe { intrinsics::offset(self, count) }
 80020a0:      	add	r0, r1
;     let mut ptr = buffer.as_ptr().add(split);
 80020a2:      	str	r0, [sp, #0x20]
;     if left > 1 {
 80020a4:      	ldr	r0, [sp, #0x1c]
 80020a6:      	cmp	r0, #0x1
 80020a8:      	bhi	0x80020b4 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x68> @ imm = #0x8
 80020aa:      	b	0x80020ac <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x60> @ imm = #-0x2
;     if left == 1 {
 80020ac:      	ldr	r0, [sp, #0x1c]
 80020ae:      	cmp	r0, #0x1
 80020b0:      	beq	0x8002102 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0xb6> @ imm = #0x4e
 80020b2:      	b	0x8002064 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x18> @ imm = #-0x52
;         while !port.is_fifo_ready() {}
 80020b4:      	ldr	r0, [sp, #0x18]
 80020b6:      	bl	0x8002262 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h6715dfba60264f58> @ imm = #0x1a8
 80020ba:      	cmp	r0, #0x0
 80020bc:      	beq	0x80020b4 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x68> @ imm = #-0xc
 80020be:      	b	0x80020c0 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x74> @ imm = #-0x2
;         port.write_u16(ptr::read(ptr as *const u16));
 80020c0:      	ldr	r0, [sp, #0x20]
 80020c2:      	bl	0x8001da4 <core::ptr::read::hb5d2917f2627e021> @ imm = #-0x322
 80020c6:      	mov	r1, r0
 80020c8:      	ldr	r0, [sp, #0x18]
 80020ca:      	bl	0x8002238 <cortex_m::peripheral::itm::Stim::write_u16::hf89854ea1efadb0b> @ imm = #0x16a
;         ptr = ptr.offset(2);
 80020ce:      	ldr	r0, [sp, #0x20]
 80020d0:      	str	r0, [sp]
 80020d2:      	str	r0, [sp, #0x40]
 80020d4:      	movs	r1, #0x2
 80020d6:      	str	r1, [sp, #0x44]
 80020d8:      	movs	r2, #0x1
;                 precondition_check($($arg,)*);
 80020da:      	bl	0x8001dae <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5> @ imm = #-0x330
 80020de:      	ldr	r0, [sp]
;         unsafe { intrinsics::offset(self, count) }
 80020e0:      	adds	r0, #0x2
;         ptr = ptr.offset(2);
 80020e2:      	str	r0, [sp, #0x20]
;         left -= 2;
 80020e4:      	ldr	r0, [sp, #0x1c]
 80020e6:      	subs	r1, r0, #0x2
 80020e8:      	str	r1, [sp, #0x4]
 80020ea:      	cmp	r0, #0x2
 80020ec:      	blo	0x80020f6 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0xaa> @ imm = #0x6
 80020ee:      	b	0x80020f0 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0xa4> @ imm = #-0x2
 80020f0:      	ldr	r0, [sp, #0x4]
 80020f2:      	str	r0, [sp, #0x1c]
;     if left > 1 {
 80020f4:      	b	0x80020ac <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x60> @ imm = #-0x4c
;         left -= 2;
 80020f6:      	movw	r0, #0x3f3c
 80020fa:      	movt	r0, #0x800
 80020fe:      	bl	0x8003006 <core::panicking::panic_const::panic_const_sub_overflow::hc5d9883488923494> @ imm = #0xf04
;         while !port.is_fifo_ready() {}
 8002102:      	ldr	r0, [sp, #0x18]
 8002104:      	bl	0x8002262 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h6715dfba60264f58> @ imm = #0x15a
 8002108:      	cmp	r0, #0x0
 800210a:      	beq	0x8002102 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0xb6> @ imm = #-0xc
 800210c:      	b	0x800210e <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0xc2> @ imm = #-0x2
;         port.write_u8(*ptr);
 800210e:      	ldr	r0, [sp, #0x18]
 8002110:      	ldr	r1, [sp, #0x20]
 8002112:      	ldrb	r1, [r1]
 8002114:      	bl	0x8002222 <cortex_m::peripheral::itm::Stim::write_u8::h5ef05dd24c9e462a> @ imm = #0x10a
 8002118:      	b	0x8002064 <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a+0x18> @ imm = #-0xb8

0800211a <cortex_m::itm::write_all::hc735a957d772bd45>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 800211a:      	push	{r7, lr}
 800211c:      	mov	r7, sp
 800211e:      	sub	sp, #0x48
 8002120:      	str	r0, [sp, #0x18]
 8002122:      	str	r0, [sp, #0x24]
 8002124:      	str	r1, [sp, #0x28]
 8002126:      	str	r2, [sp, #0x2c]
;         let mut len = buffer.len();
 8002128:      	str	r2, [sp, #0x1c]
 800212a:      	str	r1, [sp, #0x40]
 800212c:      	str	r2, [sp, #0x44]
;         let mut ptr = buffer.as_ptr();
 800212e:      	str	r1, [sp, #0x20]
;         if len == 0 {
 8002130:      	ldr	r0, [sp, #0x1c]
 8002132:      	cbnz	r0, 0x800213a <cortex_m::itm::write_all::hc735a957d772bd45+0x20> @ imm = #0x4
 8002134:      	b	0x8002136 <cortex_m::itm::write_all::hc735a957d772bd45+0x1c> @ imm = #-0x2
; }
 8002136:      	add	sp, #0x48
 8002138:      	pop	{r7, pc}
;         if ptr as usize % 2 == 1 {
 800213a:      	ldrb.w	r0, [sp, #0x20]
 800213e:      	lsls	r0, r0, #0x1f
 8002140:      	cbz	r0, 0x800214e <cortex_m::itm::write_all::hc735a957d772bd45+0x34> @ imm = #0xa
 8002142:      	b	0x8002144 <cortex_m::itm::write_all::hc735a957d772bd45+0x2a> @ imm = #-0x2
;             while !port.is_fifo_ready() {}
 8002144:      	ldr	r0, [sp, #0x18]
 8002146:      	bl	0x8002262 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h6715dfba60264f58> @ imm = #0x118
 800214a:      	cbnz	r0, 0x800215a <cortex_m::itm::write_all::hc735a957d772bd45+0x40> @ imm = #0xc
 800214c:      	b	0x8002144 <cortex_m::itm::write_all::hc735a957d772bd45+0x2a> @ imm = #-0xc
;         if ptr as usize % 4 == 2 {
 800214e:      	ldr	r0, [sp, #0x20]
 8002150:      	and	r0, r0, #0x3
 8002154:      	cmp	r0, #0x2
 8002156:      	beq	0x8002196 <cortex_m::itm::write_all::hc735a957d772bd45+0x7c> @ imm = #0x3c
 8002158:      	b	0x800219e <cortex_m::itm::write_all::hc735a957d772bd45+0x84> @ imm = #0x42
;             port.write_u8(*ptr);
 800215a:      	ldr	r0, [sp, #0x18]
 800215c:      	ldr	r1, [sp, #0x20]
 800215e:      	ldrb	r1, [r1]
 8002160:      	bl	0x8002222 <cortex_m::peripheral::itm::Stim::write_u8::h5ef05dd24c9e462a> @ imm = #0xbe
;             ptr = ptr.offset(1);
 8002164:      	ldr	r0, [sp, #0x20]
 8002166:      	str	r0, [sp, #0x10]
 8002168:      	str	r0, [sp, #0x38]
 800216a:      	movs	r2, #0x1
 800216c:      	str	r2, [sp, #0x3c]
;                 precondition_check($($arg,)*);
 800216e:      	mov	r1, r2
 8002170:      	bl	0x8001dae <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5> @ imm = #-0x3c6
 8002174:      	ldr	r0, [sp, #0x10]
;         unsafe { intrinsics::offset(self, count) }
 8002176:      	adds	r0, #0x1
;             ptr = ptr.offset(1);
 8002178:      	str	r0, [sp, #0x20]
;             len -= 1;
 800217a:      	ldr	r0, [sp, #0x1c]
 800217c:      	subs	r1, r0, #0x1
 800217e:      	str	r1, [sp, #0x14]
 8002180:      	cbz	r0, 0x800218a <cortex_m::itm::write_all::hc735a957d772bd45+0x70> @ imm = #0x6
 8002182:      	b	0x8002184 <cortex_m::itm::write_all::hc735a957d772bd45+0x6a> @ imm = #-0x2
 8002184:      	ldr	r0, [sp, #0x14]
 8002186:      	str	r0, [sp, #0x1c]
;         if ptr as usize % 2 == 1 {
 8002188:      	b	0x800214e <cortex_m::itm::write_all::hc735a957d772bd45+0x34> @ imm = #-0x3e
;             len -= 1;
 800218a:      	movw	r0, #0x3f4c
 800218e:      	movt	r0, #0x800
 8002192:      	bl	0x8003006 <core::panicking::panic_const::panic_const_sub_overflow::hc5d9883488923494> @ imm = #0xe70
;             if len > 1 {
 8002196:      	ldr	r0, [sp, #0x1c]
 8002198:      	cmp	r0, #0x1
 800219a:      	bhi	0x80021be <cortex_m::itm::write_all::hc735a957d772bd45+0xa4> @ imm = #0x20
 800219c:      	b	0x80021b6 <cortex_m::itm::write_all::hc735a957d772bd45+0x9c> @ imm = #0x16
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 800219e:      	ldr	r0, [sp, #0x20]
 80021a0:      	ldr	r1, [sp, #0x1c]
 80021a2:      	bl	0x8001e5a <core::slice::raw::from_raw_parts::hd7e622b90155d603> @ imm = #-0x34c
 80021a6:      	mov	r2, r0
 80021a8:      	ldr	r0, [sp, #0x18]
 80021aa:      	str	r2, [sp, #0xc]
 80021ac:      	mov	r2, r1
 80021ae:      	ldr	r1, [sp, #0xc]
 80021b0:      	bl	0x800204c <cortex_m::itm::write_aligned_impl::h7c4a99e43a55692a> @ imm = #-0x168
 80021b4:      	b	0x8002136 <cortex_m::itm::write_all::hc735a957d772bd45+0x1c> @ imm = #-0x82
;                 if len == 1 {
 80021b6:      	ldr	r0, [sp, #0x1c]
 80021b8:      	cmp	r0, #0x1
 80021ba:      	beq	0x80021c8 <cortex_m::itm::write_all::hc735a957d772bd45+0xae> @ imm = #0xa
 80021bc:      	b	0x8002136 <cortex_m::itm::write_all::hc735a957d772bd45+0x1c> @ imm = #-0x8a
;                 while !port.is_fifo_ready() {}
 80021be:      	ldr	r0, [sp, #0x18]
 80021c0:      	bl	0x8002262 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h6715dfba60264f58> @ imm = #0x9e
 80021c4:      	cbnz	r0, 0x80021e0 <cortex_m::itm::write_all::hc735a957d772bd45+0xc6> @ imm = #0x18
 80021c6:      	b	0x80021be <cortex_m::itm::write_all::hc735a957d772bd45+0xa4> @ imm = #-0xc
;                     while !port.is_fifo_ready() {}
 80021c8:      	ldr	r0, [sp, #0x18]
 80021ca:      	bl	0x8002262 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h6715dfba60264f58> @ imm = #0x94
 80021ce:      	cmp	r0, #0x0
 80021d0:      	beq	0x80021c8 <cortex_m::itm::write_all::hc735a957d772bd45+0xae> @ imm = #-0xc
 80021d2:      	b	0x80021d4 <cortex_m::itm::write_all::hc735a957d772bd45+0xba> @ imm = #-0x2
;                     port.write_u8(*ptr);
 80021d4:      	ldr	r0, [sp, #0x18]
 80021d6:      	ldr	r1, [sp, #0x20]
 80021d8:      	ldrb	r1, [r1]
 80021da:      	bl	0x8002222 <cortex_m::peripheral::itm::Stim::write_u8::h5ef05dd24c9e462a> @ imm = #0x44
 80021de:      	b	0x8002136 <cortex_m::itm::write_all::hc735a957d772bd45+0x1c> @ imm = #-0xac
;                 port.write_u16(ptr::read(ptr as *const u16));
 80021e0:      	ldr	r0, [sp, #0x20]
 80021e2:      	bl	0x8001da4 <core::ptr::read::hb5d2917f2627e021> @ imm = #-0x442
 80021e6:      	mov	r1, r0
 80021e8:      	ldr	r0, [sp, #0x18]
 80021ea:      	bl	0x8002238 <cortex_m::peripheral::itm::Stim::write_u16::hf89854ea1efadb0b> @ imm = #0x4a
;                 ptr = ptr.offset(2);
 80021ee:      	ldr	r0, [sp, #0x20]
 80021f0:      	str	r0, [sp, #0x4]
 80021f2:      	str	r0, [sp, #0x30]
 80021f4:      	movs	r1, #0x2
 80021f6:      	str	r1, [sp, #0x34]
 80021f8:      	movs	r2, #0x1
;                 precondition_check($($arg,)*);
 80021fa:      	bl	0x8001dae <core::ptr::const_ptr::<impl *const T>::offset::precondition_check::hf114082983ecc8d5> @ imm = #-0x450
 80021fe:      	ldr	r0, [sp, #0x4]
;         unsafe { intrinsics::offset(self, count) }
 8002200:      	adds	r0, #0x2
;                 ptr = ptr.offset(2);
 8002202:      	str	r0, [sp, #0x20]
;                 len -= 2;
 8002204:      	ldr	r0, [sp, #0x1c]
 8002206:      	subs	r1, r0, #0x2
 8002208:      	str	r1, [sp, #0x8]
 800220a:      	cmp	r0, #0x2
 800220c:      	blo	0x8002216 <cortex_m::itm::write_all::hc735a957d772bd45+0xfc> @ imm = #0x6
 800220e:      	b	0x8002210 <cortex_m::itm::write_all::hc735a957d772bd45+0xf6> @ imm = #-0x2
 8002210:      	ldr	r0, [sp, #0x8]
 8002212:      	str	r0, [sp, #0x1c]
;         if ptr as usize % 4 == 2 {
 8002214:      	b	0x800219e <cortex_m::itm::write_all::hc735a957d772bd45+0x84> @ imm = #-0x7a
;                 len -= 2;
 8002216:      	movw	r0, #0x3f5c
 800221a:      	movt	r0, #0x800
 800221e:      	bl	0x8003006 <core::panicking::panic_const::panic_const_sub_overflow::hc5d9883488923494> @ imm = #0xde4

08002222 <cortex_m::peripheral::itm::Stim::write_u8::h5ef05dd24c9e462a>:
;     pub fn write_u8(&mut self, value: u8) {
 8002222:      	push	{r7, lr}
 8002224:      	mov	r7, sp
 8002226:      	sub	sp, #0x10
 8002228:      	str	r0, [sp, #0x4]
 800222a:      	strb	r1, [r7, #-5]
 800222e:      	str	r0, [sp, #0xc]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u8, value) }
 8002230:      	bl	0x8001cb0 <core::ptr::write_volatile::he26b6f621697aa10> @ imm = #-0x584
;     }
 8002234:      	add	sp, #0x10
 8002236:      	pop	{r7, pc}

08002238 <cortex_m::peripheral::itm::Stim::write_u16::hf89854ea1efadb0b>:
;     pub fn write_u16(&mut self, value: u16) {
 8002238:      	push	{r7, lr}
 800223a:      	mov	r7, sp
 800223c:      	sub	sp, #0x10
 800223e:      	str	r0, [sp, #0x4]
 8002240:      	strh	r1, [r7, #-6]
 8002244:      	str	r0, [sp, #0xc]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u16, value) }
 8002246:      	bl	0x8001c86 <core::ptr::write_volatile::h482d8877a3741cc6> @ imm = #-0x5c4
;     }
 800224a:      	add	sp, #0x10
 800224c:      	pop	{r7, pc}

0800224e <cortex_m::peripheral::itm::Stim::write_u32::he7a4b87d1ba0dac0>:
;     pub fn write_u32(&mut self, value: u32) {
 800224e:      	push	{r7, lr}
 8002250:      	mov	r7, sp
 8002252:      	sub	sp, #0x10
 8002254:      	str	r0, [sp, #0x4]
 8002256:      	str	r1, [sp, #0x8]
 8002258:      	str	r0, [sp, #0xc]
;         unsafe { ptr::write_volatile(self.register.get(), value) }
 800225a:      	bl	0x8001c60 <core::ptr::write_volatile::h02b1c09a15955409> @ imm = #-0x5fe
;     }
 800225e:      	add	sp, #0x10
 8002260:      	pop	{r7, pc}

08002262 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h6715dfba60264f58>:
;     pub fn is_fifo_ready(&self) -> bool {
 8002262:      	push	{r7, lr}
 8002264:      	mov	r7, sp
 8002266:      	sub	sp, #0x8
 8002268:      	str	r0, [sp]
 800226a:      	str	r0, [sp, #0x4]
;         unsafe { ptr::read_volatile(self.register.get()) & 0b1 == 1 }
 800226c:      	bl	0x8001b7e <core::ptr::read_volatile::h434050a1f6636f1b> @ imm = #-0x6f2
;     }
 8002270:      	and	r0, r0, #0x1
 8002274:      	add	sp, #0x8
 8002276:      	pop	{r7, pc}

08002278 <__cpsid>:
 8002278:      	cpsid i
 800227a:      	bx	lr

0800227c <__cpsie>:
 800227c:      	cpsie i
 800227e:      	bx	lr

08002280 <__primask_r>:
 8002280:      	mrs	r0, primask
 8002284:      	bx	lr

08002286 <bare_metal::CriticalSection::new::heeddff5b23b73a86>:
;     }
 8002286:      	bx	lr

08002288 <core::option::unwrap_failed::he7b1f772ea296755>:
 8002288:      	push	{r7, lr}
 800228a:      	mov	r7, sp
 800228c:      	mov	r2, r0
 800228e:      	movw	r0, #0x3fe9
 8002292:      	movt	r0, #0x800
 8002296:      	movs	r1, #0x2b
 8002298:      	bl	0x800239a <core::panicking::panic::h83b297b4fe1e7103> @ imm = #0xfe

0800229c <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h2b5956d83f344cb2>:
 800229c:      	push	{r4, r5, r6, r7, lr}
 800229e:      	add	r7, sp, #0xc
 80022a0:      	push.w	{r8, r9, r10, r11}
 80022a4:      	sub	sp, #0x34
 80022a6:      	ldrd	r11, r10, [r1, #20]
 80022aa:      	movw	r1, #0x402c
 80022ae:      	ldr.w	r6, [r10, #0xc]
 80022b2:      	mov	r9, r0
 80022b4:      	movt	r1, #0x800
 80022b8:      	movs	r2, #0xc
 80022ba:      	mov	r0, r11
 80022bc:      	blx	r6
 80022be:      	cbz	r0, 0x80022ca <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h2b5956d83f344cb2+0x2e> @ imm = #0x8
 80022c0:      	movs	r0, #0x1
 80022c2:      	add	sp, #0x34
 80022c4:      	pop.w	{r8, r9, r10, r11}
 80022c8:      	pop	{r4, r5, r6, r7, pc}
 80022ca:      	movw	r2, #0x4014
 80022ce:      	movs	r1, #0x0
 80022d0:      	ldr.w	r0, [r9, #0x4]
 80022d4:      	movt	r2, #0x800
 80022d8:      	str	r1, [sp, #0x14]
 80022da:      	movs	r1, #0x3
 80022dc:      	str	r2, [sp, #0x4]
 80022de:      	add.w	r2, r0, #0xc
 80022e2:      	str	r1, [sp, #0x8]
 80022e4:      	add.w	r8, sp, #0x1c
 80022e8:      	str	r1, [sp, #0x10]
 80022ea:      	movw	r1, #0x3127
 80022ee:      	movt	r1, #0x800
 80022f2:      	str.w	r8, [sp, #0xc]
 80022f6:      	strd	r1, r2, [sp, #40]
 80022fa:      	add	r2, sp, #0x4
 80022fc:      	str	r1, [sp, #0x30]
 80022fe:      	add.w	r1, r0, #0x8
 8002302:      	str	r1, [sp, #0x24]
 8002304:      	movw	r1, #0x3215
 8002308:      	movt	r1, #0x800
 800230c:      	strd	r0, r1, [sp, #28]
 8002310:      	mov	r0, r11
 8002312:      	mov	r1, r10
 8002314:      	bl	0x80023ec <core::fmt::write::h12ffdcfc6d6a0c0c> @ imm = #0xd4
 8002318:      	cbz	r0, 0x8002324 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h2b5956d83f344cb2+0x88> @ imm = #0x8
 800231a:      	movs	r0, #0x1
 800231c:      	add	sp, #0x34
 800231e:      	pop.w	{r8, r9, r10, r11}
 8002322:      	pop	{r4, r5, r6, r7, pc}
 8002324:      	movw	r1, #0x4038
 8002328:      	mov	r0, r11
 800232a:      	movt	r1, #0x800
 800232e:      	movs	r2, #0x2
 8002330:      	blx	r6
 8002332:      	cbz	r0, 0x800233e <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h2b5956d83f344cb2+0xa2> @ imm = #0x8
 8002334:      	movs	r0, #0x1
 8002336:      	add	sp, #0x34
 8002338:      	pop.w	{r8, r9, r10, r11}
 800233c:      	pop	{r4, r5, r6, r7, pc}
 800233e:      	ldr.w	r12, [r9]
 8002342:      	mov	r1, r8
 8002344:      	ldm.w	r12, {r0, r2, r3, r4, r5, r6}
 8002348:      	stm	r1!, {r0, r2, r3, r4, r5, r6}
 800234a:      	mov	r0, r11
 800234c:      	mov	r1, r10
 800234e:      	mov	r2, r8
 8002350:      	bl	0x80023ec <core::fmt::write::h12ffdcfc6d6a0c0c> @ imm = #0x98
 8002354:      	add	sp, #0x34
 8002356:      	pop.w	{r8, r9, r10, r11}
 800235a:      	pop	{r4, r5, r6, r7, pc}

0800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89>:
 800235c:      	push	{r7, lr}
 800235e:      	mov	r7, sp
 8002360:      	sub	sp, #0x10
 8002362:      	strd	r0, r1, [sp, #4]
 8002366:      	add	r0, sp, #0x4
 8002368:      	movs	r2, #0x1
 800236a:      	strh.w	r2, [sp, #0xc]
 800236e:      	bl	0x8001abc <rust_begin_unwind> @ imm = #-0x8b6

08002372 <core::panicking::panic_nounwind_fmt::hfa74b382e6ffed0b>:
 8002372:      	push	{r7, lr}
 8002374:      	mov	r7, sp
 8002376:      	sub	sp, #0x28
 8002378:      	add.w	r12, sp, #0x4
 800237c:      	ldm.w	r0, {r4, r5, r6, r8, r9, lr}
 8002380:      	movs	r0, #0x0
 8002382:      	mov	r3, r12
 8002384:      	stm.w	r3, {r4, r5, r6, r8, r9, lr}
 8002388:      	strb.w	r0, [sp, #0x24]
 800238c:      	add	r0, sp, #0x1c
 800238e:      	strb.w	r1, [sp, #0x25]
 8002392:      	strd	r12, r2, [sp, #28]
 8002396:      	bl	0x8001abc <rust_begin_unwind> @ imm = #-0x8de

0800239a <core::panicking::panic::h83b297b4fe1e7103>:
 800239a:      	push	{r7, lr}
 800239c:      	mov	r7, sp
 800239e:      	sub	sp, #0x20
 80023a0:      	mov	r12, r2
 80023a2:      	movs	r2, #0x1
 80023a4:      	str	r2, [sp, #0x4]
 80023a6:      	add	r2, sp, #0x18
 80023a8:      	movs	r3, #0x0
 80023aa:      	strd	r0, r1, [sp, #24]
 80023ae:      	str	r2, [sp]
 80023b0:      	movs	r2, #0x4
 80023b2:      	mov	r0, sp
 80023b4:      	mov	r1, r12
 80023b6:      	str	r3, [sp, #0x10]
 80023b8:      	str	r3, [sp, #0xc]
 80023ba:      	str	r2, [sp, #0x8]
 80023bc:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #-0x64

080023c0 <core::panicking::panic_nounwind::h8f70cee2f053558e>:
 80023c0:      	push	{r7, lr}
 80023c2:      	mov	r7, sp
 80023c4:      	sub	sp, #0x20
 80023c6:      	movs	r2, #0x0
 80023c8:      	strd	r0, r1, [sp, #24]
 80023cc:      	str	r2, [sp, #0x10]
 80023ce:      	movs	r3, #0x1
 80023d0:      	str	r2, [sp, #0xc]
 80023d2:      	movs	r2, #0x4
 80023d4:      	str	r2, [sp, #0x8]
 80023d6:      	movw	r2, #0x4050
 80023da:      	movt	r2, #0x800
 80023de:      	mov	r0, sp
 80023e0:      	movs	r1, #0x0
 80023e2:      	str	r3, [sp, #0x4]
 80023e4:      	add	r3, sp, #0x18
 80023e6:      	str	r3, [sp]
 80023e8:      	bl	0x8002372 <core::panicking::panic_nounwind_fmt::hfa74b382e6ffed0b> @ imm = #-0x7a

080023ec <core::fmt::write::h12ffdcfc6d6a0c0c>:
 80023ec:      	push	{r4, r5, r6, r7, lr}
 80023ee:      	add	r7, sp, #0xc
 80023f0:      	push.w	{r8, r9, r10, r11}
 80023f4:      	sub	sp, #0x34
 80023f6:      	movs	r3, #0x3
 80023f8:      	ldr	r6, [r2, #0x10]
 80023fa:      	strb.w	r3, [sp, #0x30]
 80023fe:      	movs	r3, #0x20
 8002400:      	str	r3, [sp, #0x20]
 8002402:      	movs	r3, #0x0
 8002404:      	cmp	r6, #0x0
 8002406:      	strd	r1, r3, [sp, #40]
 800240a:      	str	r0, [sp, #0x24]
 800240c:      	str	r3, [sp, #0x18]
 800240e:      	str	r3, [sp, #0x10]
 8002410:      	beq	0x80024e6 <core::fmt::write::h12ffdcfc6d6a0c0c+0xfa> @ imm = #0xd2
 8002412:      	ldr	r0, [r2, #0x14]
 8002414:      	cmp	r0, #0x0
 8002416:      	beq.w	0x800253c <core::fmt::write::h12ffdcfc6d6a0c0c+0x150> @ imm = #0x122
 800241a:      	ldr.w	r10, [r2]
 800241e:      	lsls	r1, r0, #0x5
 8002420:      	ldr.w	r11, [r2, #0x8]
 8002424:      	subs	r0, #0x1
 8002426:      	bic	r0, r0, #0xf8000000
 800242a:      	mov.w	r8, #0x0
 800242e:      	mov.w	r9, #0x0
 8002432:      	adds	r0, #0x1
 8002434:      	str	r2, [sp, #0x8]
 8002436:      	str	r1, [sp, #0xc]
 8002438:      	str	r0, [sp, #0x4]
 800243a:      	add.w	r1, r10, r9
 800243e:      	ldr	r2, [r1, #0x4]
 8002440:      	cbz	r2, 0x8002452 <core::fmt::write::h12ffdcfc6d6a0c0c+0x66> @ imm = #0xe
 8002442:      	ldrd	r0, r3, [sp, #36]
 8002446:      	ldr	r1, [r1]
 8002448:      	ldr	r3, [r3, #0xc]
 800244a:      	blx	r3
 800244c:      	cmp	r0, #0x0
 800244e:      	bne.w	0x800255c <core::fmt::write::h12ffdcfc6d6a0c0c+0x170> @ imm = #0x10a
 8002452:      	add.w	r0, r6, r8
 8002456:      	ldr	r3, [r0, #0x10]
 8002458:      	add.w	r0, r6, r9, lsl #2
 800245c:      	ldrd	r2, r1, [r0, #8]
 8002460:      	ldrb	r5, [r0, #0x1c]
 8002462:      	ldr	r4, [r0, #0x18]
 8002464:      	str	r3, [sp, #0x20]
 8002466:      	strb.w	r5, [sp, #0x30]
 800246a:      	str	r4, [sp, #0x2c]
 800246c:      	cbz	r2, 0x800248e <core::fmt::write::h12ffdcfc6d6a0c0c+0xa2> @ imm = #0x1e
 800246e:      	cmp	r2, #0x1
 8002470:      	bne	0x8002478 <core::fmt::write::h12ffdcfc6d6a0c0c+0x8c> @ imm = #0x4
 8002472:      	ldr.w	r2, [r11, r1, lsl #3]
 8002476:      	cbz	r2, 0x8002488 <core::fmt::write::h12ffdcfc6d6a0c0c+0x9c> @ imm = #0xe
 8002478:      	movs	r2, #0x0
 800247a:      	ldr.w	r3, [r6, r8]
 800247e:      	strd	r2, r1, [sp, #16]
 8002482:      	cmp	r3, #0x2
 8002484:      	bne	0x800249c <core::fmt::write::h12ffdcfc6d6a0c0c+0xb0> @ imm = #0x14
 8002486:      	b	0x80024a8 <core::fmt::write::h12ffdcfc6d6a0c0c+0xbc> @ imm = #0x1e
 8002488:      	add.w	r1, r11, r1, lsl #3
 800248c:      	ldr	r1, [r1, #0x4]
 800248e:      	movs	r2, #0x1
 8002490:      	ldr.w	r3, [r6, r8]
 8002494:      	strd	r2, r1, [sp, #16]
 8002498:      	cmp	r3, #0x2
 800249a:      	beq	0x80024a8 <core::fmt::write::h12ffdcfc6d6a0c0c+0xbc> @ imm = #0xa
 800249c:      	ldr	r1, [r0, #0x4]
 800249e:      	cmp	r3, #0x1
 80024a0:      	bne	0x80024b2 <core::fmt::write::h12ffdcfc6d6a0c0c+0xc6> @ imm = #0xe
 80024a2:      	ldr.w	r2, [r11, r1, lsl #3]
 80024a6:      	cbz	r2, 0x80024ac <core::fmt::write::h12ffdcfc6d6a0c0c+0xc0> @ imm = #0x2
 80024a8:      	movs	r2, #0x0
 80024aa:      	b	0x80024b4 <core::fmt::write::h12ffdcfc6d6a0c0c+0xc8> @ imm = #0x6
 80024ac:      	add.w	r1, r11, r1, lsl #3
 80024b0:      	ldr	r1, [r1, #0x4]
 80024b2:      	movs	r2, #0x1
 80024b4:      	ldr	r3, [r0, #0x14]
 80024b6:      	str	r1, [sp, #0x1c]
 80024b8:      	str	r2, [sp, #0x18]
 80024ba:      	add.w	r1, r11, r3, lsl #3
 80024be:      	ldr.w	r0, [r11, r3, lsl #3]
 80024c2:      	ldr	r3, [r1, #0x4]
 80024c4:      	add	r1, sp, #0x10
 80024c6:      	blx	r3
 80024c8:      	cmp	r0, #0x0
 80024ca:      	bne	0x800255c <core::fmt::write::h12ffdcfc6d6a0c0c+0x170> @ imm = #0x8e
 80024cc:      	ldr	r0, [sp, #0xc]
 80024ce:      	add.w	r8, r8, #0x20
 80024d2:      	add.w	r9, r9, #0x8
 80024d6:      	cmp	r0, r8
 80024d8:      	bne	0x800243a <core::fmt::write::h12ffdcfc6d6a0c0c+0x4e> @ imm = #-0xa2
 80024da:      	ldrd	r10, r2, [sp, #4]
 80024de:      	ldr	r0, [r2, #0x4]
 80024e0:      	cmp	r10, r0
 80024e2:      	blo	0x8002546 <core::fmt::write::h12ffdcfc6d6a0c0c+0x15a> @ imm = #0x60
 80024e4:      	b	0x8002566 <core::fmt::write::h12ffdcfc6d6a0c0c+0x17a> @ imm = #0x7e
 80024e6:      	ldr	r0, [r2, #0xc]
 80024e8:      	cbz	r0, 0x800253c <core::fmt::write::h12ffdcfc6d6a0c0c+0x150> @ imm = #0x50
 80024ea:      	ldr	r4, [r2, #0x8]
 80024ec:      	add.w	r8, sp, #0x10
 80024f0:      	ldr.w	r11, [r2]
 80024f4:      	movs	r6, #0x0
 80024f6:      	add.w	r9, r4, r0, lsl #3
 80024fa:      	subs	r0, #0x1
 80024fc:      	bic	r0, r0, #0xe0000000
 8002500:      	str	r2, [sp, #0x8]
 8002502:      	add.w	r10, r0, #0x1
 8002506:      	add.w	r1, r11, r6, lsl #3
 800250a:      	ldr	r2, [r1, #0x4]
 800250c:      	cbz	r2, 0x800251a <core::fmt::write::h12ffdcfc6d6a0c0c+0x12e> @ imm = #0xa
 800250e:      	ldrd	r0, r3, [sp, #36]
 8002512:      	ldr	r1, [r1]
 8002514:      	ldr	r3, [r3, #0xc]
 8002516:      	blx	r3
 8002518:      	cbnz	r0, 0x800255c <core::fmt::write::h12ffdcfc6d6a0c0c+0x170> @ imm = #0x40
 800251a:      	add.w	r5, r4, r6, lsl #3
 800251e:      	mov	r1, r8
 8002520:      	ldrd	r0, r2, [r5]
 8002524:      	blx	r2
 8002526:      	cbnz	r0, 0x800255c <core::fmt::write::h12ffdcfc6d6a0c0c+0x170> @ imm = #0x32
 8002528:      	add.w	r0, r5, #0x8
 800252c:      	adds	r6, #0x1
 800252e:      	cmp	r0, r9
 8002530:      	bne	0x8002506 <core::fmt::write::h12ffdcfc6d6a0c0c+0x11a> @ imm = #-0x2e
 8002532:      	ldr	r2, [sp, #0x8]
 8002534:      	ldr	r0, [r2, #0x4]
 8002536:      	cmp	r10, r0
 8002538:      	blo	0x8002546 <core::fmt::write::h12ffdcfc6d6a0c0c+0x15a> @ imm = #0xa
 800253a:      	b	0x8002566 <core::fmt::write::h12ffdcfc6d6a0c0c+0x17a> @ imm = #0x28
 800253c:      	mov.w	r10, #0x0
 8002540:      	ldr	r0, [r2, #0x4]
 8002542:      	cmp	r10, r0
 8002544:      	bhs	0x8002566 <core::fmt::write::h12ffdcfc6d6a0c0c+0x17a> @ imm = #0x1e
 8002546:      	ldr	r2, [r2]
 8002548:      	ldrd	r0, r1, [sp, #36]
 800254c:      	ldr	r3, [r1, #0xc]
 800254e:      	ldr.w	r1, [r2, r10, lsl #3]
 8002552:      	add.w	r2, r2, r10, lsl #3
 8002556:      	ldr	r2, [r2, #0x4]
 8002558:      	blx	r3
 800255a:      	cbz	r0, 0x8002566 <core::fmt::write::h12ffdcfc6d6a0c0c+0x17a> @ imm = #0x8
 800255c:      	movs	r0, #0x1
 800255e:      	add	sp, #0x34
 8002560:      	pop.w	{r8, r9, r10, r11}
 8002564:      	pop	{r4, r5, r6, r7, pc}
 8002566:      	movs	r0, #0x0
 8002568:      	add	sp, #0x34
 800256a:      	pop.w	{r8, r9, r10, r11}
 800256e:      	pop	{r4, r5, r6, r7, pc}

08002570 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307>:
 8002570:      	push	{r4, r5, r6, r7, lr}
 8002572:      	add	r7, sp, #0xc
 8002574:      	push.w	{r8, r9, r10, r11}
 8002578:      	sub	sp, #0x1c
 800257a:      	ldr.w	r9, [r7, #0xc]
 800257e:      	mov	r4, r3
 8002580:      	mov	r5, r2
 8002582:      	cmp	r1, #0x0
 8002584:      	beq	0x8002624 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0xb4> @ imm = #0x9c
 8002586:      	ldr.w	r11, [r0, #0x1c]
 800258a:      	movs	r2, #0x2b
 800258c:      	ands	r1, r11, #0x1
 8002590:      	it	eq
 8002592:      	moveq.w	r2, #0x110000
 8002596:      	add.w	r10, r1, r9
 800259a:      	ldr.w	r8, [r7, #0x8]
 800259e:      	lsls.w	r1, r11, #0x1d
 80025a2:      	bpl	0x8002638 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0xc8> @ imm = #0x92
 80025a4:      	cmp	r4, #0x10
 80025a6:      	str	r2, [sp, #0x18]
 80025a8:      	bhs	0x800265c <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0xec> @ imm = #0xb0
 80025aa:      	cmp	r4, #0x0
 80025ac:      	beq	0x8002674 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x104> @ imm = #0xc4
 80025ae:      	and	r12, r4, #0x3
 80025b2:      	lsrs	r2, r4, #0x2
 80025b4:      	mov.w	r1, #0x0
 80025b8:      	beq	0x8002678 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x108> @ imm = #0xbc
 80025ba:      	and	r2, r2, #0x3
 80025be:      	str.w	r8, [sp, #0x10]
 80025c2:      	add.w	r8, r5, #0x1
 80025c6:      	strd	r4, r9, [sp, #8]
 80025ca:      	sub.w	lr, r1, r2, lsl #2
 80025ce:      	mvn	r2, #0x3
 80025d2:      	str	r5, [sp, #0x14]
 80025d4:      	add.w	r5, r8, r2
 80025d8:      	adds	r2, #0x4
 80025da:      	ldrsb.w	r3, [r5, #0x3]
 80025de:      	ldrsb.w	r4, [r5, #0x6]
 80025e2:      	ldrsb.w	r6, [r5, #0x5]
 80025e6:      	cmn.w	r3, #0x41
 80025ea:      	ldrsb.w	r5, [r5, #0x4]
 80025ee:      	it	gt
 80025f0:      	addgt	r1, #0x1
 80025f2:      	add.w	r3, lr, r2
 80025f6:      	cmn.w	r5, #0x41
 80025fa:      	it	gt
 80025fc:      	addgt	r1, #0x1
 80025fe:      	cmn.w	r6, #0x41
 8002602:      	it	gt
 8002604:      	addgt	r1, #0x1
 8002606:      	cmn.w	r4, #0x41
 800260a:      	it	gt
 800260c:      	addgt	r1, #0x1
 800260e:      	adds	r3, #0x4
 8002610:      	bne	0x80025d4 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x64> @ imm = #-0x40
 8002612:      	ldrd	r8, r5, [sp, #16]
 8002616:      	adds	r2, #0x4
 8002618:      	ldrd	r4, r9, [sp, #8]
 800261c:      	cmp.w	r12, #0x0
 8002620:      	bne	0x8002680 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x110> @ imm = #0x5c
 8002622:      	b	0x80026b0 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x140> @ imm = #0x8a
 8002624:      	ldr.w	r11, [r0, #0x1c]
 8002628:      	add.w	r10, r9, #0x1
 800262c:      	movs	r2, #0x2d
 800262e:      	ldr.w	r8, [r7, #0x8]
 8002632:      	lsls.w	r1, r11, #0x1d
 8002636:      	bmi	0x80025a4 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x34> @ imm = #-0x96
 8002638:      	movs	r5, #0x0
 800263a:      	ldr	r1, [r0]
 800263c:      	cbnz	r1, 0x80026ba <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x14a> @ imm = #0x7a
 800263e:      	mov	r1, r4
 8002640:      	ldrd	r4, r6, [r0, #20]
 8002644:      	str	r1, [sp]
 8002646:      	mov	r1, r6
 8002648:      	mov	r3, r5
 800264a:      	mov	r0, r4
 800264c:      	bl	0x8002832 <core::fmt::Formatter::pad_integral::write_prefix::h8184bad0ac048ed4> @ imm = #0x1e2
 8002650:      	cbz	r0, 0x800266c <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0xfc> @ imm = #0x18
 8002652:      	movs	r0, #0x1
 8002654:      	add	sp, #0x1c
 8002656:      	pop.w	{r8, r9, r10, r11}
 800265a:      	pop	{r4, r5, r6, r7, pc}
 800265c:      	mov	r6, r0
 800265e:      	mov	r0, r5
 8002660:      	mov	r1, r4
 8002662:      	bl	0x8002a7e <core::str::count::do_count_chars::ha27a9501de6e74b3> @ imm = #0x418
 8002666:      	mov	r1, r0
 8002668:      	mov	r0, r6
 800266a:      	b	0x80026b0 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x140> @ imm = #0x42
 800266c:      	ldr	r3, [r6, #0xc]
 800266e:      	mov	r0, r4
 8002670:      	mov	r1, r8
 8002672:      	b	0x8002766 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x1f6> @ imm = #0xf0
 8002674:      	movs	r1, #0x0
 8002676:      	b	0x80026b0 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x140> @ imm = #0x36
 8002678:      	movs	r2, #0x0
 800267a:      	cmp.w	r12, #0x0
 800267e:      	beq	0x80026b0 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x140> @ imm = #0x2e
 8002680:      	ldrsb	r3, [r5, r2]
 8002682:      	cmn.w	r3, #0x41
 8002686:      	it	gt
 8002688:      	addgt	r1, #0x1
 800268a:      	cmp.w	r12, #0x1
 800268e:      	beq	0x80026b0 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x140> @ imm = #0x1e
 8002690:      	add	r2, r5
 8002692:      	ldrsb.w	r3, [r2, #0x1]
 8002696:      	cmn.w	r3, #0x41
 800269a:      	it	gt
 800269c:      	addgt	r1, #0x1
 800269e:      	cmp.w	r12, #0x2
 80026a2:      	beq	0x80026b0 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x140> @ imm = #0xa
 80026a4:      	ldrsb.w	r2, [r2, #0x2]
 80026a8:      	cmn.w	r2, #0x41
 80026ac:      	it	gt
 80026ae:      	addgt	r1, #0x1
 80026b0:      	ldr	r2, [sp, #0x18]
 80026b2:      	add	r10, r1
 80026b4:      	ldr	r1, [r0]
 80026b6:      	cmp	r1, #0x0
 80026b8:      	beq	0x800263e <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0xce> @ imm = #-0x7e
 80026ba:      	strd	r8, r5, [sp, #16]
 80026be:      	ldr.w	r8, [r0, #0x4]
 80026c2:      	cmp	r8, r10
 80026c4:      	bls	0x80026ec <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x17c> @ imm = #0x24
 80026c6:      	lsls.w	r1, r11, #0x1c
 80026ca:      	bmi	0x800270a <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x19a> @ imm = #0x3c
 80026cc:      	ldrb.w	r1, [r0, #0x20]
 80026d0:      	sub.w	r3, r8, r10
 80026d4:      	str	r2, [sp, #0x18]
 80026d6:      	mov	r10, r9
 80026d8:      	mov	r11, r4
 80026da:      	mov	r9, r3
 80026dc:      	tbb	[pc, r1]
 80026e0: 5b 02 55 02  	.word	0x0255025b
 80026e4:      	mov	r1, r9
 80026e6:      	mov.w	r9, #0x0
 80026ea:      	b	0x8002796 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x226> @ imm = #0xa8
 80026ec:      	mov	r1, r4
 80026ee:      	ldrd	r4, r6, [r0, #20]
 80026f2:      	str	r1, [sp]
 80026f4:      	mov	r1, r6
 80026f6:      	ldr	r3, [sp, #0x14]
 80026f8:      	mov	r0, r4
 80026fa:      	bl	0x8002832 <core::fmt::Formatter::pad_integral::write_prefix::h8184bad0ac048ed4> @ imm = #0x134
 80026fe:      	cbz	r0, 0x8002760 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x1f0> @ imm = #0x5e
 8002700:      	movs	r0, #0x1
 8002702:      	add	sp, #0x1c
 8002704:      	pop.w	{r8, r9, r10, r11}
 8002708:      	pop	{r4, r5, r6, r7, pc}
 800270a:      	movs	r1, #0x30
 800270c:      	ldr.w	r11, [r0, #0x10]
 8002710:      	mov	r3, r4
 8002712:      	str	r1, [r0, #0x10]
 8002714:      	movs	r1, #0x1
 8002716:      	ldrb.w	r5, [r0, #0x20]
 800271a:      	ldrd	r4, r6, [r0, #20]
 800271e:      	strb.w	r1, [r0, #0x20]
 8002722:      	mov	r1, r6
 8002724:      	str	r0, [sp, #0xc]
 8002726:      	str	r3, [sp]
 8002728:      	mov	r0, r4
 800272a:      	ldr	r3, [sp, #0x14]
 800272c:      	bl	0x8002832 <core::fmt::Formatter::pad_integral::write_prefix::h8184bad0ac048ed4> @ imm = #0x102
 8002730:      	mov	r1, r0
 8002732:      	movs	r0, #0x1
 8002734:      	cmp	r1, #0x0
 8002736:      	bne.w	0x8002654 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0xe4> @ imm = #-0xe6
 800273a:      	str	r5, [sp, #0x18]
 800273c:      	sub.w	r0, r8, r10
 8002740:      	ldr.w	r8, [sp, #0x10]
 8002744:      	adds	r5, r0, #0x1
 8002746:      	subs	r5, #0x1
 8002748:      	beq	0x8002774 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x204> @ imm = #0x28
 800274a:      	ldr	r2, [r6, #0x10]
 800274c:      	mov	r0, r4
 800274e:      	movs	r1, #0x30
 8002750:      	blx	r2
 8002752:      	cmp	r0, #0x0
 8002754:      	beq	0x8002746 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x1d6> @ imm = #-0x12
 8002756:      	movs	r0, #0x1
 8002758:      	add	sp, #0x1c
 800275a:      	pop.w	{r8, r9, r10, r11}
 800275e:      	pop	{r4, r5, r6, r7, pc}
 8002760:      	ldr	r3, [r6, #0xc]
 8002762:      	mov	r0, r4
 8002764:      	ldr	r1, [sp, #0x10]
 8002766:      	mov	r2, r9
 8002768:      	add	sp, #0x1c
 800276a:      	pop.w	{r8, r9, r10, r11}
 800276e:      	pop.w	{r4, r5, r6, r7, lr}
 8002772:      	bx	r3
 8002774:      	ldr	r3, [r6, #0xc]
 8002776:      	mov	r0, r4
 8002778:      	mov	r1, r8
 800277a:      	mov	r2, r9
 800277c:      	blx	r3
 800277e:      	cbz	r0, 0x80027f0 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x280> @ imm = #0x6e
 8002780:      	movs	r0, #0x1
 8002782:      	add	sp, #0x1c
 8002784:      	pop.w	{r8, r9, r10, r11}
 8002788:      	pop	{r4, r5, r6, r7, pc}
 800278a:      	add.w	r2, r9, #0x1
 800278e:      	lsr.w	r1, r9, #0x1
 8002792:      	lsr.w	r9, r2, #0x1
 8002796:      	ldrd	r6, r4, [r0, #16]
 800279a:      	adds	r5, r1, #0x1
 800279c:      	ldr.w	r8, [r0, #0x18]
 80027a0:      	subs	r5, #0x1
 80027a2:      	beq	0x80027bc <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x24c> @ imm = #0x16
 80027a4:      	ldr.w	r2, [r8, #0x10]
 80027a8:      	mov	r0, r4
 80027aa:      	mov	r1, r6
 80027ac:      	blx	r2
 80027ae:      	cmp	r0, #0x0
 80027b0:      	beq	0x80027a0 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x230> @ imm = #-0x14
 80027b2:      	movs	r0, #0x1
 80027b4:      	add	sp, #0x1c
 80027b6:      	pop.w	{r8, r9, r10, r11}
 80027ba:      	pop	{r4, r5, r6, r7, pc}
 80027bc:      	str.w	r11, [sp]
 80027c0:      	mov	r0, r4
 80027c2:      	ldrd	r3, r2, [sp, #20]
 80027c6:      	mov	r1, r8
 80027c8:      	bl	0x8002832 <core::fmt::Formatter::pad_integral::write_prefix::h8184bad0ac048ed4> @ imm = #0x66
 80027cc:      	cbz	r0, 0x80027d8 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x268> @ imm = #0x8
 80027ce:      	movs	r0, #0x1
 80027d0:      	add	sp, #0x1c
 80027d2:      	pop.w	{r8, r9, r10, r11}
 80027d6:      	pop	{r4, r5, r6, r7, pc}
 80027d8:      	ldr.w	r3, [r8, #0xc]
 80027dc:      	mov	r0, r4
 80027de:      	ldr	r1, [sp, #0x10]
 80027e0:      	mov	r2, r10
 80027e2:      	blx	r3
 80027e4:      	cbz	r0, 0x8002806 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x296> @ imm = #0x1e
 80027e6:      	movs	r0, #0x1
 80027e8:      	add	sp, #0x1c
 80027ea:      	pop.w	{r8, r9, r10, r11}
 80027ee:      	pop	{r4, r5, r6, r7, pc}
 80027f0:      	ldr	r0, [sp, #0xc]
 80027f2:      	ldr	r1, [sp, #0x18]
 80027f4:      	strb.w	r1, [r0, #0x20]
 80027f8:      	str.w	r11, [r0, #0x10]
 80027fc:      	movs	r0, #0x0
 80027fe:      	add	sp, #0x1c
 8002800:      	pop.w	{r8, r9, r10, r11}
 8002804:      	pop	{r4, r5, r6, r7, pc}
 8002806:      	movs	r5, #0x0
 8002808:      	cmp	r9, r5
 800280a:      	beq	0x8002820 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x2b0> @ imm = #0x12
 800280c:      	ldr.w	r2, [r8, #0x10]
 8002810:      	mov	r0, r4
 8002812:      	mov	r1, r6
 8002814:      	blx	r2
 8002816:      	adds	r5, #0x1
 8002818:      	cmp	r0, #0x0
 800281a:      	beq	0x8002808 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x298> @ imm = #-0x16
 800281c:      	subs	r1, r5, #0x1
 800281e:      	b	0x8002822 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307+0x2b2> @ imm = #0x0
 8002820:      	mov	r1, r9
 8002822:      	movs	r0, #0x0
 8002824:      	cmp	r1, r9
 8002826:      	it	lo
 8002828:      	movlo	r0, #0x1
 800282a:      	add	sp, #0x1c
 800282c:      	pop.w	{r8, r9, r10, r11}
 8002830:      	pop	{r4, r5, r6, r7, pc}

08002832 <core::fmt::Formatter::pad_integral::write_prefix::h8184bad0ac048ed4>:
 8002832:      	push	{r4, r5, r6, r7, lr}
 8002834:      	add	r7, sp, #0xc
 8002836:      	str	r8, [sp, #-4]!
 800283a:      	ldr.w	r8, [r7, #0x8]
 800283e:      	mov	r4, r3
 8002840:      	mov	r6, r1
 8002842:      	cmp.w	r2, #0x110000
 8002846:      	beq	0x800285e <core::fmt::Formatter::pad_integral::write_prefix::h8184bad0ac048ed4+0x2c> @ imm = #0x14
 8002848:      	ldr	r3, [r6, #0x10]
 800284a:      	mov	r1, r2
 800284c:      	mov	r5, r0
 800284e:      	blx	r3
 8002850:      	mov	r1, r0
 8002852:      	mov	r0, r5
 8002854:      	cbz	r1, 0x800285e <core::fmt::Formatter::pad_integral::write_prefix::h8184bad0ac048ed4+0x2c> @ imm = #0x6
 8002856:      	movs	r0, #0x1
 8002858:      	ldr	r8, [sp], #4
 800285c:      	pop	{r4, r5, r6, r7, pc}
 800285e:      	cbz	r4, 0x8002870 <core::fmt::Formatter::pad_integral::write_prefix::h8184bad0ac048ed4+0x3e> @ imm = #0xe
 8002860:      	ldr	r3, [r6, #0xc]
 8002862:      	mov	r1, r4
 8002864:      	mov	r2, r8
 8002866:      	ldr	r8, [sp], #4
 800286a:      	pop.w	{r4, r5, r6, r7, lr}
 800286e:      	bx	r3
 8002870:      	movs	r0, #0x0
 8002872:      	ldr	r8, [sp], #4
 8002876:      	pop	{r4, r5, r6, r7, pc}

08002878 <core::fmt::Formatter::pad::hbd8e9baca10cb1be>:
 8002878:      	push	{r4, r5, r6, r7, lr}
 800287a:      	add	r7, sp, #0xc
 800287c:      	push.w	{r8, r9, r10, r11}
 8002880:      	sub	sp, #0x4
 8002882:      	mov	r5, r1
 8002884:      	ldr.w	r12, [r0]
 8002888:      	ldr	r1, [r0, #0x8]
 800288a:      	cmp.w	r12, #0x0
 800288e:      	it	eq
 8002890:      	lslseq.w	r3, r1, #0x1f
 8002894:      	beq	0x8002906 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x8e> @ imm = #0x6e
 8002896:      	lsls	r1, r1, #0x1f
 8002898:      	beq	0x80028fc <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x84> @ imm = #0x60
 800289a:      	ldr	r6, [r0, #0xc]
 800289c:      	add.w	lr, r5, r2
 80028a0:      	mov.w	r8, #0x0
 80028a4:      	mov	r1, r5
 80028a6:      	cbnz	r6, 0x80028e2 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x6a> @ imm = #0x38
 80028a8:      	cmp	r1, lr
 80028aa:      	beq	0x80028fc <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x84> @ imm = #0x4e
 80028ac:      	ldrsb.w	r1, [r1]
 80028b0:      	cmp.w	r1, #0xffffffff
 80028b4:      	itt	le
 80028b6:      	uxtble	r1, r1
 80028b8:      	cmple	r1, #0xe0
 80028ba:      	cmp.w	r8, #0x0
 80028be:      	beq	0x800290e <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x96> @ imm = #0x4c
 80028c0:      	cmp	r8, r2
 80028c2:      	bhs	0x800290c <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x94> @ imm = #0x46
 80028c4:      	ldrsb.w	r1, [r5, r8]
 80028c8:      	cmn.w	r1, #0x40
 80028cc:      	bge	0x800290e <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x96> @ imm = #0x3e
 80028ce:      	movs	r1, #0x0
 80028d0:      	b	0x8002910 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x98> @ imm = #0x3c
 80028d2:      	cmp	r1, #0xf0
 80028d4:      	ite	hs
 80028d6:      	addhs	r1, r4, #0x4
 80028d8:      	addlo	r1, r4, #0x3
 80028da:      	subs	r3, r1, r4
 80028dc:      	subs	r6, #0x1
 80028de:      	add	r8, r3
 80028e0:      	beq	0x80028a8 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x30> @ imm = #-0x3c
 80028e2:      	cmp	r1, lr
 80028e4:      	beq	0x80028fc <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x84> @ imm = #0x14
 80028e6:      	mov	r4, r1
 80028e8:      	ldrsb	r3, [r1], #1
 80028ec:      	cmp.w	r3, #0xffffffff
 80028f0:      	bgt	0x80028da <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x62> @ imm = #-0x1a
 80028f2:      	uxtb	r1, r3
 80028f4:      	cmp	r1, #0xe0
 80028f6:      	bhs	0x80028d2 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x5a> @ imm = #-0x28
 80028f8:      	adds	r1, r4, #0x2
 80028fa:      	b	0x80028da <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x62> @ imm = #-0x24
 80028fc:      	mov	r8, r2
 80028fe:      	cmp.w	r12, #0x0
 8002902:      	bne	0x800291e <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0xa6> @ imm = #0x18
 8002904:      	b	0x8002a02 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x18a> @ imm = #0xfa
 8002906:      	ldrd	r0, r1, [r0, #20]
 800290a:      	b	0x8002a08 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x190> @ imm = #0xfa
 800290c:      	bne	0x80028ce <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x56> @ imm = #-0x42
 800290e:      	mov	r1, r5
 8002910:      	cmp	r1, #0x0
 8002912:      	ite	eq
 8002914:      	moveq	r8, r2
 8002916:      	movne	r5, r1
 8002918:      	cmp.w	r12, #0x0
 800291c:      	beq	0x8002a02 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x18a> @ imm = #0xe2
 800291e:      	ldr.w	r9, [r0, #0x4]
 8002922:      	cmp.w	r8, #0x10
 8002926:      	bhs	0x8002998 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x120> @ imm = #0x6e
 8002928:      	cmp.w	r8, #0x0
 800292c:      	beq	0x80029a8 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x130> @ imm = #0x78
 800292e:      	and	r12, r8, #0x3
 8002932:      	lsrs.w	r2, r8, #0x2
 8002936:      	mov.w	r1, #0x0
 800293a:      	beq	0x80029ac <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x134> @ imm = #0x6e
 800293c:      	and	r2, r2, #0x3
 8002940:      	add.w	r10, r5, #0x1
 8002944:      	mov	r11, r5
 8002946:      	sub.w	lr, r1, r2, lsl #2
 800294a:      	mvn	r2, #0x3
 800294e:      	add.w	r4, r10, r2
 8002952:      	adds	r2, #0x4
 8002954:      	ldrsb.w	r6, [r4, #0x3]
 8002958:      	ldrsb.w	r3, [r4, #0x6]
 800295c:      	ldrsb.w	r5, [r4, #0x5]
 8002960:      	cmn.w	r6, #0x41
 8002964:      	ldrsb.w	r4, [r4, #0x4]
 8002968:      	it	gt
 800296a:      	addgt	r1, #0x1
 800296c:      	cmn.w	r4, #0x41
 8002970:      	it	gt
 8002972:      	addgt	r1, #0x1
 8002974:      	cmn.w	r5, #0x41
 8002978:      	it	gt
 800297a:      	addgt	r1, #0x1
 800297c:      	cmn.w	r3, #0x41
 8002980:      	add.w	r3, lr, r2
 8002984:      	it	gt
 8002986:      	addgt	r1, #0x1
 8002988:      	adds	r3, #0x4
 800298a:      	bne	0x800294e <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0xd6> @ imm = #-0x40
 800298c:      	adds	r2, #0x4
 800298e:      	mov	r5, r11
 8002990:      	cmp.w	r12, #0x0
 8002994:      	bne	0x80029b4 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x13c> @ imm = #0x1c
 8002996:      	b	0x80029e4 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x16c> @ imm = #0x4a
 8002998:      	mov	r6, r0
 800299a:      	mov	r0, r5
 800299c:      	mov	r1, r8
 800299e:      	bl	0x8002a7e <core::str::count::do_count_chars::ha27a9501de6e74b3> @ imm = #0xdc
 80029a2:      	mov	r1, r0
 80029a4:      	mov	r0, r6
 80029a6:      	b	0x80029e4 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x16c> @ imm = #0x3a
 80029a8:      	movs	r1, #0x0
 80029aa:      	b	0x80029e4 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x16c> @ imm = #0x36
 80029ac:      	movs	r2, #0x0
 80029ae:      	cmp.w	r12, #0x0
 80029b2:      	beq	0x80029e4 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x16c> @ imm = #0x2e
 80029b4:      	ldrsb	r3, [r5, r2]
 80029b6:      	cmn.w	r3, #0x41
 80029ba:      	it	gt
 80029bc:      	addgt	r1, #0x1
 80029be:      	cmp.w	r12, #0x1
 80029c2:      	beq	0x80029e4 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x16c> @ imm = #0x1e
 80029c4:      	add	r2, r5
 80029c6:      	ldrsb.w	r3, [r2, #0x1]
 80029ca:      	cmn.w	r3, #0x41
 80029ce:      	it	gt
 80029d0:      	addgt	r1, #0x1
 80029d2:      	cmp.w	r12, #0x2
 80029d6:      	beq	0x80029e4 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x16c> @ imm = #0xa
 80029d8:      	ldrsb.w	r2, [r2, #0x2]
 80029dc:      	cmn.w	r2, #0x41
 80029e0:      	it	gt
 80029e2:      	addgt	r1, #0x1
 80029e4:      	cmp	r9, r1
 80029e6:      	bls	0x8002a02 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x18a> @ imm = #0x18
 80029e8:      	ldrb.w	r2, [r0, #0x20]
 80029ec:      	sub.w	r9, r9, r1
 80029f0:      	movs	r1, #0x0
 80029f2:      	tbb	[pc, r2]
 80029f6: 17 02 11 17  	.word	0x17110217
 80029fa:      	mov	r1, r9
 80029fc:      	mov.w	r9, #0x0
 8002a00:      	b	0x8002a24 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x1ac> @ imm = #0x20
 8002a02:      	ldrd	r0, r1, [r0, #20]
 8002a06:      	mov	r2, r8
 8002a08:      	ldr	r3, [r1, #0xc]
 8002a0a:      	mov	r1, r5
 8002a0c:      	add	sp, #0x4
 8002a0e:      	pop.w	{r8, r9, r10, r11}
 8002a12:      	pop.w	{r4, r5, r6, r7, lr}
 8002a16:      	bx	r3
 8002a18:      	add.w	r2, r9, #0x1
 8002a1c:      	lsr.w	r1, r9, #0x1
 8002a20:      	lsr.w	r9, r2, #0x1
 8002a24:      	ldrd	r10, r11, [r0, #16]
 8002a28:      	adds	r4, r1, #0x1
 8002a2a:      	ldr	r6, [r0, #0x18]
 8002a2c:      	subs	r4, #0x1
 8002a2e:      	beq	0x8002a3e <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x1c6> @ imm = #0xc
 8002a30:      	ldr	r2, [r6, #0x10]
 8002a32:      	mov	r0, r11
 8002a34:      	mov	r1, r10
 8002a36:      	blx	r2
 8002a38:      	cmp	r0, #0x0
 8002a3a:      	beq	0x8002a2c <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x1b4> @ imm = #-0x12
 8002a3c:      	b	0x8002a4a <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x1d2> @ imm = #0xa
 8002a3e:      	ldr	r3, [r6, #0xc]
 8002a40:      	mov	r0, r11
 8002a42:      	mov	r1, r5
 8002a44:      	mov	r2, r8
 8002a46:      	blx	r3
 8002a48:      	cbz	r0, 0x8002a54 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x1dc> @ imm = #0x8
 8002a4a:      	movs	r0, #0x1
 8002a4c:      	add	sp, #0x4
 8002a4e:      	pop.w	{r8, r9, r10, r11}
 8002a52:      	pop	{r4, r5, r6, r7, pc}
 8002a54:      	movs	r5, #0x0
 8002a56:      	cmp	r9, r5
 8002a58:      	beq	0x8002a6c <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x1f4> @ imm = #0x10
 8002a5a:      	ldr	r2, [r6, #0x10]
 8002a5c:      	mov	r0, r11
 8002a5e:      	mov	r1, r10
 8002a60:      	blx	r2
 8002a62:      	adds	r5, #0x1
 8002a64:      	cmp	r0, #0x0
 8002a66:      	beq	0x8002a56 <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x1de> @ imm = #-0x14
 8002a68:      	subs	r1, r5, #0x1
 8002a6a:      	b	0x8002a6e <core::fmt::Formatter::pad::hbd8e9baca10cb1be+0x1f6> @ imm = #0x0
 8002a6c:      	mov	r1, r9
 8002a6e:      	movs	r0, #0x0
 8002a70:      	cmp	r1, r9
 8002a72:      	it	lo
 8002a74:      	movlo	r0, #0x1
 8002a76:      	add	sp, #0x4
 8002a78:      	pop.w	{r8, r9, r10, r11}
 8002a7c:      	pop	{r4, r5, r6, r7, pc}

08002a7e <core::str::count::do_count_chars::ha27a9501de6e74b3>:
 8002a7e:      	push	{r4, r5, r6, r7, lr}
 8002a80:      	add	r7, sp, #0xc
 8002a82:      	push.w	{r8, r9, r10, r11}
 8002a86:      	sub	sp, #0x8
 8002a88:      	mov	r9, r0
 8002a8a:      	adds	r0, #0x3
 8002a8c:      	bic	r10, r0, #0x3
 8002a90:      	sub.w	r8, r10, r9
 8002a94:      	cmp	r1, r8
 8002a96:      	bhs	0x8002b04 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x86> @ imm = #0x6a
 8002a98:      	cmp	r1, #0x0
 8002a9a:      	beq	0x8002b2a <core::str::count::do_count_chars::ha27a9501de6e74b3+0xac> @ imm = #0x8c
 8002a9c:      	and	r12, r1, #0x3
 8002aa0:      	lsrs	r2, r1, #0x2
 8002aa2:      	mov.w	r0, #0x0
 8002aa6:      	beq.w	0x8002f0c <core::str::count::do_count_chars::ha27a9501de6e74b3+0x48e> @ imm = #0x462
 8002aaa:      	sub.w	lr, r0, r2, lsl #2
 8002aae:      	add.w	r6, r9, #0x1
 8002ab2:      	mvn	r5, #0x3
 8002ab6:      	adds	r3, r6, r5
 8002ab8:      	adds	r5, #0x4
 8002aba:      	ldrsb.w	r1, [r3, #0x3]
 8002abe:      	ldrsb.w	r4, [r3, #0x6]
 8002ac2:      	ldrsb.w	r2, [r3, #0x5]
 8002ac6:      	cmn.w	r1, #0x41
 8002aca:      	ldrsb.w	r3, [r3, #0x4]
 8002ace:      	it	gt
 8002ad0:      	addgt	r0, #0x1
 8002ad2:      	add.w	r1, lr, r5
 8002ad6:      	cmn.w	r3, #0x41
 8002ada:      	it	gt
 8002adc:      	addgt	r0, #0x1
 8002ade:      	cmn.w	r2, #0x41
 8002ae2:      	it	gt
 8002ae4:      	addgt	r0, #0x1
 8002ae6:      	cmn.w	r4, #0x41
 8002aea:      	it	gt
 8002aec:      	addgt	r0, #0x1
 8002aee:      	adds	r1, #0x4
 8002af0:      	bne	0x8002ab6 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x38> @ imm = #-0x3e
 8002af2:      	adds	r2, r5, #0x4
 8002af4:      	cmp.w	r12, #0x0
 8002af8:      	bne.w	0x8002f16 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x498> @ imm = #0x41a
 8002afc:      	add	sp, #0x8
 8002afe:      	pop.w	{r8, r9, r10, r11}
 8002b02:      	pop	{r4, r5, r6, r7, pc}
 8002b04:      	sub.w	lr, r1, r8
 8002b08:      	lsrs.w	r12, lr, #0x2
 8002b0c:      	beq	0x8002a98 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x1a> @ imm = #-0x78
 8002b0e:      	and	r2, lr, #0x3
 8002b12:      	cmp	r10, r9
 8002b14:      	bne	0x8002b1a <core::str::count::do_count_chars::ha27a9501de6e74b3+0x9c> @ imm = #0x2
 8002b16:      	movs	r0, #0x0
 8002b18:      	b	0x8002bb4 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x136> @ imm = #0x98
 8002b1a:      	sub.w	r0, r9, r10
 8002b1e:      	cmn.w	r0, #0x4
 8002b22:      	bls	0x8002b34 <core::str::count::do_count_chars::ha27a9501de6e74b3+0xb6> @ imm = #0xe
 8002b24:      	movs	r0, #0x0
 8002b26:      	movs	r5, #0x0
 8002b28:      	b	0x8002b7c <core::str::count::do_count_chars::ha27a9501de6e74b3+0xfe> @ imm = #0x50
 8002b2a:      	movs	r0, #0x0
 8002b2c:      	add	sp, #0x8
 8002b2e:      	pop.w	{r8, r9, r10, r11}
 8002b32:      	pop	{r4, r5, r6, r7, pc}
 8002b34:      	add.w	r11, r9, #0x1
 8002b38:      	movs	r0, #0x0
 8002b3a:      	mvn	r6, #0x3
 8002b3e:      	add.w	r5, r11, r6
 8002b42:      	ldrsb.w	r4, [r5, #0x3]
 8002b46:      	ldrsb.w	r3, [r5, #0x6]
 8002b4a:      	ldrsb.w	r1, [r5, #0x5]
 8002b4e:      	cmn.w	r4, #0x41
 8002b52:      	ldrsb.w	r5, [r5, #0x4]
 8002b56:      	it	gt
 8002b58:      	addgt	r0, #0x1
 8002b5a:      	cmn.w	r5, #0x41
 8002b5e:      	it	gt
 8002b60:      	addgt	r0, #0x1
 8002b62:      	cmn.w	r1, #0x41
 8002b66:      	it	gt
 8002b68:      	addgt	r0, #0x1
 8002b6a:      	cmn.w	r3, #0x41
 8002b6e:      	it	gt
 8002b70:      	addgt	r0, #0x1
 8002b72:      	adds.w	r5, r6, #0x8
 8002b76:      	add.w	r6, r6, #0x4
 8002b7a:      	bne	0x8002b3e <core::str::count::do_count_chars::ha27a9501de6e74b3+0xc0> @ imm = #-0x40
 8002b7c:      	cmp	r10, r9
 8002b7e:      	beq	0x8002bb4 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x136> @ imm = #0x32
 8002b80:      	ldrsb.w	r1, [r9, r5]
 8002b84:      	cmn.w	r1, #0x41
 8002b88:      	it	gt
 8002b8a:      	addgt	r0, #0x1
 8002b8c:      	cmp.w	r8, #0x1
 8002b90:      	beq	0x8002bb4 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x136> @ imm = #0x20
 8002b92:      	add.w	r1, r9, r5
 8002b96:      	ldrsb.w	r3, [r1, #0x1]
 8002b9a:      	cmn.w	r3, #0x41
 8002b9e:      	it	gt
 8002ba0:      	addgt	r0, #0x1
 8002ba2:      	cmp.w	r8, #0x2
 8002ba6:      	beq	0x8002bb4 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x136> @ imm = #0xa
 8002ba8:      	ldrsb.w	r1, [r1, #0x2]
 8002bac:      	cmn.w	r1, #0x41
 8002bb0:      	it	gt
 8002bb2:      	addgt	r0, #0x1
 8002bb4:      	add.w	r4, r9, r8
 8002bb8:      	movs	r3, #0x0
 8002bba:      	cbz	r2, 0x8002bee <core::str::count::do_count_chars::ha27a9501de6e74b3+0x170> @ imm = #0x30
 8002bbc:      	bic	r1, lr, #0x3
 8002bc0:      	add	r1, r4
 8002bc2:      	ldrsb.w	r6, [r1]
 8002bc6:      	cmn.w	r6, #0x41
 8002bca:      	it	gt
 8002bcc:      	movgt	r3, #0x1
 8002bce:      	cmp	r2, #0x1
 8002bd0:      	beq	0x8002bee <core::str::count::do_count_chars::ha27a9501de6e74b3+0x170> @ imm = #0x1a
 8002bd2:      	ldrsb.w	r6, [r1, #0x1]
 8002bd6:      	cmn.w	r6, #0x41
 8002bda:      	it	gt
 8002bdc:      	addgt	r3, #0x1
 8002bde:      	cmp	r2, #0x2
 8002be0:      	beq	0x8002bee <core::str::count::do_count_chars::ha27a9501de6e74b3+0x170> @ imm = #0xa
 8002be2:      	ldrsb.w	r1, [r1, #0x2]
 8002be6:      	cmn.w	r1, #0x41
 8002bea:      	it	gt
 8002bec:      	addgt	r3, #0x1
 8002bee:      	add	r0, r3
 8002bf0:      	b	0x8002c18 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x19a> @ imm = #0x24
 8002bf2:      	mov.w	r8, #0x0
 8002bf6:      	uxtb16	r2, r8
 8002bfa:      	uxtb16	r3, r8, ror #8
 8002bfe:      	add	r2, r3
 8002c00:      	sub.w	r12, r12, r11
 8002c04:      	add.w	r4, r10, r11, lsl #2
 8002c08:      	ands	r1, r11, #0x3
 8002c0c:      	add.w	r2, r2, r2, lsl #16
 8002c10:      	add.w	r0, r0, r2, lsr #16
 8002c14:      	bne.w	0x8002eaa <core::str::count::do_count_chars::ha27a9501de6e74b3+0x42c> @ imm = #0x292
 8002c18:      	cmp.w	r12, #0x0
 8002c1c:      	beq.w	0x8002afc <core::str::count::do_count_chars::ha27a9501de6e74b3+0x7e> @ imm = #-0x124
 8002c20:      	cmp.w	r12, #0xc0
 8002c24:      	mov	r11, r12
 8002c26:      	it	hs
 8002c28:      	movhs.w	r11, #0xc0
 8002c2c:      	mov	r10, r4
 8002c2e:      	cmp.w	r12, #0x4
 8002c32:      	blo	0x8002bf2 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x174> @ imm = #-0x44
 8002c34:      	mvn	r1, #0xf
 8002c38:      	movs	r2, #0x1
 8002c3a:      	add.w	r1, r1, r11, lsl #2
 8002c3e:      	cmp	r1, #0x30
 8002c40:      	add.w	r2, r2, r1, lsr #4
 8002c44:      	strd	r2, r10, [sp]
 8002c48:      	bhs	0x8002c52 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x1d4> @ imm = #0x6
 8002c4a:      	mov.w	r8, #0x0
 8002c4e:      	mov	r4, r10
 8002c50:      	b	0x8002daa <core::str::count::do_count_chars::ha27a9501de6e74b3+0x32c> @ imm = #0x156
 8002c52:      	bic	r9, r2, #0x3
 8002c56:      	mov.w	r8, #0x0
 8002c5a:      	mov	r4, r10
 8002c5c:      	ldm.w	r4, {r1, r2, r3, r10}
 8002c60:      	subs.w	r9, r9, #0x4
 8002c64:      	ldr	r6, [r4, #0x18]
 8002c66:      	mvn.w	lr, r1
 8002c6a:      	lsr.w	r5, lr, #0x7
 8002c6e:      	orr.w	r1, r5, r1, lsr #6
 8002c72:      	mvn.w	r5, r2
 8002c76:      	bic	r1, r1, #0xfefefefe
 8002c7a:      	lsr.w	r5, r5, #0x7
 8002c7e:      	orr.w	r2, r5, r2, lsr #6
 8002c82:      	add	r1, r8
 8002c84:      	bic	r2, r2, #0xfefefefe
 8002c88:      	add	r2, r1
 8002c8a:      	mvn.w	r1, r3
 8002c8e:      	lsr.w	r5, r1, #0x7
 8002c92:      	orr.w	r3, r5, r3, lsr #6
 8002c96:      	bic	r3, r3, #0xfefefefe
 8002c9a:      	ldr	r5, [r4, #0x10]
 8002c9c:      	add	r2, r3
 8002c9e:      	mvn.w	r3, r10
 8002ca2:      	lsr.w	r3, r3, #0x7
 8002ca6:      	ldr	r1, [r4, #0x14]
 8002ca8:      	orr.w	r3, r3, r10, lsr #6
 8002cac:      	ldr.w	r8, [r4, #0x38]
 8002cb0:      	bic	r3, r3, #0xfefefefe
 8002cb4:      	ldr.w	lr, [r4, #0x3c]
 8002cb8:      	add	r2, r3
 8002cba:      	mvn.w	r3, r5
 8002cbe:      	lsr.w	r3, r3, #0x7
 8002cc2:      	orr.w	r3, r3, r5, lsr #6
 8002cc6:      	ldr	r5, [r4, #0x1c]
 8002cc8:      	bic	r3, r3, #0xfefefefe
 8002ccc:      	add	r2, r3
 8002cce:      	mvn.w	r3, r1
 8002cd2:      	lsr.w	r3, r3, #0x7
 8002cd6:      	orr.w	r1, r3, r1, lsr #6
 8002cda:      	bic	r1, r1, #0xfefefefe
 8002cde:      	ldr	r3, [r4, #0x20]
 8002ce0:      	add	r1, r2
 8002ce2:      	mvn.w	r2, r6
 8002ce6:      	lsr.w	r2, r2, #0x7
 8002cea:      	orr.w	r2, r2, r6, lsr #6
 8002cee:      	ldr	r6, [r4, #0x24]
 8002cf0:      	bic	r2, r2, #0xfefefefe
 8002cf4:      	add	r1, r2
 8002cf6:      	mvn.w	r2, r5
 8002cfa:      	lsr.w	r2, r2, #0x7
 8002cfe:      	orr.w	r2, r2, r5, lsr #6
 8002d02:      	ldr	r5, [r4, #0x28]
 8002d04:      	bic	r2, r2, #0xfefefefe
 8002d08:      	add	r1, r2
 8002d0a:      	mvn.w	r2, r3
 8002d0e:      	lsr.w	r2, r2, #0x7
 8002d12:      	orr.w	r2, r2, r3, lsr #6
 8002d16:      	ldr	r3, [r4, #0x2c]
 8002d18:      	bic	r2, r2, #0xfefefefe
 8002d1c:      	add	r1, r2
 8002d1e:      	mvn.w	r2, r6
 8002d22:      	lsr.w	r2, r2, #0x7
 8002d26:      	orr.w	r2, r2, r6, lsr #6
 8002d2a:      	ldr	r6, [r4, #0x30]
 8002d2c:      	bic	r2, r2, #0xfefefefe
 8002d30:      	add	r1, r2
 8002d32:      	mvn.w	r2, r5
 8002d36:      	lsr.w	r2, r2, #0x7
 8002d3a:      	orr.w	r2, r2, r5, lsr #6
 8002d3e:      	ldr	r5, [r4, #0x34]
 8002d40:      	bic	r2, r2, #0xfefefefe
 8002d44:      	add.w	r4, r4, #0x40
 8002d48:      	add	r1, r2
 8002d4a:      	mvn.w	r2, r3
 8002d4e:      	lsr.w	r2, r2, #0x7
 8002d52:      	orr.w	r2, r2, r3, lsr #6
 8002d56:      	bic	r2, r2, #0xfefefefe
 8002d5a:      	add	r1, r2
 8002d5c:      	mvn.w	r2, r6
 8002d60:      	lsr.w	r2, r2, #0x7
 8002d64:      	orr.w	r2, r2, r6, lsr #6
 8002d68:      	bic	r2, r2, #0xfefefefe
 8002d6c:      	add	r1, r2
 8002d6e:      	mvn.w	r2, r5
 8002d72:      	lsr.w	r2, r2, #0x7
 8002d76:      	orr.w	r2, r2, r5, lsr #6
 8002d7a:      	bic	r2, r2, #0xfefefefe
 8002d7e:      	add	r1, r2
 8002d80:      	mvn.w	r2, r8
 8002d84:      	lsr.w	r2, r2, #0x7
 8002d88:      	orr.w	r2, r2, r8, lsr #6
 8002d8c:      	bic	r2, r2, #0xfefefefe
 8002d90:      	add	r1, r2
 8002d92:      	mvn.w	r2, lr
 8002d96:      	lsr.w	r2, r2, #0x7
 8002d9a:      	orr.w	r2, r2, lr, lsr #6
 8002d9e:      	bic	r2, r2, #0xfefefefe
 8002da2:      	add.w	r8, r2, r1
 8002da6:      	bne.w	0x8002c5c <core::str::count::do_count_chars::ha27a9501de6e74b3+0x1de> @ imm = #-0x14e
 8002daa:      	ldr	r1, [sp]
 8002dac:      	ldr.w	r10, [sp, #0x4]
 8002db0:      	ands	lr, r1, #0x3
 8002db4:      	beq.w	0x8002bf6 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x178> @ imm = #-0x1c2
 8002db8:      	ldm.w	r4, {r2, r3, r6}
 8002dbc:      	cmp.w	lr, #0x1
 8002dc0:      	ldr	r5, [r4, #0xc]
 8002dc2:      	mvn.w	r1, r2
 8002dc6:      	lsr.w	r1, r1, #0x7
 8002dca:      	orr.w	r1, r1, r2, lsr #6
 8002dce:      	mvn.w	r2, r3
 8002dd2:      	lsr.w	r2, r2, #0x7
 8002dd6:      	bic	r1, r1, #0xfefefefe
 8002dda:      	orr.w	r2, r2, r3, lsr #6
 8002dde:      	add	r1, r8
 8002de0:      	bic	r2, r2, #0xfefefefe
 8002de4:      	add	r1, r2
 8002de6:      	mvn.w	r2, r6
 8002dea:      	lsr.w	r2, r2, #0x7
 8002dee:      	orr.w	r2, r2, r6, lsr #6
 8002df2:      	bic	r2, r2, #0xfefefefe
 8002df6:      	add	r1, r2
 8002df8:      	mvn.w	r2, r5
 8002dfc:      	lsr.w	r2, r2, #0x7
 8002e00:      	orr.w	r2, r2, r5, lsr #6
 8002e04:      	bic	r2, r2, #0xfefefefe
 8002e08:      	add.w	r8, r2, r1
 8002e0c:      	beq.w	0x8002bf6 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x178> @ imm = #-0x21a
 8002e10:      	add.w	r5, r4, #0x10
 8002e14:      	cmp.w	lr, #0x2
 8002e18:      	ldm	r5, {r1, r2, r3, r5}
 8002e1a:      	mvn.w	r6, r1
 8002e1e:      	lsr.w	r6, r6, #0x7
 8002e22:      	orr.w	r1, r6, r1, lsr #6
 8002e26:      	mvn.w	r6, r2
 8002e2a:      	bic	r1, r1, #0xfefefefe
 8002e2e:      	lsr.w	r6, r6, #0x7
 8002e32:      	orr.w	r2, r6, r2, lsr #6
 8002e36:      	add	r1, r8
 8002e38:      	bic	r2, r2, #0xfefefefe
 8002e3c:      	add	r1, r2
 8002e3e:      	mvn.w	r2, r3
 8002e42:      	lsr.w	r2, r2, #0x7
 8002e46:      	orr.w	r2, r2, r3, lsr #6
 8002e4a:      	bic	r2, r2, #0xfefefefe
 8002e4e:      	add	r1, r2
 8002e50:      	mvn.w	r2, r5
 8002e54:      	lsr.w	r2, r2, #0x7
 8002e58:      	orr.w	r2, r2, r5, lsr #6
 8002e5c:      	bic	r2, r2, #0xfefefefe
 8002e60:      	add.w	r8, r2, r1
 8002e64:      	beq.w	0x8002bf6 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x178> @ imm = #-0x272
 8002e68:      	add.w	r6, r4, #0x20
 8002e6c:      	ldm	r6, {r1, r2, r3, r6}
 8002e6e:      	mvns	r5, r1
 8002e70:      	lsrs	r5, r5, #0x7
 8002e72:      	orr.w	r1, r5, r1, lsr #6
 8002e76:      	mvns	r5, r2
 8002e78:      	bic	r1, r1, #0xfefefefe
 8002e7c:      	lsrs	r5, r5, #0x7
 8002e7e:      	orr.w	r2, r5, r2, lsr #6
 8002e82:      	add	r1, r8
 8002e84:      	bic	r2, r2, #0xfefefefe
 8002e88:      	add	r1, r2
 8002e8a:      	mvns	r2, r3
 8002e8c:      	lsrs	r2, r2, #0x7
 8002e8e:      	orr.w	r2, r2, r3, lsr #6
 8002e92:      	bic	r2, r2, #0xfefefefe
 8002e96:      	add	r1, r2
 8002e98:      	mvns	r2, r6
 8002e9a:      	lsrs	r2, r2, #0x7
 8002e9c:      	orr.w	r2, r2, r6, lsr #6
 8002ea0:      	bic	r2, r2, #0xfefefefe
 8002ea4:      	add.w	r8, r2, r1
 8002ea8:      	b	0x8002bf6 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x178> @ imm = #-0x2b6
 8002eaa:      	and	r3, r11, #0xfc
 8002eae:      	cmp	r1, #0x1
 8002eb0:      	ldr.w	r2, [r10, r3, lsl #2]
 8002eb4:      	mvn.w	r6, r2
 8002eb8:      	lsr.w	r6, r6, #0x7
 8002ebc:      	orr.w	r2, r6, r2, lsr #6
 8002ec0:      	bic	r2, r2, #0xfefefefe
 8002ec4:      	beq	0x8002ef2 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x474> @ imm = #0x2a
 8002ec6:      	add.w	r3, r10, r3, lsl #2
 8002eca:      	cmp	r1, #0x2
 8002ecc:      	ldr	r6, [r3, #0x4]
 8002ece:      	mvn.w	r5, r6
 8002ed2:      	lsr.w	r5, r5, #0x7
 8002ed6:      	orr.w	r6, r5, r6, lsr #6
 8002eda:      	bic	r6, r6, #0xfefefefe
 8002ede:      	add	r2, r6
 8002ee0:      	beq	0x8002ef2 <core::str::count::do_count_chars::ha27a9501de6e74b3+0x474> @ imm = #0xe
 8002ee2:      	ldr	r1, [r3, #0x8]
 8002ee4:      	mvns	r3, r1
 8002ee6:      	lsrs	r3, r3, #0x7
 8002ee8:      	orr.w	r1, r3, r1, lsr #6
 8002eec:      	bic	r1, r1, #0xfefefefe
 8002ef0:      	add	r2, r1
 8002ef2:      	uxtb16	r1, r2
 8002ef6:      	uxtb16	r2, r2, ror #8
 8002efa:      	add	r1, r2
 8002efc:      	add.w	r1, r1, r1, lsl #16
 8002f00:      	add.w	r0, r0, r1, lsr #16
 8002f04:      	add	sp, #0x8
 8002f06:      	pop.w	{r8, r9, r10, r11}
 8002f0a:      	pop	{r4, r5, r6, r7, pc}
 8002f0c:      	movs	r2, #0x0
 8002f0e:      	cmp.w	r12, #0x0
 8002f12:      	beq.w	0x8002afc <core::str::count::do_count_chars::ha27a9501de6e74b3+0x7e> @ imm = #-0x41a
 8002f16:      	ldrsb.w	r1, [r9, r2]
 8002f1a:      	cmn.w	r1, #0x41
 8002f1e:      	it	gt
 8002f20:      	addgt	r0, #0x1
 8002f22:      	cmp.w	r12, #0x1
 8002f26:      	beq.w	0x8002afc <core::str::count::do_count_chars::ha27a9501de6e74b3+0x7e> @ imm = #-0x42e
 8002f2a:      	add	r2, r9
 8002f2c:      	ldrsb.w	r1, [r2, #0x1]
 8002f30:      	cmn.w	r1, #0x41
 8002f34:      	it	gt
 8002f36:      	addgt	r0, #0x1
 8002f38:      	cmp.w	r12, #0x2
 8002f3c:      	beq.w	0x8002afc <core::str::count::do_count_chars::ha27a9501de6e74b3+0x7e> @ imm = #-0x444
 8002f40:      	ldrsb.w	r1, [r2, #0x2]
 8002f44:      	cmn.w	r1, #0x41
 8002f48:      	it	gt
 8002f4a:      	addgt	r0, #0x1
 8002f4c:      	add	sp, #0x8
 8002f4e:      	pop.w	{r8, r9, r10, r11}
 8002f52:      	pop	{r4, r5, r6, r7, pc}

08002f54 <core::char::methods::encode_utf8_raw::do_panic::runtime::haf1e49ca432775d9>:
 8002f54:      	push	{r7, lr}
 8002f56:      	mov	r7, sp
 8002f58:      	sub	sp, #0xa0
 8002f5a:      	mov	r12, r3
 8002f5c:      	add	r3, sp, #0x4
 8002f5e:      	stm	r3!, {r0, r1, r2}
 8002f60:      	add	r1, sp, #0xc
 8002f62:      	movw	r0, #0x3127
 8002f66:      	str	r1, [sp, #0x38]
 8002f68:      	movw	r1, #0x3079
 8002f6c:      	movt	r1, #0x800
 8002f70:      	movs	r3, #0x8
 8002f72:      	str	r1, [sp, #0x34]
 8002f74:      	add	r1, sp, #0x4
 8002f76:      	movt	r0, #0x800
 8002f7a:      	mov.w	lr, #0x20
 8002f7e:      	str	r3, [sp, #0x78]
 8002f80:      	movs	r3, #0x1
 8002f82:      	strd	r0, r1, [sp, #44]
 8002f86:      	movs	r1, #0x0
 8002f88:      	strd	lr, r3, [sp, #112]
 8002f8c:      	movs	r3, #0x4
 8002f8e:      	str	r1, [sp, #0x98]
 8002f90:      	movs	r2, #0x2
 8002f92:      	strd	r1, r3, [sp, #104]
 8002f96:      	str	r1, [sp, #0x58]
 8002f98:      	strd	lr, r1, [sp, #80]
 8002f9c:      	add	r1, sp, #0x40
 8002f9e:      	str	r0, [sp, #0x3c]
 8002fa0:      	add	r0, sp, #0x8
 8002fa2:      	str	r1, [sp, #0x20]
 8002fa4:      	movw	r1, #0x4164
 8002fa8:      	str	r0, [sp, #0x28]
 8002faa:      	movs	r0, #0x3
 8002fac:      	movt	r1, #0x800
 8002fb0:      	strb.w	r0, [sp, #0x9c]
 8002fb4:      	str	r1, [sp, #0x10]
 8002fb6:      	add	r1, sp, #0x28
 8002fb8:      	strd	r1, r0, [sp, #24]
 8002fbc:      	mov	r1, r12
 8002fbe:      	strb.w	r0, [sp, #0x7c]
 8002fc2:      	strb.w	r0, [sp, #0x5c]
 8002fc6:      	str	r0, [sp, #0x24]
 8002fc8:      	str	r0, [sp, #0x14]
 8002fca:      	add	r0, sp, #0x10
 8002fcc:      	str	r2, [sp, #0x94]
 8002fce:      	str.w	lr, [sp, #0x90]
 8002fd2:      	str	r2, [sp, #0x88]
 8002fd4:      	str	r2, [sp, #0x80]
 8002fd6:      	str	r2, [sp, #0x60]
 8002fd8:      	str	r2, [sp, #0x48]
 8002fda:      	str	r2, [sp, #0x40]
 8002fdc:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #-0xc84

08002fe0 <core::panicking::panic_const::panic_const_add_overflow::he3d7b2ec77b797ca>:
 8002fe0:      	push	{r7, lr}
 8002fe2:      	mov	r7, sp
 8002fe4:      	sub	sp, #0x18
 8002fe6:      	mov	r1, r0
 8002fe8:      	movs	r0, #0x0
 8002fea:      	movs	r2, #0x1
 8002fec:      	str	r0, [sp, #0x10]
 8002fee:      	str	r2, [sp, #0x4]
 8002ff0:      	movw	r2, #0x3f88
 8002ff4:      	str	r0, [sp, #0xc]
 8002ff6:      	movs	r0, #0x4
 8002ff8:      	movt	r2, #0x800
 8002ffc:      	str	r0, [sp, #0x8]
 8002ffe:      	mov	r0, sp
 8003000:      	str	r2, [sp]
 8003002:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #-0xcaa

08003006 <core::panicking::panic_const::panic_const_sub_overflow::hc5d9883488923494>:
 8003006:      	push	{r7, lr}
 8003008:      	mov	r7, sp
 800300a:      	sub	sp, #0x18
 800300c:      	mov	r1, r0
 800300e:      	movs	r0, #0x0
 8003010:      	movs	r2, #0x1
 8003012:      	str	r0, [sp, #0x10]
 8003014:      	str	r2, [sp, #0x4]
 8003016:      	movw	r2, #0x3fb4
 800301a:      	str	r0, [sp, #0xc]
 800301c:      	movs	r0, #0x4
 800301e:      	movt	r2, #0x800
 8003022:      	str	r0, [sp, #0x8]
 8003024:      	mov	r0, sp
 8003026:      	str	r2, [sp]
 8003028:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #-0xcd0

0800302c <core::panicking::panic_const::panic_const_shl_overflow::hb001c80bfcce0420>:
 800302c:      	push	{r7, lr}
 800302e:      	mov	r7, sp
 8003030:      	sub	sp, #0x18
 8003032:      	mov	r1, r0
 8003034:      	movs	r0, #0x0
 8003036:      	movs	r2, #0x1
 8003038:      	str	r0, [sp, #0x10]
 800303a:      	str	r2, [sp, #0x4]
 800303c:      	movw	r2, #0x3fe0
 8003040:      	str	r0, [sp, #0xc]
 8003042:      	movs	r0, #0x4
 8003044:      	movt	r2, #0x800
 8003048:      	str	r0, [sp, #0x8]
 800304a:      	mov	r0, sp
 800304c:      	str	r2, [sp]
 800304e:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #-0xcf6

08003052 <core::panicking::panic_const::panic_const_div_by_zero::hecbc72778d74a986>:
 8003052:      	push	{r7, lr}
 8003054:      	mov	r7, sp
 8003056:      	sub	sp, #0x18
 8003058:      	mov	r1, r0
 800305a:      	movs	r0, #0x0
 800305c:      	movs	r2, #0x1
 800305e:      	str	r0, [sp, #0x10]
 8003060:      	str	r2, [sp, #0x4]
 8003062:      	movw	r2, #0x4198
 8003066:      	str	r0, [sp, #0xc]
 8003068:      	movs	r0, #0x4
 800306a:      	movt	r2, #0x800
 800306e:      	str	r0, [sp, #0x8]
 8003070:      	mov	r0, sp
 8003072:      	str	r2, [sp]
 8003074:      	bl	0x800235c <core::panicking::panic_fmt::h95dadea1e7f9fd89> @ imm = #-0xd1c

08003078 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hbec43a754cb350c9>:
 8003078:      	push	{r4, r5, r7, lr}
 800307a:      	add	r7, sp, #0x8
 800307c:      	sub	sp, #0x88
 800307e:      	mov	r12, r1
 8003080:      	ldr	r1, [r0]
 8003082:      	add.w	lr, sp, #0x8
 8003086:      	movs	r3, #0x80
 8003088:      	movs	r0, #0x81
 800308a:      	and	r2, r1, #0xf
 800308e:      	add.w	r4, r2, #0x37
 8003092:      	cmp	r2, #0xa
 8003094:      	it	lo
 8003096:      	addlo.w	r4, r2, #0x30
 800309a:      	add.w	r2, lr, r0
 800309e:      	strb	r4, [r2, #-2]
 80030a2:      	lsrs	r4, r1, #0x4
 80030a4:      	beq	0x80030fa <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hbec43a754cb350c9+0x82> @ imm = #0x52
 80030a6:      	and	r4, r4, #0xf
 80030aa:      	add.w	r5, r4, #0x37
 80030ae:      	cmp	r4, #0xa
 80030b0:      	it	lo
 80030b2:      	addlo.w	r5, r4, #0x30
 80030b6:      	lsrs	r4, r1, #0x8
 80030b8:      	strb	r5, [r2, #-3]
 80030bc:      	beq	0x80030fe <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hbec43a754cb350c9+0x86> @ imm = #0x3e
 80030be:      	and	r4, r4, #0xf
 80030c2:      	subs	r0, #0x4
 80030c4:      	add.w	r5, r4, #0x37
 80030c8:      	cmp	r4, #0xa
 80030ca:      	it	lo
 80030cc:      	addlo.w	r5, r4, #0x30
 80030d0:      	lsrs	r4, r1, #0xc
 80030d2:      	strb	r5, [r2, #-4]
 80030d6:      	beq	0x8003104 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hbec43a754cb350c9+0x8c> @ imm = #0x2a
 80030d8:      	and	r4, r4, #0xf
 80030dc:      	subs	r3, #0x4
 80030de:      	add.w	r5, r4, #0x37
 80030e2:      	cmp	r4, #0xa
 80030e4:      	it	lo
 80030e6:      	addlo.w	r5, r4, #0x30
 80030ea:      	lsrs	r1, r1, #0x10
 80030ec:      	strb	r5, [r2, #-5]
 80030f0:      	bne	0x800308a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hbec43a754cb350c9+0x12> @ imm = #-0x6a
 80030f2:      	subs	r1, r0, #0x1
 80030f4:      	mov	r3, r0
 80030f6:      	mov	r0, r1
 80030f8:      	b	0x8003106 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hbec43a754cb350c9+0x8e> @ imm = #0xa
 80030fa:      	subs	r0, #0x2
 80030fc:      	b	0x8003106 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hbec43a754cb350c9+0x8e> @ imm = #0x6
 80030fe:      	subs	r3, #0x1
 8003100:      	subs	r0, #0x3
 8003102:      	b	0x8003106 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hbec43a754cb350c9+0x8e> @ imm = #0x0
 8003104:      	subs	r3, #0x2
 8003106:      	rsb.w	r1, r3, #0x81
 800310a:      	movw	r2, #0x4060
 800310e:      	add	r0, lr
 8003110:      	movt	r2, #0x800
 8003114:      	strd	r0, r1, [sp]
 8003118:      	mov	r0, r12
 800311a:      	movs	r1, #0x1
 800311c:      	movs	r3, #0x2
 800311e:      	bl	0x8002570 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307> @ imm = #-0xbb2
 8003122:      	add	sp, #0x88
 8003124:      	pop	{r4, r5, r7, pc}

08003126 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce>:
 8003126:      	push	{r4, r5, r6, r7, lr}
 8003128:      	add	r7, sp, #0xc
 800312a:      	push.w	{r8, r9, r10, r11}
 800312e:      	sub	sp, #0x1c
 8003130:      	ldr	r4, [r0]
 8003132:      	movw	r0, #0x4062
 8003136:      	movw	lr, #0x2710
 800313a:      	mov	r5, r1
 800313c:      	cmp	r4, lr
 800313e:      	movt	r0, #0x800
 8003142:      	blo	0x80031c0 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce+0x9a> @ imm = #0x7a
 8003144:      	movw	r8, #0x1759
 8003148:      	movw	r3, #0xe0ff
 800314c:      	sub.w	r11, r7, #0x26
 8003150:      	movs	r1, #0x0
 8003152:      	movt	r8, #0xd1b7
 8003156:      	movw	r9, #0x147b
 800315a:      	mov.w	r10, #0x64
 800315e:      	movt	r3, #0x5f5
 8003162:      	str	r5, [sp, #0xc]
 8003164:      	umull	r2, r5, r4, r8
 8003168:      	add.w	r12, r11, r1
 800316c:      	subs	r1, #0x4
 800316e:      	cmp	r4, r3
 8003170:      	lsr.w	r2, r5, #0xd
 8003174:      	mls	r5, r2, lr, r4
 8003178:      	mov	r4, r2
 800317a:      	uxth	r6, r5
 800317c:      	lsr.w	r6, r6, #0x2
 8003180:      	mul	r6, r6, r9
 8003184:      	lsr.w	r6, r6, #0x11
 8003188:      	mls	r5, r6, r10, r5
 800318c:      	ldrh.w	r6, [r0, r6, lsl #1]
 8003190:      	strh.w	r6, [r12, #0x6]
 8003194:      	uxth	r5, r5
 8003196:      	ldrh.w	r5, [r0, r5, lsl #1]
 800319a:      	strh.w	r5, [r12, #0x8]
 800319e:      	bhi	0x8003164 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce+0x3e> @ imm = #-0x3e
 80031a0:      	ldr	r5, [sp, #0xc]
 80031a2:      	add.w	r3, r1, #0xa
 80031a6:      	mov	r4, r2
 80031a8:      	cmp	r4, #0x63
 80031aa:      	bhi	0x80031c6 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce+0xa0> @ imm = #0x18
 80031ac:      	mov	r1, r4
 80031ae:      	cmp	r1, #0xa
 80031b0:      	blo	0x80031ea <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce+0xc4> @ imm = #0x36
 80031b2:      	ldrh.w	r0, [r0, r1, lsl #1]
 80031b6:      	subs	r2, r3, #0x2
 80031b8:      	sub.w	r1, r7, #0x26
 80031bc:      	strh	r0, [r1, r2]
 80031be:      	b	0x80031f6 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce+0xd0> @ imm = #0x34
 80031c0:      	movs	r3, #0xa
 80031c2:      	cmp	r4, #0x63
 80031c4:      	bls	0x80031ac <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce+0x86> @ imm = #-0x1c
 80031c6:      	uxth	r1, r4
 80031c8:      	movw	r2, #0x147b
 80031cc:      	lsrs	r1, r1, #0x2
 80031ce:      	subs	r3, #0x2
 80031d0:      	muls	r1, r2, r1
 80031d2:      	movs	r2, #0x64
 80031d4:      	sub.w	r6, r7, #0x26
 80031d8:      	lsrs	r1, r1, #0x11
 80031da:      	mls	r2, r1, r2, r4
 80031de:      	uxth	r2, r2
 80031e0:      	ldrh.w	r2, [r0, r2, lsl #1]
 80031e4:      	strh	r2, [r6, r3]
 80031e6:      	cmp	r1, #0xa
 80031e8:      	bhs	0x80031b2 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce+0x8c> @ imm = #-0x3a
 80031ea:      	orr	r0, r1, #0x30
 80031ee:      	subs	r2, r3, #0x1
 80031f0:      	sub.w	r1, r7, #0x26
 80031f4:      	strb	r0, [r1, r2]
 80031f6:      	rsb.w	r0, r2, #0xa
 80031fa:      	add	r1, r2
 80031fc:      	movs	r2, #0x1
 80031fe:      	movs	r3, #0x0
 8003200:      	strd	r1, r0, [sp]
 8003204:      	mov	r0, r5
 8003206:      	movs	r1, #0x1
 8003208:      	bl	0x8002570 <core::fmt::Formatter::pad_integral::h5a2f401d22a34307> @ imm = #-0xc9c
 800320c:      	add	sp, #0x1c
 800320e:      	pop.w	{r8, r9, r10, r11}
 8003212:      	pop	{r4, r5, r6, r7, pc}

08003214 <<&T as core::fmt::Display>::fmt::h72f0ffab0b2faacc>:
 8003214:      	mov	r3, r1
 8003216:      	ldrd	r1, r2, [r0]
 800321a:      	mov	r0, r3
 800321c:      	b.w	0x8002878 <core::fmt::Formatter::pad::hbd8e9baca10cb1be> @ imm = #-0x9a8

08003220 <HardFaultTrampoline>:
 8003220:      	mov	r0, lr
 8003222:      	movs	r1, #0x4
 8003224:      	tst	r0, r1
 8003226:      	bne	0x800322e <HardFaultTrampoline+0xe> @ imm = #0x4
 8003228:      	mrs	r0, msp
 800322c:      	b	0x8003234 <HardFault_>  @ imm = #0x4
 800322e:      	mrs	r0, psp
 8003232:      	b	0x8003234 <HardFault_>  @ imm = #-0x2

08003234 <HardFault_>:
; pub unsafe extern "C" fn HardFault_(ef: &ExceptionFrame) -> ! {
 8003234:      	push	{r7, lr}
 8003236:      	mov	r7, sp
 8003238:      	sub	sp, #0x8
 800323a:      	str	r0, [sp, #0x4]
;     loop {
 800323c:      	b	0x800323e <HardFault_+0xa> @ imm = #-0x2
 800323e:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8003240:      	strb	r0, [r7, #-5]
 8003244:      	ldrb	r0, [r7, #-5]
 8003248:      	bl	0x80015a4 <core::sync::atomic::compiler_fence::h47b36ed461e034f3> @ imm = #-0x1ca8
 800324c:      	b	0x800323e <HardFault_+0xa> @ imm = #-0x12
 800324e:      	bmi	0x80031fa <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h3586ad374fae7dce+0xd4> @ imm = #-0x58
